{"db":[{"meta":{"exported_on":1633132952632,"version":"4.16.0"},"data":{"custom_theme_settings":[],"posts":[{"id":"615550ca0b5fbd002f24e833","uuid":"9f0a6f83-05d4-4d82-ba90-52db2ecf3f19","title":"Setting up apps and custom integrations","slug":"integrations","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/integrations-icons.png\",\"cardWidth\":\"full\"}],[\"markdown\",{\"markdown\":\"<script src=\\\"https://zapier.com/apps/embed/widget.js?services=Ghost,-shortcm,-hubspot,-sendpulse,-noticeable,-aweber,-icontact,-facebook-pages,-github,-medium,-slack,-mailchimp,-activecampaign,-twitter,-discourse&container,-convertkit,-drip,-airtable=true&limit=5\\\"></script>\\n\"}],[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/iawriter-integration.png\",\"width\":2244,\"height\":936}]],\"markups\":[[\"a\",[\"href\",\"https://ghost.org/integrations/\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"It's possible to extend your Ghost site and connect it with hundreds of the most popular apps and tools using integrations. \"]]],[1,\"p\",[[0,[],0,\"Whether you need to automatically publish new posts on social media, connect your favorite analytics tool, sync your community or embed forms into your content — our \"],[0,[0],1,\"integrations library\"],[0,[],0,\" has got it all covered with hundreds of integration tutorials.\"]]],[1,\"p\",[[0,[],0,\"Many integrations are as simple as inserting an embed by pasting a link, or copying a snippet of code directly from an app and pasting it into Ghost. Our integration tutorials are used by creators of all kinds to get apps and integrations up and running in no time — no technical knowledge required.\"]]],[10,0],[1,\"h2\",[[0,[],0,\"Zapier\"]]],[1,\"p\",[[0,[],0,\"Zapier is a no-code tool that allows you to build powerful automations, and our official integration allows you to connect your Ghost site to more than 1,000 external services.\"]]],[1,\"blockquote\",[[0,[1],1,\"Example\"],[0,[],0,\": When someone new subscribes to a newsletter on a Ghost site (Trigger) then the contact information is automatically pushed into MailChimp (Action).\"]]],[1,\"p\",[[0,[1],1,\"Here's a few of the most popular automation templates:\"],[0,[],0,\" \"]]],[10,1],[1,\"h2\",[[0,[],0,\"Custom integrations\"]]],[1,\"p\",[[0,[],0,\"For more advanced automation, it's possible to create custom Ghost integrations with dedicated API keys from the Integrations page within Ghost Admin. \"]]],[10,2],[1,\"p\",[[0,[],0,\"These custom integrations allow you to use the Ghost API without needing to write code, and create powerful workflows such as sending content from your favorite desktop editor into Ghost as a new draft.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>It's possible to extend your Ghost site and connect it with hundreds of the most popular apps and tools using integrations. </p><p>Whether you need to automatically publish new posts on social media, connect your favorite analytics tool, sync your community or embed forms into your content — our <a href=\"https://ghost.org/integrations/\">integrations library</a> has got it all covered with hundreds of integration tutorials.</p><p>Many integrations are as simple as inserting an embed by pasting a link, or copying a snippet of code directly from an app and pasting it into Ghost. Our integration tutorials are used by creators of all kinds to get apps and integrations up and running in no time — no technical knowledge required.</p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://static.ghost.org/v4.0.0/images/integrations-icons.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h2 id=\"zapier\">Zapier</h2><p>Zapier is a no-code tool that allows you to build powerful automations, and our official integration allows you to connect your Ghost site to more than 1,000 external services.</p><blockquote><strong>Example</strong>: When someone new subscribes to a newsletter on a Ghost site (Trigger) then the contact information is automatically pushed into MailChimp (Action).</blockquote><p><strong>Here's a few of the most popular automation templates:</strong> </p><!--kg-card-begin: markdown--><script src=\"https://zapier.com/apps/embed/widget.js?services=Ghost,-shortcm,-hubspot,-sendpulse,-noticeable,-aweber,-icontact,-facebook-pages,-github,-medium,-slack,-mailchimp,-activecampaign,-twitter,-discourse&container,-convertkit,-drip,-airtable=true&limit=5\"></script>\n<!--kg-card-end: markdown--><h2 id=\"custom-integrations\">Custom integrations</h2><p>For more advanced automation, it's possible to create custom Ghost integrations with dedicated API keys from the Integrations page within Ghost Admin. </p><figure class=\"kg-card kg-image-card\"><img src=\"https://static.ghost.org/v4.0.0/images/iawriter-integration.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2244\" height=\"936\"></figure><p>These custom integrations allow you to use the Ghost API without needing to write code, and create powerful workflows such as sending content from your favorite desktop editor into Ghost as a new draft.</p>","comment_id":"615550ca0b5fbd002f24e833","plaintext":"It's possible to extend your Ghost site and connect it with hundreds of the most\npopular apps and tools using integrations. \n\nWhether you need to automatically publish new posts on social media, connect\nyour favorite analytics tool, sync your community or embed forms into your\ncontent — our integrations library [https://ghost.org/integrations/] has got it\nall covered with hundreds of integration tutorials.\n\nMany integrations are as simple as inserting an embed by pasting a link, or\ncopying a snippet of code directly from an app and pasting it into Ghost. Our\nintegration tutorials are used by creators of all kinds to get apps and\nintegrations up and running in no time — no technical knowledge required.\n\nZapier\nZapier is a no-code tool that allows you to build powerful automations, and our\nofficial integration allows you to connect your Ghost site to more than 1,000\nexternal services.\n\n> Example: When someone new subscribes to a newsletter on a Ghost site (Trigger)\nthen the contact information is automatically pushed into MailChimp (Action).\nHere's a few of the most popular automation templates: \n\nCustom integrations\nFor more advanced automation, it's possible to create custom Ghost integrations\nwith dedicated API keys from the Integrations page within Ghost Admin. \n\nThese custom integrations allow you to use the Ghost API without needing to\nwrite code, and create powerful workflows such as sending content from your\nfavorite desktop editor into Ghost as a new draft.","feature_image":"https://static.ghost.org/v4.0.0/images/app-integrations.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T05:53:14.000Z","published_at":"2021-09-30T05:53:14.000Z","custom_excerpt":"Work with all your favorite apps and tools or create your own custom integrations using the Ghost API.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615550ca0b5fbd002f24e835","uuid":"e5168766-96c8-4f60-b7b8-b7c1ad4d5e0e","title":"How to grow your business around an audience","slug":"grow","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}]],\"markups\":[[\"strong\"],[\"a\",[\"href\",\"https://ghost.org/pricing/\"]],[\"em\"],[\"a\",[\"href\",\"https://ghost.org/blog/how-to-create-a-newsletter/\"]],[\"a\",[\"href\",\"https://ghost.org/blog/membership-sites/\"]],[\"a\",[\"href\",\"https://newsletterguide.org/\"]],[\"a\",[\"href\",\"https://ghost.org/blog/find-your-niche-creator-economy/\"]],[\"a\",[\"href\",\"https://ghost.org/blog/newsletter-referral-programs/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"As you grow, you'll probably want to start inviting team members and collaborators to your site. Ghost has a number of different user roles for your team:\"]]],[1,\"p\",[[0,[0],1,\"Contributors\"],[1,[],0,0],[0,[],0,\"This is the base user level in Ghost. Contributors can create and edit their own draft posts, but they are unable to edit drafts of others or publish posts. Contributors are \"],[0,[0],1,\"untrusted\"],[0,[],0,\" users with the most basic access to your publication.\"]]],[1,\"p\",[[0,[0],1,\"Authors\"],[1,[],0,1],[0,[],0,\"Authors are the 2nd user level in Ghost. Authors can write, edit and publish their own posts. Authors are \"],[0,[0],1,\"trusted\"],[0,[],0,\" users. If you don't trust users to be allowed to publish their own posts, they should be set as Contributors.\"]]],[1,\"p\",[[0,[0],1,\"Editors\"],[1,[],0,2],[0,[],0,\"Editors are the 3rd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new Contributors & Authors to the site.\"]]],[1,\"p\",[[0,[0],1,\"Administrators\"],[1,[],0,3],[0,[],0,\"The top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.\"],[1,[],0,4],[1,[],0,5],[0,[0],1,\"The Owner\"],[1,[],0,6],[0,[],0,\"There is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable. For example: billing details, if using \"],[0,[1,0],2,\"Ghost(Pro)\"],[0,[],0,\".\"]]],[1,\"blockquote\",[[0,[2],1,\"Ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design.\"]]],[10,0],[1,\"p\",[[0,[],0,\"If you're looking for insights, tips and reference materials to expand your content business, here's 5 top resources to get you started:\"]]],[3,\"ul\",[[[0,[3,0],2,\"How to create a premium newsletter (+ some case studies)\"],[0,[0],1,\" \"],[0,[],0,\" \"],[1,[],0,7],[0,[],0,\"Learn how others run successful paid email newsletter products\"]],[[0,[0,4],2,\"The ultimate guide to membership websites for creators\"],[1,[],0,8],[0,[],0,\"Tips to help you build, launch and grow your new membership business\"]],[[0,[0,5],2,\"The Newsletter Guide\"],[1,[],0,9],[0,[],0,\"A 201 guide for taking your newsletters to the next level\"]],[[0,[6,0],2,\"The proven way to find your niche, explained\"],[1,[],0,10],[0,[],0,\"Find the overlap and find a monetizable niche that gets noticed\"]],[[0,[0,7],2,\"Should you launch a referral program? \"],[1,[],0,11],[0,[],0,\"Strategies for building a sustainable referral growth machine\"]]]]],\"ghostVersion\":\"4.0\"}","html":"<p>As you grow, you'll probably want to start inviting team members and collaborators to your site. Ghost has a number of different user roles for your team:</p><p><strong>Contributors</strong><br>This is the base user level in Ghost. Contributors can create and edit their own draft posts, but they are unable to edit drafts of others or publish posts. Contributors are <strong>untrusted</strong> users with the most basic access to your publication.</p><p><strong>Authors</strong><br>Authors are the 2nd user level in Ghost. Authors can write, edit and publish their own posts. Authors are <strong>trusted</strong> users. If you don't trust users to be allowed to publish their own posts, they should be set as Contributors.</p><p><strong>Editors</strong><br>Editors are the 3rd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new Contributors &amp; Authors to the site.</p><p><strong>Administrators</strong><br>The top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.<br><br><strong>The Owner</strong><br>There is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable. For example: billing details, if using <a href=\"https://ghost.org/pricing/\"><strong>Ghost(Pro)</strong></a>.</p><blockquote><em>Ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design.</em></blockquote><hr><p>If you're looking for insights, tips and reference materials to expand your content business, here's 5 top resources to get you started:</p><ul><li><a href=\"https://ghost.org/blog/how-to-create-a-newsletter/\"><strong>How to create a premium newsletter (+ some case studies)</strong></a><strong> </strong> <br>Learn how others run successful paid email newsletter products</li><li><strong><a href=\"https://ghost.org/blog/membership-sites/\">The ultimate guide to membership websites for creators</a></strong><br>Tips to help you build, launch and grow your new membership business</li><li><strong><a href=\"https://newsletterguide.org/\">The Newsletter Guide</a></strong><br>A 201 guide for taking your newsletters to the next level</li><li><a href=\"https://ghost.org/blog/find-your-niche-creator-economy/\"><strong>The proven way to find your niche, explained</strong></a><br>Find the overlap and find a monetizable niche that gets noticed</li><li><strong><a href=\"https://ghost.org/blog/newsletter-referral-programs/\">Should you launch a referral program? </a></strong><br>Strategies for building a sustainable referral growth machine</li></ul>","comment_id":"615550ca0b5fbd002f24e835","plaintext":"As you grow, you'll probably want to start inviting team members and\ncollaborators to your site. Ghost has a number of different user roles for your\nteam:\n\nContributors\nThis is the base user level in Ghost. Contributors can create and edit their own\ndraft posts, but they are unable to edit drafts of others or publish posts.\nContributors are untrusted users with the most basic access to your publication.\n\nAuthors\nAuthors are the 2nd user level in Ghost. Authors can write, edit and publish\ntheir own posts. Authors are trusted users. If you don't trust users to be\nallowed to publish their own posts, they should be set as Contributors.\n\nEditors\nEditors are the 3rd user level in Ghost. Editors can do everything that an\nAuthor can do, but they can also edit and publish the posts of others - as well\nas their own. Editors can also invite new Contributors & Authors to the site.\n\nAdministrators\nThe top user level in Ghost is Administrator. Again, administrators can do\neverything that Authors and Editors can do, but they can also edit all site\nsettings and data, not just content. Additionally, administrators have full\naccess to invite, manage or remove any other user of the site.\n\nThe Owner\nThere is only ever one owner of a Ghost site. The owner is a special user which\nhas all the same permissions as an Administrator, but with two exceptions: The\nOwner can never be deleted. And in some circumstances the owner will have access\nto additional special settings if applicable. For example: billing details, if\nusing Ghost(Pro) [https://ghost.org/pricing/].\n\n> Ask all of your users to fill out their user profiles, including bio and social\nlinks. These will populate rich structured data for posts and generally create\nmore opportunities for themes to fully populate their design.\n\n--------------------------------------------------------------------------------\n\nIf you're looking for insights, tips and reference materials to expand your\ncontent business, here's 5 top resources to get you started:\n\n * How to create a premium newsletter (+ some case studies)\n   [https://ghost.org/blog/how-to-create-a-newsletter/] \n   Learn how others run successful paid email newsletter products\n * The ultimate guide to membership websites for creators\n   [https://ghost.org/blog/membership-sites/]\n   Tips to help you build, launch and grow your new membership business\n * The Newsletter Guide [https://newsletterguide.org/]\n   A 201 guide for taking your newsletters to the next level\n * The proven way to find your niche, explained\n   [https://ghost.org/blog/find-your-niche-creator-economy/]\n   Find the overlap and find a monetizable niche that gets noticed\n * Should you launch a referral program?\n   [https://ghost.org/blog/newsletter-referral-programs/]\n   Strategies for building a sustainable referral growth machine","feature_image":"https://static.ghost.org/v4.0.0/images/admin-settings.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T05:53:14.000Z","published_at":"2021-09-30T05:53:15.000Z","custom_excerpt":"A guide to collaborating with other staff users to publish, and some resources to help you with the next steps of growing your business","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615550ca0b5fbd002f24e837","uuid":"2b484d0e-b95f-4c3f-bc92-919658126dc5","title":"Selling premium memberships with recurring revenue","slug":"sell","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/thebrowser.jpg\",\"width\":1600,\"height\":2000,\"href\":\"https://thebrowser.com\",\"caption\":\"The Browser has over 10,000 paying subscribers\"}],[\"paywall\",{}]],\"markups\":[[\"a\",[\"href\",\"https://stripe.com\"]],[\"strong\"],[\"a\",[\"href\",\"https://stratechery.com\"]],[\"a\",[\"href\",\"https://www.theinformation.com\"]],[\"a\",[\"href\",\"https://thebrowser.com\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"For creators and aspiring entrepreneurs looking to generate a sustainable recurring revenue stream from their creative work, Ghost has built-in payments allowing you to create a subscription commerce business.\"]]],[1,\"p\",[[0,[],0,\"Connect your \"],[0,[0],1,\"Stripe\"],[0,[],0,\" account to Ghost, and you'll be able to quickly and easily create monthly and yearly premium plans for members to subscribe to, as well as complimentary plans for friends and family.\"]]],[1,\"p\",[[0,[],0,\"Ghost takes \"],[0,[1],1,\"0% payment fees\"],[0,[],0,\", so everything you make is yours to keep!\"]]],[1,\"p\",[[0,[],0,\"Using subscriptions, you can build an independent media business like \"],[0,[2],1,\"Stratechery\"],[0,[],0,\", \"],[0,[3],1,\"The Information\"],[0,[],0,\", or \"],[0,[4],1,\"The Browser\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"The creator economy is just getting started, and Ghost allows you to build something based on technology that you own and control.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Most successful subscription businesses publish a mix of free and paid posts to attract a new audience, and upsell the most loyal members to a premium offering. You can also mix different access levels within the same post, showing a free preview to logged out members and then, right when you're ready for a cliffhanger, that's a good time to...\"]]],[10,1],[1,\"p\",[[0,[],0,\"Hold back some of the best bits for paying members only! \"]]],[1,\"p\",[[0,[],0,\"The \"],[0,[1],1,\"Public preview\"],[0,[],0,\" card allows to create a divide between how much of your post should be available as a public free-preview, and how much should be restricted based on the post access level.\"]]],[1,\"p\",[[0,[],0,\"These last paragraphs are only visible on the site if you're logged in as a paying member. To test this out, you can connect a Stripe account, create a member account for yourself, and give yourself a complimentary premium plan.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>For creators and aspiring entrepreneurs looking to generate a sustainable recurring revenue stream from their creative work, Ghost has built-in payments allowing you to create a subscription commerce business.</p><p>Connect your <a href=\"https://stripe.com\">Stripe</a> account to Ghost, and you'll be able to quickly and easily create monthly and yearly premium plans for members to subscribe to, as well as complimentary plans for friends and family.</p><p>Ghost takes <strong>0% payment fees</strong>, so everything you make is yours to keep!</p><p>Using subscriptions, you can build an independent media business like <a href=\"https://stratechery.com\">Stratechery</a>, <a href=\"https://www.theinformation.com\">The Information</a>, or <a href=\"https://thebrowser.com\">The Browser</a>.</p><p>The creator economy is just getting started, and Ghost allows you to build something based on technology that you own and control.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><a href=\"https://thebrowser.com\"><img src=\"https://static.ghost.org/v4.0.0/images/thebrowser.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"1600\" height=\"2000\"></a><figcaption>The Browser has over 10,000 paying subscribers</figcaption></figure><p>Most successful subscription businesses publish a mix of free and paid posts to attract a new audience, and upsell the most loyal members to a premium offering. You can also mix different access levels within the same post, showing a free preview to logged out members and then, right when you're ready for a cliffhanger, that's a good time to...</p><!--members-only--><p>Hold back some of the best bits for paying members only! </p><p>The <strong>Public preview</strong> card allows to create a divide between how much of your post should be available as a public free-preview, and how much should be restricted based on the post access level.</p><p>These last paragraphs are only visible on the site if you're logged in as a paying member. To test this out, you can connect a Stripe account, create a member account for yourself, and give yourself a complimentary premium plan.</p>","comment_id":"615550ca0b5fbd002f24e837","plaintext":"For creators and aspiring entrepreneurs looking to generate a sustainable\nrecurring revenue stream from their creative work, Ghost has built-in payments\nallowing you to create a subscription commerce business.\n\nConnect your Stripe [https://stripe.com] account to Ghost, and you'll be able to\nquickly and easily create monthly and yearly premium plans for members to\nsubscribe to, as well as complimentary plans for friends and family.\n\nGhost takes 0% payment fees, so everything you make is yours to keep!\n\nUsing subscriptions, you can build an independent media business like \nStratechery [https://stratechery.com], The Information\n[https://www.theinformation.com], or The Browser [https://thebrowser.com].\n\nThe creator economy is just getting started, and Ghost allows you to build\nsomething based on technology that you own and control.\n\n[https://thebrowser.com]The Browser has over 10,000 paying subscribersMost\nsuccessful subscription businesses publish a mix of free and paid posts to\nattract a new audience, and upsell the most loyal members to a premium offering.\nYou can also mix different access levels within the same post, showing a free\npreview to logged out members and then, right when you're ready for a\ncliffhanger, that's a good time to...\n\nHold back some of the best bits for paying members only! \n\nThe Public preview card allows to create a divide between how much of your post\nshould be available as a public free-preview, and how much should be restricted\nbased on the post access level.\n\nThese last paragraphs are only visible on the site if you're logged in as a\npaying member. To test this out, you can connect a Stripe account, create a\nmember account for yourself, and give yourself a complimentary premium plan.","feature_image":"https://static.ghost.org/v4.0.0/images/organizing-your-content.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"paid","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T05:53:14.000Z","published_at":"2021-09-30T05:53:16.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615550ca0b5fbd002f24e839","uuid":"b7ab4add-6f74-4e04-a345-48666ad2240e","title":"Building your audience with subscriber signups","slug":"portal","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/portalsettings.png\",\"width\":2924,\"height\":1810,\"cardWidth\":\"wide\"}],[\"hr\",{}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"#/portal\"]],[\"a\",[\"href\",\"__GHOST_URL__/sell/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"What sets Ghost apart from other products is that you can publish content and grow your audience using the same platform. Rather than just endlessly posting and hoping someone is listening, you can track real signups against your work and have them subscribe to be notified of future posts. The feature that makes all this possible is called \"],[0,[0],1,\"Portal\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Portal is an embedded interface for your audience to sign up to your site. It works on every Ghost site, with every theme, and for any type of publisher. \"]]],[1,\"p\",[[0,[],0,\"You can customize the design, content and settings of Portal to suit your site, whether you just want people to sign up to your newsletter — or you're running a full premium publication with user sign-ins and private content.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Once people sign up to your site, they'll receive an email confirmation with a link to click. The link acts as an automatic sign-in, so subscribers will be automatically signed-in to your site when they click on it. There are a couple of interesting angles to this:\"]]],[1,\"p\",[[0,[],0,\"Because subscribers are automatically able to sign in and out of your site as registered members: You can (optionally) restrict access to posts and pages depending on whether people are signed-in or not. So if you want to publish some posts for free, but keep some really great stuff for members-only, this can be a great draw to encourage people to sign up!\"]]],[1,\"p\",[[0,[],0,\"Ghost members sign in using email authentication links, so there are no passwords for people to set or forget. You can turn any list of email subscribers into a database of registered members who can sign in to your site. Like magic.\"]]],[1,\"p\",[[0,[],0,\"Portal makes all of this possible, and it appears by default as a floating button in the bottom-right corner of your site. When people are logged out, clicking it will open a sign-up/sign-in window. When members are logged in, clicking the Portal button will open the account menu where they can edit their name, email, and subscription settings.\"]]],[1,\"p\",[[0,[],0,\"The floating Portal button is completely optional. If you prefer, you can add manual links to your content, navigation, or theme to trigger it instead.\"]]],[1,\"p\",[[0,[],0,\"Like this! \"],[0,[1],1,\"Sign up here\"]]],[10,1],[1,\"p\",[[0,[],0,\"As you start to grow your registered audience, you'll be able to get a sense of who you're publishing \"],[0,[0],1,\"for\"],[0,[],0,\" and where those people are coming \"],[0,[0],1,\"from\"],[0,[],0,\". Best of all: You'll have a straightforward, reliable way to connect with people who enjoy your work.\"]]],[1,\"p\",[[0,[],0,\"Social networks go in and out of fashion all the time. Email addresses are timeless.\"]]],[1,\"p\",[[0,[],0,\"Growing your audience is valuable no matter what type of site you run, but if your content \"],[0,[0],1,\"is\"],[0,[],0,\" your business, then you might also be interested in \"],[0,[2],1,\"setting up premium subscriptions\"],[0,[],0,\".\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>What sets Ghost apart from other products is that you can publish content and grow your audience using the same platform. Rather than just endlessly posting and hoping someone is listening, you can track real signups against your work and have them subscribe to be notified of future posts. The feature that makes all this possible is called <em>Portal</em>.</p><p>Portal is an embedded interface for your audience to sign up to your site. It works on every Ghost site, with every theme, and for any type of publisher. </p><p>You can customize the design, content and settings of Portal to suit your site, whether you just want people to sign up to your newsletter — or you're running a full premium publication with user sign-ins and private content.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://static.ghost.org/v4.0.0/images/portalsettings.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2924\" height=\"1810\"></figure><p>Once people sign up to your site, they'll receive an email confirmation with a link to click. The link acts as an automatic sign-in, so subscribers will be automatically signed-in to your site when they click on it. There are a couple of interesting angles to this:</p><p>Because subscribers are automatically able to sign in and out of your site as registered members: You can (optionally) restrict access to posts and pages depending on whether people are signed-in or not. So if you want to publish some posts for free, but keep some really great stuff for members-only, this can be a great draw to encourage people to sign up!</p><p>Ghost members sign in using email authentication links, so there are no passwords for people to set or forget. You can turn any list of email subscribers into a database of registered members who can sign in to your site. Like magic.</p><p>Portal makes all of this possible, and it appears by default as a floating button in the bottom-right corner of your site. When people are logged out, clicking it will open a sign-up/sign-in window. When members are logged in, clicking the Portal button will open the account menu where they can edit their name, email, and subscription settings.</p><p>The floating Portal button is completely optional. If you prefer, you can add manual links to your content, navigation, or theme to trigger it instead.</p><p>Like this! <a href=\"#/portal\">Sign up here</a></p><hr><p>As you start to grow your registered audience, you'll be able to get a sense of who you're publishing <em>for</em> and where those people are coming <em>from</em>. Best of all: You'll have a straightforward, reliable way to connect with people who enjoy your work.</p><p>Social networks go in and out of fashion all the time. Email addresses are timeless.</p><p>Growing your audience is valuable no matter what type of site you run, but if your content <em>is</em> your business, then you might also be interested in <a href=\"__GHOST_URL__/sell/\">setting up premium subscriptions</a>.</p>","comment_id":"615550ca0b5fbd002f24e839","plaintext":"What sets Ghost apart from other products is that you can publish content and\ngrow your audience using the same platform. Rather than just endlessly posting\nand hoping someone is listening, you can track real signups against your work\nand have them subscribe to be notified of future posts. The feature that makes\nall this possible is called Portal.\n\nPortal is an embedded interface for your audience to sign up to your site. It\nworks on every Ghost site, with every theme, and for any type of publisher. \n\nYou can customize the design, content and settings of Portal to suit your site,\nwhether you just want people to sign up to your newsletter — or you're running a\nfull premium publication with user sign-ins and private content.\n\nOnce people sign up to your site, they'll receive an email confirmation with a\nlink to click. The link acts as an automatic sign-in, so subscribers will be\nautomatically signed-in to your site when they click on it. There are a couple\nof interesting angles to this:\n\nBecause subscribers are automatically able to sign in and out of your site as\nregistered members: You can (optionally) restrict access to posts and pages\ndepending on whether people are signed-in or not. So if you want to publish some\nposts for free, but keep some really great stuff for members-only, this can be a\ngreat draw to encourage people to sign up!\n\nGhost members sign in using email authentication links, so there are no\npasswords for people to set or forget. You can turn any list of email\nsubscribers into a database of registered members who can sign in to your site.\nLike magic.\n\nPortal makes all of this possible, and it appears by default as a floating\nbutton in the bottom-right corner of your site. When people are logged out,\nclicking it will open a sign-up/sign-in window. When members are logged in,\nclicking the Portal button will open the account menu where they can edit their\nname, email, and subscription settings.\n\nThe floating Portal button is completely optional. If you prefer, you can add\nmanual links to your content, navigation, or theme to trigger it instead.\n\nLike this! Sign up here\n\n\n--------------------------------------------------------------------------------\n\nAs you start to grow your registered audience, you'll be able to get a sense of\nwho you're publishing for and where those people are coming from. Best of all:\nYou'll have a straightforward, reliable way to connect with people who enjoy\nyour work.\n\nSocial networks go in and out of fashion all the time. Email addresses are\ntimeless.\n\nGrowing your audience is valuable no matter what type of site you run, but if\nyour content is your business, then you might also be interested in setting up\npremium subscriptions [__GHOST_URL__/sell/].","feature_image":"https://static.ghost.org/v4.0.0/images/creating-a-custom-theme.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T05:53:14.000Z","published_at":"2021-09-30T05:53:17.000Z","custom_excerpt":"How Ghost allows you to turn anonymous readers into an audience of active subscribers, so you know what's working and what isn't.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615550ca0b5fbd002f24e83b","uuid":"df81287b-1867-4917-bd5e-adabd6185486","title":"Writing and managing content in Ghost, an advanced guide","slug":"write","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/editor.png\",\"width\":3182,\"height\":1500,\"cardWidth\":\"wide\",\"caption\":\"The Ghost editor. Also available in dark-mode, for late night writing sessions.\"}],[\"bookmark\",{\"type\":\"bookmark\",\"url\":\"https://opensubscriptionplatforms.com/\",\"metadata\":{\"url\":\"https://opensubscriptionplatforms.com\",\"title\":\"Open Subscription Platforms\",\"description\":\"A shared movement for independent subscription data.\",\"author\":null,\"publisher\":\"Open Subscription Platforms\",\"thumbnail\":\"https://opensubscriptionplatforms.com/images/osp-card.png\",\"icon\":\"https://opensubscriptionplatforms.com/images/favicon.png\"}}],[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=hmH3XMlms8E\",\"html\":\"<iframe width=\\\"200\\\" height=\\\"113\\\" src=\\\"https://www.youtube.com/embed/hmH3XMlms8E?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\",\"type\":\"video\",\"metadata\":{\"title\":\"\\\"VELA\\\" Episode 1 of 4 | John John Florence\",\"author_name\":\"John John Florence\",\"author_url\":\"https://www.youtube.com/c/JJF\",\"height\":113,\"width\":200,\"version\":\"1.0\",\"provider_name\":\"YouTube\",\"provider_url\":\"https://www.youtube.com/\",\"thumbnail_height\":360,\"thumbnail_width\":480,\"thumbnail_url\":\"https://i.ytimg.com/vi/hmH3XMlms8E/hqdefault.jpg\"}}],[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/andreas-selter-xSMqGH7gi6o-unsplash.jpg\",\"width\":6000,\"height\":4000,\"cardWidth\":\"full\",\"caption\":\"\"}],[\"gallery\",{\"images\":[{\"fileName\":\"andreas-selter-e4yK8QQlZa0-unsplash.jpg\",\"row\":0,\"width\":4572,\"height\":3048,\"src\":\"https://static.ghost.org/v4.0.0/images/andreas-selter-e4yK8QQlZa0-unsplash.jpg\"},{\"fileName\":\"steve-carter-Ixp4YhCKZkI-unsplash.jpg\",\"row\":0,\"width\":4032,\"height\":2268,\"src\":\"https://static.ghost.org/v4.0.0/images/steve-carter-Ixp4YhCKZkI-unsplash.jpg\"}],\"caption\":\"\"}],[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/lukasz-szmigiel-jFCViYFYcus-unsplash.jpg\",\"width\":2560,\"height\":1705,\"cardWidth\":\"wide\"}],[\"gallery\",{\"images\":[{\"fileName\":\"jd-mason-hPiEFq6-Eto-unsplash.jpg\",\"row\":0,\"width\":5184,\"height\":3888,\"src\":\"https://static.ghost.org/v4.0.0/images/jd-mason-hPiEFq6-Eto-unsplash.jpg\"},{\"fileName\":\"jp-valery-OBpOP9GVH9U-unsplash.jpg\",\"row\":0,\"width\":5472,\"height\":3648,\"src\":\"https://static.ghost.org/v4.0.0/images/jp-valery-OBpOP9GVH9U-unsplash.jpg\"}],\"caption\":\"Peaceful places\"}],[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/createsnippet.png\",\"width\":2282,\"height\":1272,\"cardWidth\":\"wide\"}],[\"hr\",{}],[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/preview.png\",\"width\":3166,\"height\":2224,\"cardWidth\":\"wide\"}],[\"hr\",{}]],\"markups\":[[\"em\"],[\"code\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Ghost comes with a best-in-class editor which does its very best to get out of the way, and let you focus on your content. Don't let its minimal looks fool you, though, beneath the surface lies a powerful editing toolset designed to accommodate the extensive needs of modern creators.\"]]],[1,\"p\",[[0,[],0,\"For many, the base canvas of the Ghost editor will feel familiar. You can start writing as you would expect, highlight content to access the toolbar you would expect, and generally use all of the keyboard shortcuts you would expect.\"]]],[1,\"p\",[[0,[],0,\"Our main focus in building the Ghost editor is to try and make as many things that you hope/expect might work: actually work. \"]]],[3,\"ul\",[[[0,[],0,\"You can copy and paste raw content from web pages, and Ghost will do its best to correctly preserve the formatting. \"]],[[0,[],0,\"Pasting an image from your clipboard will upload inline.\"]],[[0,[],0,\"Pasting a social media URL will automatically create an embed.\"]],[[0,[],0,\"Highlight a word in the editor and paste a URL from your clipboard on top: Ghost will turn it into a link.\"]],[[0,[],0,\"You can also paste (or write!) Markdown and Ghost will usually be able to auto-convert it into fully editable, formatted content.\"]]]],[10,0],[1,\"p\",[[0,[],0,\"The goal, as much as possible, is for things to work so that you don't have to \"],[0,[0],1,\"think\"],[0,[],0,\" so much about the editor. You won't find any disastrous \\\"block builders\\\" here, where you have to open 6 submenus and choose from 18 different but identical alignment options. That's not what Ghost is about.\"]]],[1,\"p\",[[0,[],0,\"What you will find though, is dynamic cards which allow you to embed rich media into your posts and create beautifully laid out stories.\"]]],[1,\"h2\",[[0,[],0,\"Using cards\"]]],[1,\"p\",[[0,[],0,\"You can insert dynamic cards inside post content using the \"],[0,[1],1,\"+\"],[0,[],0,\" button, which appears on new lines, or by typing \"],[0,[1],1,\"/\"],[0,[],0,\" on a new line to trigger the card menu. Many of the choices are simple and intuitive, like bookmark cards, which allow you to create rich links with embedded structured data:\"]]],[10,1],[1,\"p\",[[0,[],0,\"or embed cards which make it easy to insert content you want to share with your audience, from external services:\"]]],[10,2],[1,\"p\",[[0,[],0,\"But, dig a little deeper, and you'll also find more advanced cards, like one that only shows up in email newsletters (great for personalized introductions) and a comprehensive set of specialized cards for different types of images and galleries.\"]]],[1,\"blockquote\",[[0,[],0,\"Once you  start mixing text and image cards creatively, the whole narrative of the story changes. Suddenly, you're working in a new format.\"]]],[10,3],[1,\"p\",[[0,[],0,\"As it turns out, sometimes pictures and a thousand words go together really well. Telling people a great story often has much more impact if they can feel, even for a moment, as though they were right there with you.\"]]],[10,4],[10,5],[10,6],[1,\"p\",[[0,[],0,\"Galleries and image cards can be combined in so many different ways — the only limit is your imagination.\"]]],[1,\"h2\",[[0,[],0,\"Build workflows with snippets\"]]],[1,\"p\",[[0,[],0,\"One of the most powerful features of the Ghost editor is the ability to create and re-use content snippets. If you've ever used an email client with a concept of \"],[0,[0],1,\"saved replies\"],[0,[],0,\" then this will be immediately intuitive.\"]]],[1,\"p\",[[0,[],0,\"To create a snippet, select a piece of content in the editor that you'd like to re-use in future, then click on the snippet icon in the toolbar. Give your snippet a name, and you're all done. Now your snippet will be available from within the card menu, or you can search for it directly using the \"],[0,[1],1,\"/\"],[0,[],0,\" command.\"]]],[1,\"p\",[[0,[],0,\"This works really well for saving images you might want to use often, like a company logo or team photo, links to resources you find yourself often linking to, or introductions and passages that you want to remember.\"]]],[10,7],[1,\"p\",[[0,[],0,\"You can even build entire post templates or outlines to create a quick, re-usable workflow for publishing over time. Or build custom design elements for your post with an HTML card, and use a snippet to insert it.\"]]],[1,\"p\",[[0,[],0,\"Once you get a few useful snippets set up, it's difficult to go back to the old way of diving through media libraries and trawling for that one thing you know you used somewhere that one time.\"]]],[10,8],[1,\"h2\",[[0,[],0,\"Publishing and newsletters the easy way\"]]],[1,\"p\",[[0,[],0,\"When you're ready to publish, Ghost makes it as simple as possible to deliver your new post to all your existing members. Just hit the \"],[0,[0],1,\"Preview\"],[0,[],0,\" link and you'll get a chance to see what your content looks like on Web, Mobile, Email and Social.\"]]],[10,9],[1,\"p\",[[0,[],0,\"You can send yourself a test newsletter to make sure everything looks good in your email client, and then hit the \"],[0,[0],1,\"Publish\"],[0,[],0,\" button to decide who to deliver it to.\"]]],[1,\"p\",[[0,[],0,\"Ghost comes with a streamlined, optimized email newsletter template that has settings built-in for you to customize the colors and typography. We've spent countless hours refining the template to make sure it works great across all email clients, and performs well for email deliverability.\"]]],[1,\"p\",[[0,[],0,\"So, you don't need to fight the awful process of building a custom email template from scratch. It's all done already!\"]]],[10,10],[1,\"p\",[[0,[],0,\"The Ghost editor is powerful enough to do whatever you want it to do. With a little exploration, you'll be up and running in no time.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Ghost comes with a best-in-class editor which does its very best to get out of the way, and let you focus on your content. Don't let its minimal looks fool you, though, beneath the surface lies a powerful editing toolset designed to accommodate the extensive needs of modern creators.</p><p>For many, the base canvas of the Ghost editor will feel familiar. You can start writing as you would expect, highlight content to access the toolbar you would expect, and generally use all of the keyboard shortcuts you would expect.</p><p>Our main focus in building the Ghost editor is to try and make as many things that you hope/expect might work: actually work. </p><ul><li>You can copy and paste raw content from web pages, and Ghost will do its best to correctly preserve the formatting. </li><li>Pasting an image from your clipboard will upload inline.</li><li>Pasting a social media URL will automatically create an embed.</li><li>Highlight a word in the editor and paste a URL from your clipboard on top: Ghost will turn it into a link.</li><li>You can also paste (or write!) Markdown and Ghost will usually be able to auto-convert it into fully editable, formatted content.</li></ul><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://static.ghost.org/v4.0.0/images/editor.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"3182\" height=\"1500\"><figcaption>The Ghost editor. Also available in dark-mode, for late night writing sessions.</figcaption></figure><p>The goal, as much as possible, is for things to work so that you don't have to <em>think</em> so much about the editor. You won't find any disastrous \"block builders\" here, where you have to open 6 submenus and choose from 18 different but identical alignment options. That's not what Ghost is about.</p><p>What you will find though, is dynamic cards which allow you to embed rich media into your posts and create beautifully laid out stories.</p><h2 id=\"using-cards\">Using cards</h2><p>You can insert dynamic cards inside post content using the <code>+</code> button, which appears on new lines, or by typing <code>/</code> on a new line to trigger the card menu. Many of the choices are simple and intuitive, like bookmark cards, which allow you to create rich links with embedded structured data:</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://opensubscriptionplatforms.com/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Open Subscription Platforms</div><div class=\"kg-bookmark-description\">A shared movement for independent subscription data.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://opensubscriptionplatforms.com/images/favicon.png\" alt=\"\"><span class=\"kg-bookmark-author\">Open Subscription Platforms</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://opensubscriptionplatforms.com/images/osp-card.png\" alt=\"\"></div></a></figure><p>or embed cards which make it easy to insert content you want to share with your audience, from external services:</p><figure class=\"kg-card kg-embed-card\"><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/hmH3XMlms8E?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><p>But, dig a little deeper, and you'll also find more advanced cards, like one that only shows up in email newsletters (great for personalized introductions) and a comprehensive set of specialized cards for different types of images and galleries.</p><blockquote>Once you  start mixing text and image cards creatively, the whole narrative of the story changes. Suddenly, you're working in a new format.</blockquote><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://static.ghost.org/v4.0.0/images/andreas-selter-xSMqGH7gi6o-unsplash.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"6000\" height=\"4000\"></figure><p>As it turns out, sometimes pictures and a thousand words go together really well. Telling people a great story often has much more impact if they can feel, even for a moment, as though they were right there with you.</p><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://static.ghost.org/v4.0.0/images/andreas-selter-e4yK8QQlZa0-unsplash.jpg\" width=\"4572\" height=\"3048\" loading=\"lazy\" alt></div><div class=\"kg-gallery-image\"><img src=\"https://static.ghost.org/v4.0.0/images/steve-carter-Ixp4YhCKZkI-unsplash.jpg\" width=\"4032\" height=\"2268\" loading=\"lazy\" alt></div></div></div></figure><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://static.ghost.org/v4.0.0/images/lukasz-szmigiel-jFCViYFYcus-unsplash.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"2560\" height=\"1705\"></figure><figure class=\"kg-card kg-gallery-card kg-width-wide kg-card-hascaption\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://static.ghost.org/v4.0.0/images/jd-mason-hPiEFq6-Eto-unsplash.jpg\" width=\"5184\" height=\"3888\" loading=\"lazy\" alt></div><div class=\"kg-gallery-image\"><img src=\"https://static.ghost.org/v4.0.0/images/jp-valery-OBpOP9GVH9U-unsplash.jpg\" width=\"5472\" height=\"3648\" loading=\"lazy\" alt></div></div></div><figcaption>Peaceful places</figcaption></figure><p>Galleries and image cards can be combined in so many different ways — the only limit is your imagination.</p><h2 id=\"build-workflows-with-snippets\">Build workflows with snippets</h2><p>One of the most powerful features of the Ghost editor is the ability to create and re-use content snippets. If you've ever used an email client with a concept of <em>saved replies</em> then this will be immediately intuitive.</p><p>To create a snippet, select a piece of content in the editor that you'd like to re-use in future, then click on the snippet icon in the toolbar. Give your snippet a name, and you're all done. Now your snippet will be available from within the card menu, or you can search for it directly using the <code>/</code> command.</p><p>This works really well for saving images you might want to use often, like a company logo or team photo, links to resources you find yourself often linking to, or introductions and passages that you want to remember.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://static.ghost.org/v4.0.0/images/createsnippet.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2282\" height=\"1272\"></figure><p>You can even build entire post templates or outlines to create a quick, re-usable workflow for publishing over time. Or build custom design elements for your post with an HTML card, and use a snippet to insert it.</p><p>Once you get a few useful snippets set up, it's difficult to go back to the old way of diving through media libraries and trawling for that one thing you know you used somewhere that one time.</p><hr><h2 id=\"publishing-and-newsletters-the-easy-way\">Publishing and newsletters the easy way</h2><p>When you're ready to publish, Ghost makes it as simple as possible to deliver your new post to all your existing members. Just hit the <em>Preview</em> link and you'll get a chance to see what your content looks like on Web, Mobile, Email and Social.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"https://static.ghost.org/v4.0.0/images/preview.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"3166\" height=\"2224\"></figure><p>You can send yourself a test newsletter to make sure everything looks good in your email client, and then hit the <em>Publish</em> button to decide who to deliver it to.</p><p>Ghost comes with a streamlined, optimized email newsletter template that has settings built-in for you to customize the colors and typography. We've spent countless hours refining the template to make sure it works great across all email clients, and performs well for email deliverability.</p><p>So, you don't need to fight the awful process of building a custom email template from scratch. It's all done already!</p><hr><p>The Ghost editor is powerful enough to do whatever you want it to do. With a little exploration, you'll be up and running in no time.</p>","comment_id":"615550ca0b5fbd002f24e83b","plaintext":"Ghost comes with a best-in-class editor which does its very best to get out of\nthe way, and let you focus on your content. Don't let its minimal looks fool\nyou, though, beneath the surface lies a powerful editing toolset designed to\naccommodate the extensive needs of modern creators.\n\nFor many, the base canvas of the Ghost editor will feel familiar. You can start\nwriting as you would expect, highlight content to access the toolbar you would\nexpect, and generally use all of the keyboard shortcuts you would expect.\n\nOur main focus in building the Ghost editor is to try and make as many things\nthat you hope/expect might work: actually work. \n\n * You can copy and paste raw content from web pages, and Ghost will do its best\n   to correctly preserve the formatting. \n * Pasting an image from your clipboard will upload inline.\n * Pasting a social media URL will automatically create an embed.\n * Highlight a word in the editor and paste a URL from your clipboard on top:\n   Ghost will turn it into a link.\n * You can also paste (or write!) Markdown and Ghost will usually be able to\n   auto-convert it into fully editable, formatted content.\n\nThe Ghost editor. Also available in dark-mode, for late night writing sessions.\nThe goal, as much as possible, is for things to work so that you don't have to \nthink so much about the editor. You won't find any disastrous \"block builders\"\nhere, where you have to open 6 submenus and choose from 18 different but\nidentical alignment options. That's not what Ghost is about.\n\nWhat you will find though, is dynamic cards which allow you to embed rich media\ninto your posts and create beautifully laid out stories.\n\nUsing cards\nYou can insert dynamic cards inside post content using the + button, which\nappears on new lines, or by typing / on a new line to trigger the card menu.\nMany of the choices are simple and intuitive, like bookmark cards, which allow\nyou to create rich links with embedded structured data:\n\nOpen Subscription PlatformsA shared movement for independent subscription data.\nOpen Subscription Platforms [https://opensubscriptionplatforms.com/]or embed\ncards which make it easy to insert content you want to share with your audience,\nfrom external services:\n\nBut, dig a little deeper, and you'll also find more advanced cards, like one\nthat only shows up in email newsletters (great for personalized introductions)\nand a comprehensive set of specialized cards for different types of images and\ngalleries.\n\n> Once you  start mixing text and image cards creatively, the whole narrative of\nthe story changes. Suddenly, you're working in a new format.\nAs it turns out, sometimes pictures and a thousand words go together really\nwell. Telling people a great story often has much more impact if they can feel,\neven for a moment, as though they were right there with you.\n\nPeaceful placesGalleries and image cards can be combined in so many different\nways — the only limit is your imagination.\n\nBuild workflows with snippets\nOne of the most powerful features of the Ghost editor is the ability to create\nand re-use content snippets. If you've ever used an email client with a concept\nof saved replies then this will be immediately intuitive.\n\nTo create a snippet, select a piece of content in the editor that you'd like to\nre-use in future, then click on the snippet icon in the toolbar. Give your\nsnippet a name, and you're all done. Now your snippet will be available from\nwithin the card menu, or you can search for it directly using the / command.\n\nThis works really well for saving images you might want to use often, like a\ncompany logo or team photo, links to resources you find yourself often linking\nto, or introductions and passages that you want to remember.\n\nYou can even build entire post templates or outlines to create a quick,\nre-usable workflow for publishing over time. Or build custom design elements for\nyour post with an HTML card, and use a snippet to insert it.\n\nOnce you get a few useful snippets set up, it's difficult to go back to the old\nway of diving through media libraries and trawling for that one thing you know\nyou used somewhere that one time.\n\n\n--------------------------------------------------------------------------------\n\nPublishing and newsletters the easy way\nWhen you're ready to publish, Ghost makes it as simple as possible to deliver\nyour new post to all your existing members. Just hit the Preview link and you'll\nget a chance to see what your content looks like on Web, Mobile, Email and\nSocial.\n\nYou can send yourself a test newsletter to make sure everything looks good in\nyour email client, and then hit the Publish button to decide who to deliver it\nto.\n\nGhost comes with a streamlined, optimized email newsletter template that has\nsettings built-in for you to customize the colors and typography. We've spent\ncountless hours refining the template to make sure it works great across all\nemail clients, and performs well for email deliverability.\n\nSo, you don't need to fight the awful process of building a custom email\ntemplate from scratch. It's all done already!\n\n\n--------------------------------------------------------------------------------\n\nThe Ghost editor is powerful enough to do whatever you want it to do. With a\nlittle exploration, you'll be up and running in no time.","feature_image":"https://static.ghost.org/v4.0.0/images/writing-posts-with-ghost.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T05:53:14.000Z","published_at":"2021-09-30T05:53:18.000Z","custom_excerpt":"A full overview of all the features built into the Ghost editor, including powerful workflow automations to speed up your creative process.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615550ca0b5fbd002f24e83d","uuid":"a4428aac-3816-4568-89e8-ae39be0e2771","title":"Customizing your brand and design settings","slug":"design","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/brandsettings.png\",\"width\":3456,\"height\":2338,\"cardWidth\":\"wide\",\"caption\":\"Ghost Admin → Settings → Branding\"}],[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/themesettings.png\",\"width\":3208,\"height\":1618,\"cardWidth\":\"wide\",\"caption\":\"Ghost Admin → Settings → Theme\"}],[\"code\",{\"code\":\"{{#post}}\\n<article class=\\\"article {{post_class}}\\\">\\n\\n    <h1>{{title}}</h1>\\n    \\n    {{#if feature_image}}\\n    \\t<img src=\\\"{{feature_image}}\\\" alt=\\\"Feature image\\\" />\\n    {{/if}}\\n    \\n    {{content}}\\n\\n</article>\\n{{/post}}\",\"language\":\"handlebars\",\"caption\":\"A snippet from a post template\"}]],\"markups\":[[\"a\",[\"href\",\"__GHOST_URL__/welcome/\"]],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://ghost.org/themes/\"]],[\"a\",[\"href\",\"https://github.com/tryghost/casper/\"]],[\"a\",[\"href\",\"https://ghost.org/docs/themes/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"As discussed in the \"],[0,[0],1,\"introduction\"],[0,[],0,\" post, one of the best things about Ghost is just how much you can customize to turn your site into something unique. Everything about your layout and design can be changed, so you're not stuck with yet another clone of a social network profile.\"]]],[1,\"p\",[[0,[],0,\"How far you want to go with customization is completely up to you, there's no right or wrong approach! The majority of people use one of Ghost's built-in themes to get started, and then progress to something more bespoke later on as their site grows. \"]]],[1,\"p\",[[0,[],0,\"The best way to get started is with Ghost's branding settings, where you can set up colors, images and logos to fit with your brand.\"]]],[10,0],[1,\"p\",[[0,[],0,\"Any Ghost theme that's up to date and compatible with Ghost 4.0 and higher will reflect your branding settings in the preview window, so you can see what your site will look like as you experiment with different options.\"]]],[1,\"p\",[[0,[],0,\"When selecting an accent color, try to choose something which will contrast well with white text. Many themes will use your accent color as the background for buttons, headers and navigational elements. Vibrant colors with a darker hue tend to work best, as a general rule.\"]]],[1,\"h2\",[[0,[],0,\"Installing Ghost themes\"]]],[1,\"p\",[[0,[],0,\"By default, new sites are created with Ghost's friendly publication theme, called Casper. Everything in Casper is optimized to work for the most common types of blog, newsletter and publication that people create with Ghost — so it's a perfect place to start.\"]]],[1,\"p\",[[0,[],0,\"However, there are hundreds of different themes available to install, so you can pick out a look and feel that suits you best.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Inside Ghost's theme settings you'll find 4 more official themes that can be directly installed and activated. Each theme is suited to slightly different use-cases.\"]]],[3,\"ul\",[[[0,[1],1,\"Casper\"],[0,[],0,\" \"],[0,[2],1,\"(default)\"],[0,[],0,\" — Made for all sorts of blogs and newsletters\"]],[[0,[1],1,\"Edition\"],[0,[],0,\" — A beautiful minimal template for newsletter authors\"]],[[0,[1],1,\"Alto\"],[0,[],0,\" — A slick news/magazine style design for creators\"]],[[0,[1],1,\"London\"],[0,[],0,\" — A light photography theme with a bold grid\"]],[[0,[1],1,\"Ease\"],[0,[],0,\" — A library theme for organizing large content archives\"]]]],[1,\"p\",[[0,[],0,\"And if none of those feel quite right, head on over to the \"],[0,[3],1,\"Ghost Marketplace\"],[0,[],0,\", where you'll find a huge variety of both free and premium themes.\"]]],[1,\"h2\",[[0,[],0,\"Building something custom\"]]],[1,\"p\",[[0,[],0,\"Finally, if you want something completely bespoke for your site, you can always build a custom theme from scratch and upload it to your site.\"]]],[1,\"p\",[[0,[],0,\"Ghost's theming template files are very easy to work with, and can be picked up in the space of a few hours by anyone who has just a little bit of knowledge of HTML and CSS. Templates from other platforms can also be ported to Ghost with relatively little effort.\"]]],[1,\"p\",[[0,[],0,\"If you want to take a quick look at the theme syntax to see what it's like, you can \"],[0,[4],1,\"browse through the files of the default Casper theme\"],[0,[],0,\". We've added tons of inline code comments to make it easy to learn, and the structure is very readable.\"]]],[10,2],[1,\"p\",[[0,[],0,\"See? Not that scary! But still completely optional. \"]]],[1,\"p\",[[0,[],0,\"If you're interested in creating your own Ghost theme, check out our extensive \"],[0,[5],1,\"theme documentation\"],[0,[],0,\" for a full guide to all the different template variables and helpers which are available.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>As discussed in the <a href=\"__GHOST_URL__/welcome/\">introduction</a> post, one of the best things about Ghost is just how much you can customize to turn your site into something unique. Everything about your layout and design can be changed, so you're not stuck with yet another clone of a social network profile.</p><p>How far you want to go with customization is completely up to you, there's no right or wrong approach! The majority of people use one of Ghost's built-in themes to get started, and then progress to something more bespoke later on as their site grows. </p><p>The best way to get started is with Ghost's branding settings, where you can set up colors, images and logos to fit with your brand.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://static.ghost.org/v4.0.0/images/brandsettings.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"3456\" height=\"2338\"><figcaption>Ghost Admin → Settings → Branding</figcaption></figure><p>Any Ghost theme that's up to date and compatible with Ghost 4.0 and higher will reflect your branding settings in the preview window, so you can see what your site will look like as you experiment with different options.</p><p>When selecting an accent color, try to choose something which will contrast well with white text. Many themes will use your accent color as the background for buttons, headers and navigational elements. Vibrant colors with a darker hue tend to work best, as a general rule.</p><h2 id=\"installing-ghost-themes\">Installing Ghost themes</h2><p>By default, new sites are created with Ghost's friendly publication theme, called Casper. Everything in Casper is optimized to work for the most common types of blog, newsletter and publication that people create with Ghost — so it's a perfect place to start.</p><p>However, there are hundreds of different themes available to install, so you can pick out a look and feel that suits you best.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://static.ghost.org/v4.0.0/images/themesettings.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"3208\" height=\"1618\"><figcaption>Ghost Admin → Settings → Theme</figcaption></figure><p>Inside Ghost's theme settings you'll find 4 more official themes that can be directly installed and activated. Each theme is suited to slightly different use-cases.</p><ul><li><strong>Casper</strong> <em>(default)</em> — Made for all sorts of blogs and newsletters</li><li><strong>Edition</strong> — A beautiful minimal template for newsletter authors</li><li><strong>Alto</strong> — A slick news/magazine style design for creators</li><li><strong>London</strong> — A light photography theme with a bold grid</li><li><strong>Ease</strong> — A library theme for organizing large content archives</li></ul><p>And if none of those feel quite right, head on over to the <a href=\"https://ghost.org/themes/\">Ghost Marketplace</a>, where you'll find a huge variety of both free and premium themes.</p><h2 id=\"building-something-custom\">Building something custom</h2><p>Finally, if you want something completely bespoke for your site, you can always build a custom theme from scratch and upload it to your site.</p><p>Ghost's theming template files are very easy to work with, and can be picked up in the space of a few hours by anyone who has just a little bit of knowledge of HTML and CSS. Templates from other platforms can also be ported to Ghost with relatively little effort.</p><p>If you want to take a quick look at the theme syntax to see what it's like, you can <a href=\"https://github.com/tryghost/casper/\">browse through the files of the default Casper theme</a>. We've added tons of inline code comments to make it easy to learn, and the structure is very readable.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-handlebars\">{{#post}}\n&lt;article class=\"article {{post_class}}\"&gt;\n\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    \n    {{#if feature_image}}\n    \t&lt;img src=\"{{feature_image}}\" alt=\"Feature image\" /&gt;\n    {{/if}}\n    \n    {{content}}\n\n&lt;/article&gt;\n{{/post}}</code></pre><figcaption>A snippet from a post template</figcaption></figure><p>See? Not that scary! But still completely optional. </p><p>If you're interested in creating your own Ghost theme, check out our extensive <a href=\"https://ghost.org/docs/themes/\">theme documentation</a> for a full guide to all the different template variables and helpers which are available.</p>","comment_id":"615550ca0b5fbd002f24e83d","plaintext":"As discussed in the introduction [__GHOST_URL__/welcome/] post, one of the best\nthings about Ghost is just how much you can customize to turn your site into\nsomething unique. Everything about your layout and design can be changed, so\nyou're not stuck with yet another clone of a social network profile.\n\nHow far you want to go with customization is completely up to you, there's no\nright or wrong approach! The majority of people use one of Ghost's built-in\nthemes to get started, and then progress to something more bespoke later on as\ntheir site grows. \n\nThe best way to get started is with Ghost's branding settings, where you can set\nup colors, images and logos to fit with your brand.\n\nGhost Admin → Settings → BrandingAny Ghost theme that's up to date and\ncompatible with Ghost 4.0 and higher will reflect your branding settings in the\npreview window, so you can see what your site will look like as you experiment\nwith different options.\n\nWhen selecting an accent color, try to choose something which will contrast well\nwith white text. Many themes will use your accent color as the background for\nbuttons, headers and navigational elements. Vibrant colors with a darker hue\ntend to work best, as a general rule.\n\nInstalling Ghost themes\nBy default, new sites are created with Ghost's friendly publication theme,\ncalled Casper. Everything in Casper is optimized to work for the most common\ntypes of blog, newsletter and publication that people create with Ghost — so\nit's a perfect place to start.\n\nHowever, there are hundreds of different themes available to install, so you can\npick out a look and feel that suits you best.\n\nGhost Admin → Settings → ThemeInside Ghost's theme settings you'll find 4 more\nofficial themes that can be directly installed and activated. Each theme is\nsuited to slightly different use-cases.\n\n * Casper (default) — Made for all sorts of blogs and newsletters\n * Edition — A beautiful minimal template for newsletter authors\n * Alto — A slick news/magazine style design for creators\n * London — A light photography theme with a bold grid\n * Ease — A library theme for organizing large content archives\n\nAnd if none of those feel quite right, head on over to the Ghost Marketplace\n[https://ghost.org/themes/], where you'll find a huge variety of both free and\npremium themes.\n\nBuilding something custom\nFinally, if you want something completely bespoke for your site, you can always\nbuild a custom theme from scratch and upload it to your site.\n\nGhost's theming template files are very easy to work with, and can be picked up\nin the space of a few hours by anyone who has just a little bit of knowledge of\nHTML and CSS. Templates from other platforms can also be ported to Ghost with\nrelatively little effort.\n\nIf you want to take a quick look at the theme syntax to see what it's like, you\ncan browse through the files of the default Casper theme\n[https://github.com/tryghost/casper/]. We've added tons of inline code comments\nto make it easy to learn, and the structure is very readable.\n\n{{#post}}\n<article class=\"article {{post_class}}\">\n\n    <h1>{{title}}</h1>\n    \n    {{#if feature_image}}\n    \t<img src=\"{{feature_image}}\" alt=\"Feature image\" />\n    {{/if}}\n    \n    {{content}}\n\n</article>\n{{/post}}\n\nA snippet from a post templateSee? Not that scary! But still completely\noptional. \n\nIf you're interested in creating your own Ghost theme, check out our extensive \ntheme documentation [https://ghost.org/docs/themes/] for a full guide to all the\ndifferent template variables and helpers which are available.","feature_image":"https://static.ghost.org/v4.0.0/images/publishing-options.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T05:53:14.000Z","published_at":"2021-09-30T05:53:19.000Z","custom_excerpt":"How to tweak a few settings in Ghost to transform your site from a generic template to a custom brand with style and personality.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615550ca0b5fbd002f24e83f","uuid":"6d338337-f648-4e73-897a-84c249ca562a","title":"Start here for a quick overview of everything you need to know","slug":"welcome","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"strong\"],[\"a\",[\"href\",\"__GHOST_URL__/design/\"]],[\"a\",[\"href\",\"__GHOST_URL__/write/\"]],[\"a\",[\"href\",\"__GHOST_URL__/portal/\"]],[\"a\",[\"href\",\"__GHOST_URL__/sell/\"]],[\"a\",[\"href\",\"__GHOST_URL__/grow/\"]],[\"a\",[\"href\",\"__GHOST_URL__/integrations/\"]],[\"a\",[\"href\",\"https://ghost.org/blog/\"]],[\"a\",[\"href\",\"https://ghost.org/pricing/\"]],[\"em\"],[\"a\",[\"href\",\"https://forum.ghost.org\"]]],\"sections\":[[1,\"p\",[[0,[0],1,\"Hey there\"],[0,[],0,\", welcome to your new home on the web! \"]]],[1,\"p\",[[0,[],0,\"Unlike social networks, this one is all yours. Publish your work on a custom domain, invite your audience to subscribe, send them new content by email newsletter, and offer premium subscriptions to generate sustainable recurring revenue to fund your work. \"]]],[1,\"p\",[[0,[],0,\"Ghost is an independent, open source app, which means you can customize absolutely everything. Inside the admin area, you'll find straightforward controls for changing themes, colors, navigation, logos and settings — so you can set your site up just how you like it. No technical knowledge required.\"]]],[1,\"p\",[[0,[],0,\"If you're feeling a little more adventurous, there's really no limit to what's possible. With just a little bit of HTML and CSS you can modify or build your very own theme from scratch, or connect to Zapier to explore advanced integrations. Advanced developers can go even further and build entirely custom workflows using the Ghost API.\"]]],[1,\"p\",[[0,[],0,\"This level of customization means that Ghost grows with you. It's easy to get started, but there's always another level of what's possible. So, you won't find yourself outgrowing the app in a few months time and wishing you'd chosen something more powerful!\"]]],[10,0],[1,\"p\",[[0,[],0,\"For now, you're probably just wondering what to do first. To help get you going as quickly as possible, we've populated your site with starter content (like this post!) covering all the key concepts and features of the product.\"]]],[1,\"p\",[[0,[],0,\"You'll find an outline of all the different topics below, with links to each section so you can explore the parts that interest you most.\"]]],[1,\"p\",[[0,[],0,\"Once you're ready to begin publishing and want to clear out these starter posts, you can delete the \\\"Ghost\\\" staff user. Deleting an author will automatically remove all of their posts, leaving you with a clean blank canvas.\"]]],[1,\"h2\",[[0,[],0,\"Your guide to Ghost\"]]],[3,\"ul\",[[[0,[1],1,\"Customizing your brand and site settings\"]],[[0,[2],1,\"Writing & managing content, an advanced guide for creators\"]],[[0,[3],1,\"Building your audience with subscriber signups\"]],[[0,[4],1,\"Selling premium memberships with recurring revenue\"]],[[0,[5],1,\"How to grow your business around an audience\"]],[[0,[6],1,\"Setting up custom integrations and apps\"]]]],[1,\"p\",[[0,[],0,\"If you get through all those and you're hungry for more, you can find an extensive library of content for creators over on \"],[0,[7],1,\"the Ghost blog\"],[0,[],0,\".\"]]],[10,1],[1,\"h2\",[[0,[],0,\"Getting help\"]]],[1,\"p\",[[0,[],0,\"If you need help, \"],[0,[8],1,\"Ghost(Pro)\"],[0,[],0,\" customers can always reach our full-time support team by clicking on the \"],[0,[9],1,\"Ghost(Pro)\"],[0,[],0,\" link inside their admin panel.\"]]],[1,\"p\",[[0,[],0,\"If you're a developer working with the codebase in a self-managed install, check out our \"],[0,[10],1,\"developer community forum\"],[0,[],0,\" to chat with other users.\"]]],[1,\"p\",[[0,[],0,\"Have fun!\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p><strong>Hey there</strong>, welcome to your new home on the web! </p><p>Unlike social networks, this one is all yours. Publish your work on a custom domain, invite your audience to subscribe, send them new content by email newsletter, and offer premium subscriptions to generate sustainable recurring revenue to fund your work. </p><p>Ghost is an independent, open source app, which means you can customize absolutely everything. Inside the admin area, you'll find straightforward controls for changing themes, colors, navigation, logos and settings — so you can set your site up just how you like it. No technical knowledge required.</p><p>If you're feeling a little more adventurous, there's really no limit to what's possible. With just a little bit of HTML and CSS you can modify or build your very own theme from scratch, or connect to Zapier to explore advanced integrations. Advanced developers can go even further and build entirely custom workflows using the Ghost API.</p><p>This level of customization means that Ghost grows with you. It's easy to get started, but there's always another level of what's possible. So, you won't find yourself outgrowing the app in a few months time and wishing you'd chosen something more powerful!</p><hr><p>For now, you're probably just wondering what to do first. To help get you going as quickly as possible, we've populated your site with starter content (like this post!) covering all the key concepts and features of the product.</p><p>You'll find an outline of all the different topics below, with links to each section so you can explore the parts that interest you most.</p><p>Once you're ready to begin publishing and want to clear out these starter posts, you can delete the \"Ghost\" staff user. Deleting an author will automatically remove all of their posts, leaving you with a clean blank canvas.</p><h2 id=\"your-guide-to-ghost\">Your guide to Ghost</h2><ul><li><a href=\"__GHOST_URL__/design/\">Customizing your brand and site settings</a></li><li><a href=\"__GHOST_URL__/write/\">Writing &amp; managing content, an advanced guide for creators</a></li><li><a href=\"__GHOST_URL__/portal/\">Building your audience with subscriber signups</a></li><li><a href=\"__GHOST_URL__/sell/\">Selling premium memberships with recurring revenue</a></li><li><a href=\"__GHOST_URL__/grow/\">How to grow your business around an audience</a></li><li><a href=\"__GHOST_URL__/integrations/\">Setting up custom integrations and apps</a></li></ul><p>If you get through all those and you're hungry for more, you can find an extensive library of content for creators over on <a href=\"https://ghost.org/blog/\">the Ghost blog</a>.</p><hr><h2 id=\"getting-help\">Getting help</h2><p>If you need help, <a href=\"https://ghost.org/pricing/\">Ghost(Pro)</a> customers can always reach our full-time support team by clicking on the <em>Ghost(Pro)</em> link inside their admin panel.</p><p>If you're a developer working with the codebase in a self-managed install, check out our <a href=\"https://forum.ghost.org\">developer community forum</a> to chat with other users.</p><p>Have fun!</p>","comment_id":"615550ca0b5fbd002f24e83f","plaintext":"Hey there, welcome to your new home on the web! \n\nUnlike social networks, this one is all yours. Publish your work on a custom\ndomain, invite your audience to subscribe, send them new content by email\nnewsletter, and offer premium subscriptions to generate sustainable recurring\nrevenue to fund your work. \n\nGhost is an independent, open source app, which means you can customize\nabsolutely everything. Inside the admin area, you'll find straightforward\ncontrols for changing themes, colors, navigation, logos and settings — so you\ncan set your site up just how you like it. No technical knowledge required.\n\nIf you're feeling a little more adventurous, there's really no limit to what's\npossible. With just a little bit of HTML and CSS you can modify or build your\nvery own theme from scratch, or connect to Zapier to explore advanced\nintegrations. Advanced developers can go even further and build entirely custom\nworkflows using the Ghost API.\n\nThis level of customization means that Ghost grows with you. It's easy to get\nstarted, but there's always another level of what's possible. So, you won't find\nyourself outgrowing the app in a few months time and wishing you'd chosen\nsomething more powerful!\n\n\n--------------------------------------------------------------------------------\n\nFor now, you're probably just wondering what to do first. To help get you going\nas quickly as possible, we've populated your site with starter content (like\nthis post!) covering all the key concepts and features of the product.\n\nYou'll find an outline of all the different topics below, with links to each\nsection so you can explore the parts that interest you most.\n\nOnce you're ready to begin publishing and want to clear out these starter posts,\nyou can delete the \"Ghost\" staff user. Deleting an author will automatically\nremove all of their posts, leaving you with a clean blank canvas.\n\nYour guide to Ghost\n * Customizing your brand and site settings [__GHOST_URL__/design/]\n * Writing & managing content, an advanced guide for creators\n   [__GHOST_URL__/write/]\n * Building your audience with subscriber signups [__GHOST_URL__/portal/]\n * Selling premium memberships with recurring revenue [__GHOST_URL__/sell/]\n * How to grow your business around an audience [__GHOST_URL__/grow/]\n * Setting up custom integrations and apps [__GHOST_URL__/integrations/]\n\nIf you get through all those and you're hungry for more, you can find an\nextensive library of content for creators over on the Ghost blog\n[https://ghost.org/blog/].\n\n\n--------------------------------------------------------------------------------\n\nGetting help\nIf you need help, Ghost(Pro) [https://ghost.org/pricing/] customers can always\nreach our full-time support team by clicking on the Ghost(Pro) link inside their\nadmin panel.\n\nIf you're a developer working with the codebase in a self-managed install, check\nout our developer community forum [https://forum.ghost.org] to chat with other\nusers.\n\nHave fun!","feature_image":"https://static.ghost.org/v4.0.0/images/welcome-to-ghost.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T05:53:14.000Z","published_at":"2021-09-30T05:53:20.000Z","custom_excerpt":"We've crammed the most important information to help you get started with Ghost into this one post. It's your cheat-sheet to get started, and your shortcut to advanced features.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615550ca0b5fbd002f24e841","uuid":"9c28052b-8e8d-49f0-8f1a-3bb980386e38","title":"Hi 👋, I'm Bryan","slug":"about","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"__GHOST_URL__/content/images/2021/09/image-1.png\",\"width\":300,\"height\":300,\"cardWidth\":\"wide\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/41fbd874c1ba0b69222440c1527ceb24831f388dcf4b875c048dbf0ce11fce58/68747470733a2f2f76696577732e77686174696c656172656e65642e746f6461792f76696577732f6769746875622f62676f6f6e7a2f76696577732e737667\",\"alt\":\"Profile views\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/3b010aaec4938434c93c158f7ad38fd70693fdc8c1ec39baeadbebab61458138/68747470733a2f2f6261646765732e6769747465722e696d2f62676f6f6e7a2f636f6d6d756e6974792e737667\",\"alt\":\"Gitter\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/c2a5c84d227b48f8b214bf813206875ac60e5f5a93ab8a22169e1b72e2764255/68747470733a2f2f6861636b6d642e696f2f354465596a326f585476474a312d587670314a6f32512f6261646765\",\"alt\":\"hackmd-github-sync-badge\",\"title\":\"\",\"cardWidth\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/c2e34390f77ac43483e3b319f52845547e27f20b2efe79455385c132962cf102/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f62676f6f6e7a2e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77266d61784167653d32353932303030\",\"alt\":\"GitHub followers\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/727b46e1d3fa1dc9460d1f7a8c4f4fb8a5523029a3389abf818bc1f95430b4ac/68747470733a2f2f726561646d652d6a6f6b65732e76657263656c2e6170702f617069\",\"alt\":\"\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/ede4d8e5abd93426806a9e7bd3467603135f5ac527225f8cc01891948b48dd53/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d2545322539442541345f506f7274666f6c696f2d6635383f7374796c653d666c61742d737175617265266c6f676f3d61266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f62672d706f7274666f6c696f2e6e65746c6966792e6170702f\",\"alt\":\"Portfolio\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/be39e4efa075ffc9dec9f08ffa5296ab259a2190ca575bbc58881c2c79fc3447/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d526573756d652d6630303f7374796c653d666c61742d737175617265266c6f676f3d61646f62652d6163726f6261742d726561646572266c6f676f436f6c6f723d7768697465\",\"alt\":\"Resume PDF\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/917b3c0fed1a17b7658bc96dcae513d12e4bbf98e492342c33eb7b5089a7527f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f627279616e2e67756e657240676d61696c2e636f6d2d6634623430303f7374796c653d666c61742d737175617265266c6f676f3d676d61696c266c6f676f436f6c6f723d626c61636b266c696e6b3d6d61696c746f3a627279616e2e67756e657240676d61696c2e636f6d\",\"alt\":\"Bryan's email\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/8e538703dad4c1dd05103d6a9aa6dfcecdd735439967d2501c172c1780bb3929/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d426c6f672d3231373539623f7374796c653d666c61742d737175617265266c6f676f3d576f72645072657373266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f7765622d6465762d6875622e636f6d2f\",\"alt\":\"Blog\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/bc53eadd154132f3d3cc16188c2c49c98d07c60a59ffed1e42caa3f133afff12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4c696e6b6564496e2d3030373762353f7374796c653d666c61742d737175617265266c6f676f3d4c696e6b6564696e266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f7777772e6c696e6b6564696e2e636f6d2f696e2f627279616e2d67756e65722d3034363139393132382f\",\"alt\":\"Linkedin\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/c64472a38fcb4e49cb16b8026a44d74e8d9c5b0003796a282564ab8a40143d68/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d416e67656c4c6973742d626c61636b3f7374796c653d666c61742d737175617265266c6f676f3d416e67656c4c697374266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f616e67656c2e636f2f752f627279616e2d67756e6572\",\"alt\":\"AngelList\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/32df1587a64824a89d979fe5b59a3e0bd166c44ced566dccf0d33ed62799157c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f62676f6f6e7a3f6c6162656c3d666f6c6c6f77267374796c653d736f6369616c\",\"alt\":\"GitHub bgoonz\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/ede4d8e5abd93426806a9e7bd3467603135f5ac527225f8cc01891948b48dd53/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d2545322539442541345f506f7274666f6c696f2d6635383f7374796c653d666c61742d737175617265266c6f676f3d61266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f62672d706f7274666f6c696f2e6e65746c6966792e6170702f\",\"alt\":\"Portfolio\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/be39e4efa075ffc9dec9f08ffa5296ab259a2190ca575bbc58881c2c79fc3447/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d526573756d652d6630303f7374796c653d666c61742d737175617265266c6f676f3d61646f62652d6163726f6261742d726561646572266c6f676f436f6c6f723d7768697465\",\"alt\":\"Resume PDF\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/917b3c0fed1a17b7658bc96dcae513d12e4bbf98e492342c33eb7b5089a7527f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f627279616e2e67756e657240676d61696c2e636f6d2d6634623430303f7374796c653d666c61742d737175617265266c6f676f3d676d61696c266c6f676f436f6c6f723d626c61636b266c696e6b3d6d61696c746f3a627279616e2e67756e657240676d61696c2e636f6d\",\"alt\":\"Bryan's email\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/8e538703dad4c1dd05103d6a9aa6dfcecdd735439967d2501c172c1780bb3929/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d426c6f672d3231373539623f7374796c653d666c61742d737175617265266c6f676f3d576f72645072657373266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f7765622d6465762d6875622e636f6d2f\",\"alt\":\"Blog\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/bc53eadd154132f3d3cc16188c2c49c98d07c60a59ffed1e42caa3f133afff12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4c696e6b6564496e2d3030373762353f7374796c653d666c61742d737175617265266c6f676f3d4c696e6b6564696e266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f7777772e6c696e6b6564696e2e636f6d2f696e2f627279616e2d67756e65722d3034363139393132382f\",\"alt\":\"Linkedin\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/c64472a38fcb4e49cb16b8026a44d74e8d9c5b0003796a282564ab8a40143d68/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d416e67656c4c6973742d626c61636b3f7374796c653d666c61742d737175617265266c6f676f3d416e67656c4c697374266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f616e67656c2e636f2f752f627279616e2d67756e6572\",\"alt\":\"AngelList\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/32df1587a64824a89d979fe5b59a3e0bd166c44ced566dccf0d33ed62799157c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f62676f6f6e7a3f6c6162656c3d666f6c6c6f77267374796c653d736f6369616c\",\"alt\":\"GitHub bgoonz\",\"title\":\"\"}],[\"image\",{\"src\":\"https://github.com/bgoonz/bgoonz/raw/master/code.png?raw=true\",\"alt\":\"code\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/987e9d7d7e70f98c5cd1d613add6ef56bcab60a8eda9e3df9f4f505b611ff773/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f676d61696c2e706e67\",\"alt\":\"email\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/6acccefe72a9ad3380c0802e7a78988adad9d186eefff43b715bd7d7d07dc52a/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f66616365626f6f6b2e706e67\",\"alt\":\"facebook\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/a6a76173a04df8b3239debac70858c0d8bebd8d882b6572a0419cff3f51a2fc3/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f747769747465722d737175617265642e706e67\",\"alt\":\"twitter\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/aec347ccecfb57c504334b6723d26a419c1e7a871d467603d0a301272d5ac329/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f796f75747562652e706e67\",\"alt\":\"youtube\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/13b4ab64e1a639ef039c1688b03c7a1a0aaa875a1858fa56888aa09c492aac6a/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f696e7374616772616d2d6e65772e706e67\",\"alt\":\"instagram\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/4f660401d8469647f004f5740254c81a657f48d4c55a635be05ffb196c2be320/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f6c696e6b6564696e2e706e67\",\"alt\":\"linkedin\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/a9c0792a5acd4b406effc40cd8b8c6575fad4a4062a37c5a1787e032f5a6192f/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f6d656469756d2d6c6f676f2e706e67\",\"alt\":\"medium\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/936d3874f5be4f3e8b6dce7582d12d1425c9fc24dab49159180ee55c0dcba92a/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f73706f746966792d2d76312e706e67\",\"alt\":\"spotify\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/df85fe41e52c487dfc79d46086816010d0c40d54bbc03dfb5b1e89839bf27ec9/68747470733a2f2f61637469766974792d67726170682e6865726f6b756170702e636f6d2f67726170683f757365726e616d653d62676f6f6e7a26637573746f6d5f7469746c653d546869732532306973253230427279616e73253230416374697669747926686964655f626f726465723d74727565267468656d653d636861727472657573652d6461726b\",\"alt\":\"Bryans github activity graph\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/6df31a460cb0c38f960e92812c8b6f8bce4c7f13170fb4782f0b31ab8e792ac2/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6d6963726f736f66745f617a7572652f6d6963726f736f66745f617a7572652d69636f6e2e737667\",\"alt\":\"azure\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/1abf71d00a4a13bfdeccdc131c65f02644fae4e746289bd7c21bf1d2af986389/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f626162656c6a732f626162656c6a732d69636f6e2e737667\",\"alt\":\"babel\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/bbb327d6ba7708520eaafd13396fed64d73bf5df5c4cdd0ba03cf0843f7a9340/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f676e755f626173682f676e755f626173682d69636f6e2e737667\",\"alt\":\"bash\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/d4cbacdc000de378e0dcae3b5ee54923c0ad04f6e52b7aa886a748fba5578def/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f656c61737469632f656c61737469632d69636f6e2e737667\",\"alt\":\"elasticsearch\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/dd4b2422ed3bfc9da88c43d18550375c66f9584327dff7ecc19315ce50b96f07/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f66697265626173652f66697265626173652d69636f6e2e737667\",\"alt\":\"firebase\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/ba9df1e4c5f7c9f6503f2668f03a934b4553c5840dd6067ee1ab013c2af86afc/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6761747362796a732f6761747362796a732d69636f6e2e737667\",\"alt\":\"gatsby\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/582944f6627732531ce1a2e20ad43538d1896e16a5f159ea28fd137dbb8e798a/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f676f6f676c655f636c6f75642f676f6f676c655f636c6f75642d69636f6e2e737667\",\"alt\":\"gcp\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/fbfcb9e3dc648adc93bef37c718db16c52f617ad055a26de6dc3c21865c3321d/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6769742d73636d2f6769742d73636d2d69636f6e2e737667\",\"alt\":\"git\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/df12cb598044a3f38efc1f45e3580558c324cf8789b79487125044eeebcc4dee/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6865726f6b752f6865726f6b752d69636f6e2e737667\",\"alt\":\"heroku\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/d7a4f32c1f2f389d3db9810abfe171cd5d68f9239d2918f975845faf0cbbb70c/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6a656b796c6c72622f6a656b796c6c72622d69636f6e2e737667\",\"alt\":\"jekyll\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/4253eb6921d60a216772940978dea3a0cf2113f2f29b5545720d3b5b6960e467/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6d6f6368616a732f6d6f6368616a732d69636f6e2e737667\",\"alt\":\"mocha\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/93b32389bf746009ca2370de7fe06c3b5146f4c99d99df65994f9ced0ba41685/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f676574706f73746d616e2f676574706f73746d616e2d69636f6e2e737667\",\"alt\":\"postman\",\"title\":\"\",\"cardWidth\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/9391ab4ec8994e921292160bd31966a5886d8599af858ee5e513f2a3d868c403/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f707074726465762f707074726465762d6f6666696369616c2e737667\",\"alt\":\"puppeteer\",\"title\":\"\",\"cardWidth\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/8ce24bc85eb4a64c6ad571675cbc7dca48a49feea462d572204505907c6ca957/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f76616772616e7475702f76616772616e7475702d69636f6e2e737667\",\"alt\":\"vagrant\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/8f391d66440860f43c55d4d8ad22733a6919059108642cfdad9be4fc5f4f1d79/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f7a61706965722f7a61706965722d69636f6e2e737667\",\"alt\":\"zapier\",\"title\":\"\"}],[\"html\",{\"html\":\"<table style=\\\"box-sizing: border-box; border-spacing: 0px; border-collapse: collapse; margin-top: 0px; margin-bottom: 16px; display: block; width: max-content; max-width: 100%; overflow: auto;\\\"><thead style=\\\"box-sizing: border-box;\\\"><tr style=\\\"box-sizing: border-box; background-color: var(--color-canvas-default); border-top: 1px solid var(--color-border-muted);\\\"><th style=\\\"box-sizing: border-box; padding: 6px 13px; font-weight: 600; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://github.com/bgoonz\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">GitHub</a></th><th style=\\\"box-sizing: border-box; padding: 6px 13px; font-weight: 600; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://gitlab.com/bryan.guner.dev\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Gitlab</a></th><th style=\\\"box-sizing: border-box; padding: 6px 13px; font-weight: 600; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://bitbucket.org/bgoonz/\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Bitbucket</a></th><th style=\\\"box-sizing: border-box; padding: 6px 13px; font-weight: 600; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://bryanguner.medium.com/\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Medium</a></th><th style=\\\"box-sizing: border-box; padding: 6px 13px; font-weight: 600; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://codepen.io/bgoonz\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">code pen</a></th></tr></thead><tbody style=\\\"box-sizing: border-box;\\\"><tr style=\\\"box-sizing: border-box; background-color: var(--color-canvas-default); border-top: 1px solid var(--color-border-muted);\\\"><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://repl.it/@bgoonz/\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Replit</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://www.quora.com/q/webdevresourcehub?invite_code=qwZOqbpAhgQ6hjjGl8NN\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Quora</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://www.reddit.com/user/bgoonz1\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Redit</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://webcomponents.dev/user/bgoonz\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">webcomponents.dev</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://dev.to/bgoonz\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">dev.to</a></td></tr><tr style=\\\"box-sizing: border-box; background-color: var(--color-canvas-subtle); border-top: 1px solid var(--color-border-muted);\\\"><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://runkit.com/bgoonz\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">runkit</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://observablehq.com/@bgoonz?tab=profile\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Observable Notebooks</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://www.npmjs.com/~bgoonz11\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">npm</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://meta.stackexchange.com/users/936785/bryan-guner\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">stack-exchange</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://observablehq.com/@bgoonz?tab=profile\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Observable Notebooks</a></td></tr><tr style=\\\"box-sizing: border-box; background-color: var(--color-canvas-default); border-top: 1px solid var(--color-border-muted);\\\"><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://www.upwork.com/freelancers/~01bb1a3627e1e9c630?viewMode=1&amp;s=1110580755057594368\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Upwork</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://www.notion.so/Overview-Of-Css-5d88b0bc9a73422a9be1481d599a56ba\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Notion</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://angel.co/u/bryan-guner\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">AngelList</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://stackshare.io/bryanguner\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">StackShare</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"http://plnkr.co/account/plunks\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Plunk</a></td></tr><tr style=\\\"box-sizing: border-box; background-color: var(--color-canvas-subtle); border-top: 1px solid var(--color-border-muted);\\\"><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://giphy.com/channel/bryanguner\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">giphy</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://ko-fi.com/bgoonz\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">kofi</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://www.codewars.com/users/bgoonz\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Codewars</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://dribbble.com/bgoonz4242?onboarding=true\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Dribble</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://glitch.com/@bgoonz\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Glitch</a></td></tr><tr style=\\\"box-sizing: border-box; background-color: var(--color-canvas-default); border-top: 1px solid var(--color-border-muted);\\\"><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://app.contentful.com/spaces/lelpu0ihaz11/assets?id=MocOPmmNliLn6PPv\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">contentful</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://app.netlify.com/user/settings#profile\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Netlify</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://stackblitz.com/@bgoonz\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Stackblitz</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://vercel.com/bgoonz\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Vercel</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/featured\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Youtube</a></td></tr><tr style=\\\"box-sizing: border-box; background-color: var(--color-canvas-subtle); border-top: 1px solid var(--color-border-muted);\\\"><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://web-dev-hub.com/\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">wordpress</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://edabit.com/user/dsRcx6yCwAgYwZbRB\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Edabit</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://vimeo.com/user128661018\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Vinmeo</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://jsfiddle.net/user/bgoonz/\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">js fiddle</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://hashnode.com/@bgoonz/joinme\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">hashnode</a></td></tr><tr style=\\\"box-sizing: border-box; background-color: var(--color-canvas-default); border-top: 1px solid var(--color-border-muted);\\\"><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://developers.google.com/profile/u/100803355943326309646?utm_source=developers.google.com\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Google Developer Profile</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://gitee.com/bgoonz\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Gittee</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://wakatime.com/@bgoonz42\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Wakatime</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://hubpages.com/@bryanguner\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Hubpages</a></td><td style=\\\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\\\"><a href=\\\"https://bryan-guner.gitbook.io/web-dev-hub-docs/\\\" rel=\\\"nofollow\\\" style=\\\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\\\">Gitbook</a></td></tr></tbody></table>\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/19e0a9e7039e5b0cfda7c36d7cae8b212758ad4435983ec2b0ea0bd4dccb153b/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f70696e2f3f757365726e616d653d62676f6f6e7a267265706f3d4c616d626461\",\"alt\":\"ReadMe Card\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/083e5f58841eeac90d6d98bde702aebf767f84f4734480c69b328920a901e863/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f70696e2f3f757365726e616d653d62676f6f6e7a267265706f3d44532d414c474f2d4f4646494349414c\",\"alt\":\"ReadMe Card\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/c8b96a2b22ddc2ef31acba921d0317e3e37dc1433fd384b18b6cab7dcf4d1dff/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f70696e2f3f757365726e616d653d62676f6f6e7a267265706f3d42474f4f4e5a5f424c4f475f322e30\",\"alt\":\"ReadMe Card\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/2863e7bc53a33d6fe810d97bbd699d186ade3f1b73841fe03f71f62af19de825/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f70696e2f3f757365726e616d653d62676f6f6e7a267265706f3d444154415f53545255435f505954484f4e5f4e4f544553\",\"alt\":\"ReadMe Card\",\"title\":\"\"}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/ec5908a2b7b26de2d103e5281abfb6ca1d1a31b3b9b6e54c1e72c01c123e995f/68747470733a2f2f6769746875622d70726f66696c652d74726f7068792e76657263656c2e6170702f3f757365726e616d653d62676f6f6e7a26726f773d31\",\"alt\":\"trophy\",\"title\":\"\"}]],\"markups\":[[\"a\",[\"href\",\"https://bgoonz-blog.netlify.app/\",\"rel\",\"nofollow\"]],[\"a\",[\"href\",\"https://bg-portfolio.netlify.app/\",\"rel\",\"nofollow\"]],[\"a\",[\"href\",\"https://webdevhub.jetbrains.space/oauth/auth/invite/419dd305ba717a392a02aa5b4e41e09c\",\"rel\",\"nofollow\"]],[\"a\",[\"href\",\"https://bgoonz-blog.netlify.app/docs/medium/my-websites/\",\"rel\",\"nofollow\"]],[\"a\",[\"href\",\"https://bgoonz.github.io/github-stats-website/\",\"rel\",\"nofollow\"]],[\"em\"],[\"a\",[\"href\",\"https://github.com/bgoonz#\"]],[\"a\",[\"href\",\"https://github.com/bgoonz/bgoonz/blob/master/551-254-5505\"]]],\"sections\":[[1,\"p\",[]],[10,0],[1,\"h4\",[[0,[],0,\"                     \"],[0,[0],1,\"WEBSITE\"],[0,[],0,\" ⇄ \"],[0,[1],1,\"Portfolio\"],[0,[],0,\" ⇄ \"],[0,[2],1,\"Collaborate\"],[0,[],0,\" ⇄ \"],[0,[3],1,\"Other-Websites\"],[0,[],0,\" ⇄ \"],[0,[4],1,\"Recent Work\"]]],[1,\"p\",[]],[10,1],[10,2],[10,3],[10,4],[1,\"h3\",[[0,[],0,\"                           ➤ \"],[0,[5],1,\"Email\"],[0,[],0,\" \"],[0,[6],1,\"bryan.guner@gmail.com\"],[0,[],0,\" \"],[0,[5],1,\"Phone\"],[0,[],0,\" \"],[0,[7],1,\"551-254-5505\"]]],[1,\"p\",[]],[1,\"h4\",[[0,[],0,\"A passionate Web Developer, Electrical Engineer, Musician & Producer\"]]],[10,5],[10,6],[10,7],[10,8],[10,9],[10,10],[10,11],[10,12],[10,13],[10,14],[10,15],[10,16],[10,17],[10,18],[10,19],[10,20],[10,21],[10,22],[10,23],[10,24],[10,25],[10,26],[10,27],[10,28],[10,29],[1,\"h3\",[[0,[],0,\"Languages and Tools:\"]]],[10,30],[10,31],[10,32],[10,33],[10,34],[10,35],[10,36],[10,37],[10,38],[10,39],[10,40],[10,41],[10,42],[10,43],[10,44],[10,45],[10,46],[10,47],[10,48],[10,49],[10,50],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p></p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"__GHOST_URL__/content/images/2021/09/image-1.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"300\" height=\"300\"></figure><h4 id=\"website-%E2%87%84-portfolio-%E2%87%84-collaborate-%E2%87%84-other-websites-%E2%87%84-recent-work\">                     <a href=\"https://bgoonz-blog.netlify.app/\" rel=\"nofollow\">WEBSITE</a> ⇄ <a href=\"https://bg-portfolio.netlify.app/\" rel=\"nofollow\">Portfolio</a> ⇄ <a href=\"https://webdevhub.jetbrains.space/oauth/auth/invite/419dd305ba717a392a02aa5b4e41e09c\" rel=\"nofollow\">Collaborate</a> ⇄ <a href=\"https://bgoonz-blog.netlify.app/docs/medium/my-websites/\" rel=\"nofollow\">Other-Websites</a> ⇄ <a href=\"https://bgoonz.github.io/github-stats-website/\" rel=\"nofollow\">Recent Work</a></h4><p></p><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/41fbd874c1ba0b69222440c1527ceb24831f388dcf4b875c048dbf0ce11fce58/68747470733a2f2f76696577732e77686174696c656172656e65642e746f6461792f76696577732f6769746875622f62676f6f6e7a2f76696577732e737667\" class=\"kg-image\" alt=\"Profile views\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/3b010aaec4938434c93c158f7ad38fd70693fdc8c1ec39baeadbebab61458138/68747470733a2f2f6261646765732e6769747465722e696d2f62676f6f6e7a2f636f6d6d756e6974792e737667\" class=\"kg-image\" alt=\"Gitter\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/c2a5c84d227b48f8b214bf813206875ac60e5f5a93ab8a22169e1b72e2764255/68747470733a2f2f6861636b6d642e696f2f354465596a326f585476474a312d587670314a6f32512f6261646765\" class=\"kg-image\" alt=\"hackmd-github-sync-badge\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/c2e34390f77ac43483e3b319f52845547e27f20b2efe79455385c132962cf102/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f62676f6f6e7a2e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77266d61784167653d32353932303030\" class=\"kg-image\" alt=\"GitHub followers\" loading=\"lazy\"></figure><h3 id=\"%E2%9E%A4-email-bryangunergmailcom-phone-551-254-5505\">                           ➤ <em>Email</em> <a href=\"https://github.com/bgoonz#\">bryan.guner@gmail.com</a> <em>Phone</em> <a href=\"https://github.com/bgoonz/bgoonz/blob/master/551-254-5505\">551-254-5505</a></h3><p></p><h4 id=\"a-passionate-web-developer-electrical-engineer-musician-producer\">A passionate Web Developer, Electrical Engineer, Musician &amp; Producer</h4><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/727b46e1d3fa1dc9460d1f7a8c4f4fb8a5523029a3389abf818bc1f95430b4ac/68747470733a2f2f726561646d652d6a6f6b65732e76657263656c2e6170702f617069\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/ede4d8e5abd93426806a9e7bd3467603135f5ac527225f8cc01891948b48dd53/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d2545322539442541345f506f7274666f6c696f2d6635383f7374796c653d666c61742d737175617265266c6f676f3d61266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f62672d706f7274666f6c696f2e6e65746c6966792e6170702f\" class=\"kg-image\" alt=\"Portfolio\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/be39e4efa075ffc9dec9f08ffa5296ab259a2190ca575bbc58881c2c79fc3447/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d526573756d652d6630303f7374796c653d666c61742d737175617265266c6f676f3d61646f62652d6163726f6261742d726561646572266c6f676f436f6c6f723d7768697465\" class=\"kg-image\" alt=\"Resume PDF\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/917b3c0fed1a17b7658bc96dcae513d12e4bbf98e492342c33eb7b5089a7527f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f627279616e2e67756e657240676d61696c2e636f6d2d6634623430303f7374796c653d666c61742d737175617265266c6f676f3d676d61696c266c6f676f436f6c6f723d626c61636b266c696e6b3d6d61696c746f3a627279616e2e67756e657240676d61696c2e636f6d\" class=\"kg-image\" alt=\"Bryan's email\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/8e538703dad4c1dd05103d6a9aa6dfcecdd735439967d2501c172c1780bb3929/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d426c6f672d3231373539623f7374796c653d666c61742d737175617265266c6f676f3d576f72645072657373266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f7765622d6465762d6875622e636f6d2f\" class=\"kg-image\" alt=\"Blog\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/bc53eadd154132f3d3cc16188c2c49c98d07c60a59ffed1e42caa3f133afff12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4c696e6b6564496e2d3030373762353f7374796c653d666c61742d737175617265266c6f676f3d4c696e6b6564696e266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f7777772e6c696e6b6564696e2e636f6d2f696e2f627279616e2d67756e65722d3034363139393132382f\" class=\"kg-image\" alt=\"Linkedin\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/c64472a38fcb4e49cb16b8026a44d74e8d9c5b0003796a282564ab8a40143d68/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d416e67656c4c6973742d626c61636b3f7374796c653d666c61742d737175617265266c6f676f3d416e67656c4c697374266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f616e67656c2e636f2f752f627279616e2d67756e6572\" class=\"kg-image\" alt=\"AngelList\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/32df1587a64824a89d979fe5b59a3e0bd166c44ced566dccf0d33ed62799157c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f62676f6f6e7a3f6c6162656c3d666f6c6c6f77267374796c653d736f6369616c\" class=\"kg-image\" alt=\"GitHub bgoonz\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/ede4d8e5abd93426806a9e7bd3467603135f5ac527225f8cc01891948b48dd53/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d2545322539442541345f506f7274666f6c696f2d6635383f7374796c653d666c61742d737175617265266c6f676f3d61266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f62672d706f7274666f6c696f2e6e65746c6966792e6170702f\" class=\"kg-image\" alt=\"Portfolio\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/be39e4efa075ffc9dec9f08ffa5296ab259a2190ca575bbc58881c2c79fc3447/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d526573756d652d6630303f7374796c653d666c61742d737175617265266c6f676f3d61646f62652d6163726f6261742d726561646572266c6f676f436f6c6f723d7768697465\" class=\"kg-image\" alt=\"Resume PDF\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/917b3c0fed1a17b7658bc96dcae513d12e4bbf98e492342c33eb7b5089a7527f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f627279616e2e67756e657240676d61696c2e636f6d2d6634623430303f7374796c653d666c61742d737175617265266c6f676f3d676d61696c266c6f676f436f6c6f723d626c61636b266c696e6b3d6d61696c746f3a627279616e2e67756e657240676d61696c2e636f6d\" class=\"kg-image\" alt=\"Bryan's email\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/8e538703dad4c1dd05103d6a9aa6dfcecdd735439967d2501c172c1780bb3929/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d426c6f672d3231373539623f7374796c653d666c61742d737175617265266c6f676f3d576f72645072657373266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f7765622d6465762d6875622e636f6d2f\" class=\"kg-image\" alt=\"Blog\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/bc53eadd154132f3d3cc16188c2c49c98d07c60a59ffed1e42caa3f133afff12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4c696e6b6564496e2d3030373762353f7374796c653d666c61742d737175617265266c6f676f3d4c696e6b6564696e266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f7777772e6c696e6b6564696e2e636f6d2f696e2f627279616e2d67756e65722d3034363139393132382f\" class=\"kg-image\" alt=\"Linkedin\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/c64472a38fcb4e49cb16b8026a44d74e8d9c5b0003796a282564ab8a40143d68/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d416e67656c4c6973742d626c61636b3f7374796c653d666c61742d737175617265266c6f676f3d416e67656c4c697374266c6f676f436f6c6f723d7768697465266c696e6b3d68747470733a2f2f616e67656c2e636f2f752f627279616e2d67756e6572\" class=\"kg-image\" alt=\"AngelList\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/32df1587a64824a89d979fe5b59a3e0bd166c44ced566dccf0d33ed62799157c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f62676f6f6e7a3f6c6162656c3d666f6c6c6f77267374796c653d736f6369616c\" class=\"kg-image\" alt=\"GitHub bgoonz\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://github.com/bgoonz/bgoonz/raw/master/code.png?raw=true\" class=\"kg-image\" alt=\"code\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/987e9d7d7e70f98c5cd1d613add6ef56bcab60a8eda9e3df9f4f505b611ff773/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f676d61696c2e706e67\" class=\"kg-image\" alt=\"email\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/6acccefe72a9ad3380c0802e7a78988adad9d186eefff43b715bd7d7d07dc52a/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f66616365626f6f6b2e706e67\" class=\"kg-image\" alt=\"facebook\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/a6a76173a04df8b3239debac70858c0d8bebd8d882b6572a0419cff3f51a2fc3/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f747769747465722d737175617265642e706e67\" class=\"kg-image\" alt=\"twitter\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/aec347ccecfb57c504334b6723d26a419c1e7a871d467603d0a301272d5ac329/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f796f75747562652e706e67\" class=\"kg-image\" alt=\"youtube\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/13b4ab64e1a639ef039c1688b03c7a1a0aaa875a1858fa56888aa09c492aac6a/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f696e7374616772616d2d6e65772e706e67\" class=\"kg-image\" alt=\"instagram\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/4f660401d8469647f004f5740254c81a657f48d4c55a635be05ffb196c2be320/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f6c696e6b6564696e2e706e67\" class=\"kg-image\" alt=\"linkedin\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/a9c0792a5acd4b406effc40cd8b8c6575fad4a4062a37c5a1787e032f5a6192f/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f6d656469756d2d6c6f676f2e706e67\" class=\"kg-image\" alt=\"medium\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/936d3874f5be4f3e8b6dce7582d12d1425c9fc24dab49159180ee55c0dcba92a/68747470733a2f2f696d672e69636f6e73382e636f6d2f636f6c6f722f39362f3030303030302f73706f746966792d2d76312e706e67\" class=\"kg-image\" alt=\"spotify\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/df85fe41e52c487dfc79d46086816010d0c40d54bbc03dfb5b1e89839bf27ec9/68747470733a2f2f61637469766974792d67726170682e6865726f6b756170702e636f6d2f67726170683f757365726e616d653d62676f6f6e7a26637573746f6d5f7469746c653d546869732532306973253230427279616e73253230416374697669747926686964655f626f726465723d74727565267468656d653d636861727472657573652d6461726b\" class=\"kg-image\" alt=\"Bryans github activity graph\" loading=\"lazy\"></figure><h3 id=\"languages-and-tools\">Languages and Tools:</h3><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/6df31a460cb0c38f960e92812c8b6f8bce4c7f13170fb4782f0b31ab8e792ac2/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6d6963726f736f66745f617a7572652f6d6963726f736f66745f617a7572652d69636f6e2e737667\" class=\"kg-image\" alt=\"azure\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/1abf71d00a4a13bfdeccdc131c65f02644fae4e746289bd7c21bf1d2af986389/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f626162656c6a732f626162656c6a732d69636f6e2e737667\" class=\"kg-image\" alt=\"babel\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/bbb327d6ba7708520eaafd13396fed64d73bf5df5c4cdd0ba03cf0843f7a9340/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f676e755f626173682f676e755f626173682d69636f6e2e737667\" class=\"kg-image\" alt=\"bash\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/d4cbacdc000de378e0dcae3b5ee54923c0ad04f6e52b7aa886a748fba5578def/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f656c61737469632f656c61737469632d69636f6e2e737667\" class=\"kg-image\" alt=\"elasticsearch\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/dd4b2422ed3bfc9da88c43d18550375c66f9584327dff7ecc19315ce50b96f07/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f66697265626173652f66697265626173652d69636f6e2e737667\" class=\"kg-image\" alt=\"firebase\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/ba9df1e4c5f7c9f6503f2668f03a934b4553c5840dd6067ee1ab013c2af86afc/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6761747362796a732f6761747362796a732d69636f6e2e737667\" class=\"kg-image\" alt=\"gatsby\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/582944f6627732531ce1a2e20ad43538d1896e16a5f159ea28fd137dbb8e798a/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f676f6f676c655f636c6f75642f676f6f676c655f636c6f75642d69636f6e2e737667\" class=\"kg-image\" alt=\"gcp\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/fbfcb9e3dc648adc93bef37c718db16c52f617ad055a26de6dc3c21865c3321d/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6769742d73636d2f6769742d73636d2d69636f6e2e737667\" class=\"kg-image\" alt=\"git\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/df12cb598044a3f38efc1f45e3580558c324cf8789b79487125044eeebcc4dee/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6865726f6b752f6865726f6b752d69636f6e2e737667\" class=\"kg-image\" alt=\"heroku\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/d7a4f32c1f2f389d3db9810abfe171cd5d68f9239d2918f975845faf0cbbb70c/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6a656b796c6c72622f6a656b796c6c72622d69636f6e2e737667\" class=\"kg-image\" alt=\"jekyll\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/4253eb6921d60a216772940978dea3a0cf2113f2f29b5545720d3b5b6960e467/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6d6f6368616a732f6d6f6368616a732d69636f6e2e737667\" class=\"kg-image\" alt=\"mocha\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/93b32389bf746009ca2370de7fe06c3b5146f4c99d99df65994f9ced0ba41685/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f676574706f73746d616e2f676574706f73746d616e2d69636f6e2e737667\" class=\"kg-image\" alt=\"postman\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/9391ab4ec8994e921292160bd31966a5886d8599af858ee5e513f2a3d868c403/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f707074726465762f707074726465762d6f6666696369616c2e737667\" class=\"kg-image\" alt=\"puppeteer\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/8ce24bc85eb4a64c6ad571675cbc7dca48a49feea462d572204505907c6ca957/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f76616772616e7475702f76616772616e7475702d69636f6e2e737667\" class=\"kg-image\" alt=\"vagrant\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/8f391d66440860f43c55d4d8ad22733a6919059108642cfdad9be4fc5f4f1d79/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f7a61706965722f7a61706965722d69636f6e2e737667\" class=\"kg-image\" alt=\"zapier\" loading=\"lazy\"></figure><!--kg-card-begin: html--><table style=\"box-sizing: border-box; border-spacing: 0px; border-collapse: collapse; margin-top: 0px; margin-bottom: 16px; display: block; width: max-content; max-width: 100%; overflow: auto;\"><thead style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box; background-color: var(--color-canvas-default); border-top: 1px solid var(--color-border-muted);\"><th style=\"box-sizing: border-box; padding: 6px 13px; font-weight: 600; border: 1px solid var(--color-border-default);\"><a href=\"https://github.com/bgoonz\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">GitHub</a></th><th style=\"box-sizing: border-box; padding: 6px 13px; font-weight: 600; border: 1px solid var(--color-border-default);\"><a href=\"https://gitlab.com/bryan.guner.dev\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Gitlab</a></th><th style=\"box-sizing: border-box; padding: 6px 13px; font-weight: 600; border: 1px solid var(--color-border-default);\"><a href=\"https://bitbucket.org/bgoonz/\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Bitbucket</a></th><th style=\"box-sizing: border-box; padding: 6px 13px; font-weight: 600; border: 1px solid var(--color-border-default);\"><a href=\"https://bryanguner.medium.com/\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Medium</a></th><th style=\"box-sizing: border-box; padding: 6px 13px; font-weight: 600; border: 1px solid var(--color-border-default);\"><a href=\"https://codepen.io/bgoonz\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">code pen</a></th></tr></thead><tbody style=\"box-sizing: border-box;\"><tr style=\"box-sizing: border-box; background-color: var(--color-canvas-default); border-top: 1px solid var(--color-border-muted);\"><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://repl.it/@bgoonz/\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Replit</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://www.quora.com/q/webdevresourcehub?invite_code=qwZOqbpAhgQ6hjjGl8NN\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Quora</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://www.reddit.com/user/bgoonz1\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Redit</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://webcomponents.dev/user/bgoonz\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">webcomponents.dev</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://dev.to/bgoonz\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">dev.to</a></td></tr><tr style=\"box-sizing: border-box; background-color: var(--color-canvas-subtle); border-top: 1px solid var(--color-border-muted);\"><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://runkit.com/bgoonz\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">runkit</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://observablehq.com/@bgoonz?tab=profile\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Observable Notebooks</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://www.npmjs.com/~bgoonz11\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">npm</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://meta.stackexchange.com/users/936785/bryan-guner\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">stack-exchange</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://observablehq.com/@bgoonz?tab=profile\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Observable Notebooks</a></td></tr><tr style=\"box-sizing: border-box; background-color: var(--color-canvas-default); border-top: 1px solid var(--color-border-muted);\"><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://www.upwork.com/freelancers/~01bb1a3627e1e9c630?viewMode=1&amp;s=1110580755057594368\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Upwork</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://www.notion.so/Overview-Of-Css-5d88b0bc9a73422a9be1481d599a56ba\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Notion</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://angel.co/u/bryan-guner\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">AngelList</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://stackshare.io/bryanguner\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">StackShare</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"http://plnkr.co/account/plunks\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Plunk</a></td></tr><tr style=\"box-sizing: border-box; background-color: var(--color-canvas-subtle); border-top: 1px solid var(--color-border-muted);\"><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://giphy.com/channel/bryanguner\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">giphy</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://ko-fi.com/bgoonz\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">kofi</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://www.codewars.com/users/bgoonz\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Codewars</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://dribbble.com/bgoonz4242?onboarding=true\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Dribble</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://glitch.com/@bgoonz\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Glitch</a></td></tr><tr style=\"box-sizing: border-box; background-color: var(--color-canvas-default); border-top: 1px solid var(--color-border-muted);\"><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://app.contentful.com/spaces/lelpu0ihaz11/assets?id=MocOPmmNliLn6PPv\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">contentful</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://app.netlify.com/user/settings#profile\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Netlify</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://stackblitz.com/@bgoonz\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Stackblitz</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://vercel.com/bgoonz\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Vercel</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/featured\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Youtube</a></td></tr><tr style=\"box-sizing: border-box; background-color: var(--color-canvas-subtle); border-top: 1px solid var(--color-border-muted);\"><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://web-dev-hub.com/\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">wordpress</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://edabit.com/user/dsRcx6yCwAgYwZbRB\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Edabit</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://vimeo.com/user128661018\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Vinmeo</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://jsfiddle.net/user/bgoonz/\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">js fiddle</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://hashnode.com/@bgoonz/joinme\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">hashnode</a></td></tr><tr style=\"box-sizing: border-box; background-color: var(--color-canvas-default); border-top: 1px solid var(--color-border-muted);\"><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://developers.google.com/profile/u/100803355943326309646?utm_source=developers.google.com\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Google Developer Profile</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://gitee.com/bgoonz\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Gittee</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://wakatime.com/@bgoonz42\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Wakatime</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://hubpages.com/@bryanguner\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Hubpages</a></td><td style=\"box-sizing: border-box; padding: 6px 13px; border: 1px solid var(--color-border-default);\"><a href=\"https://bryan-guner.gitbook.io/web-dev-hub-docs/\" rel=\"nofollow\" style=\"box-sizing: border-box; background-color: transparent; color: var(--color-accent-fg); text-decoration: none;\">Gitbook</a></td></tr></tbody></table><!--kg-card-end: html--><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/19e0a9e7039e5b0cfda7c36d7cae8b212758ad4435983ec2b0ea0bd4dccb153b/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f70696e2f3f757365726e616d653d62676f6f6e7a267265706f3d4c616d626461\" class=\"kg-image\" alt=\"ReadMe Card\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/083e5f58841eeac90d6d98bde702aebf767f84f4734480c69b328920a901e863/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f70696e2f3f757365726e616d653d62676f6f6e7a267265706f3d44532d414c474f2d4f4646494349414c\" class=\"kg-image\" alt=\"ReadMe Card\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/c8b96a2b22ddc2ef31acba921d0317e3e37dc1433fd384b18b6cab7dcf4d1dff/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f70696e2f3f757365726e616d653d62676f6f6e7a267265706f3d42474f4f4e5a5f424c4f475f322e30\" class=\"kg-image\" alt=\"ReadMe Card\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/2863e7bc53a33d6fe810d97bbd699d186ade3f1b73841fe03f71f62af19de825/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f70696e2f3f757365726e616d653d62676f6f6e7a267265706f3d444154415f53545255435f505954484f4e5f4e4f544553\" class=\"kg-image\" alt=\"ReadMe Card\" loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/ec5908a2b7b26de2d103e5281abfb6ca1d1a31b3b9b6e54c1e72c01c123e995f/68747470733a2f2f6769746875622d70726f66696c652d74726f7068792e76657263656c2e6170702f3f757365726e616d653d62676f6f6e7a26726f773d31\" class=\"kg-image\" alt=\"trophy\" loading=\"lazy\"></figure>","comment_id":"615550ca0b5fbd002f24e841","plaintext":"\n\n WEBSITE [https://bgoonz-blog.netlify.app/] ⇄ Portfolio\n[https://bg-portfolio.netlify.app/] ⇄ Collaborate\n[https://webdevhub.jetbrains.space/oauth/auth/invite/419dd305ba717a392a02aa5b4e41e09c] \n⇄ Other-Websites [https://bgoonz-blog.netlify.app/docs/medium/my-websites/] ⇄ \nRecent Work [https://bgoonz.github.io/github-stats-website/]\n\n\n ➤ Email bryan.guner@gmail.com [https://github.com/bgoonz#] Phone 551-254-5505\n[https://github.com/bgoonz/bgoonz/blob/master/551-254-5505]\n\n\nA passionate Web Developer, Electrical Engineer, Musician & Producer\nLanguages and Tools:\nGitHub [https://github.com/bgoonz]Gitlab [https://gitlab.com/bryan.guner.dev]\nBitbucket [https://bitbucket.org/bgoonz/]Medium [https://bryanguner.medium.com/]\ncode pen [https://codepen.io/bgoonz]Replit [https://repl.it/@bgoonz/]Quora\n[https://www.quora.com/q/webdevresourcehub?invite_code=qwZOqbpAhgQ6hjjGl8NN]\nRedit [https://www.reddit.com/user/bgoonz1]webcomponents.dev\n[https://webcomponents.dev/user/bgoonz]dev.to [https://dev.to/bgoonz]runkit\n[https://runkit.com/bgoonz]Observable Notebooks\n[https://observablehq.com/@bgoonz?tab=profile]npm\n[https://www.npmjs.com/~bgoonz11]stack-exchange\n[https://meta.stackexchange.com/users/936785/bryan-guner]Observable Notebooks\n[https://observablehq.com/@bgoonz?tab=profile]Upwork\n[https://www.upwork.com/freelancers/~01bb1a3627e1e9c630?viewMode=1&s=1110580755057594368]\nNotion [https://www.notion.so/Overview-Of-Css-5d88b0bc9a73422a9be1481d599a56ba]\nAngelList [https://angel.co/u/bryan-guner]StackShare\n[https://stackshare.io/bryanguner]Plunk [http://plnkr.co/account/plunks]giphy\n[https://giphy.com/channel/bryanguner]kofi [https://ko-fi.com/bgoonz]Codewars\n[https://www.codewars.com/users/bgoonz]Dribble\n[https://dribbble.com/bgoonz4242?onboarding=true]Glitch\n[https://glitch.com/@bgoonz]contentful\n[https://app.contentful.com/spaces/lelpu0ihaz11/assets?id=MocOPmmNliLn6PPv]\nNetlify [https://app.netlify.com/user/settings#profile]Stackblitz\n[https://stackblitz.com/@bgoonz]Vercel [https://vercel.com/bgoonz]Youtube\n[https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/featured]wordpress\n[https://web-dev-hub.com/]Edabit [https://edabit.com/user/dsRcx6yCwAgYwZbRB]\nVinmeo [https://vimeo.com/user128661018]js fiddle\n[https://jsfiddle.net/user/bgoonz/]hashnode\n[https://hashnode.com/@bgoonz/joinme]Google Developer Profile\n[https://developers.google.com/profile/u/100803355943326309646?utm_source=developers.google.com]\nGittee [https://gitee.com/bgoonz]Wakatime [https://wakatime.com/@bgoonz42]\nHubpages [https://hubpages.com/@bryanguner]Gitbook\n[https://bryan-guner.gitbook.io/web-dev-hub-docs/]","feature_image":null,"featured":1,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T07:03:40.000Z","published_at":"2021-09-30T05:53:21.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615550ca0b5fbd002f24e843","uuid":"10aa26fd-d7d4-4cdf-b555-37972f4ab36e","title":"Contact","slug":"contact","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/integrations.png\",\"width\":2944,\"height\":1716,\"href\":\"https://ghost.org/integrations/?tag=forms\"}]],\"markups\":[[\"a\",[\"href\",\"https://twitter.com/ghost\"]],[\"a\",[\"href\",\"https://www.facebook.com/ghost\"]],[\"a\",[\"href\",\"https://instagram.com/ghost\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"If you want to set up a contact page for people to be able to reach out to you, the simplest way is to set up a simple page like this and list the different ways people can reach out to you.\"]]],[1,\"h3\",[[0,[],0,\"For example, here's how to reach us!\"]]],[3,\"ul\",[[[0,[0],1,\"@Ghost\"],[0,[],0,\" on Twitter\"]],[[0,[1],1,\"@Ghost\"],[0,[],0,\" on Facebook\"]],[[0,[2],1,\"@Ghost\"],[0,[],0,\" on Instagram\"]]]],[1,\"p\",[[0,[],0,\"If you prefer to use a contact form, almost all of the great embedded form services work great with Ghost and are easy to set up:\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>If you want to set up a contact page for people to be able to reach out to you, the simplest way is to set up a simple page like this and list the different ways people can reach out to you.</p><h3 id=\"for-example-heres-how-to-reach-us\">For example, here's how to reach us!</h3><ul><li><a href=\"https://twitter.com/ghost\">@Ghost</a> on Twitter</li><li><a href=\"https://www.facebook.com/ghost\">@Ghost</a> on Facebook</li><li><a href=\"https://instagram.com/ghost\">@Ghost</a> on Instagram</li></ul><p>If you prefer to use a contact form, almost all of the great embedded form services work great with Ghost and are easy to set up:</p><figure class=\"kg-card kg-image-card\"><a href=\"https://ghost.org/integrations/?tag=forms\"><img src=\"https://static.ghost.org/v4.0.0/images/integrations.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2944\" height=\"1716\"></a></figure>","comment_id":"615550ca0b5fbd002f24e843","plaintext":"If you want to set up a contact page for people to be able to reach out to you,\nthe simplest way is to set up a simple page like this and list the different\nways people can reach out to you.\n\nFor example, here's how to reach us!\n * @Ghost [https://twitter.com/ghost] on Twitter\n * @Ghost [https://www.facebook.com/ghost] on Facebook\n * @Ghost [https://instagram.com/ghost] on Instagram\n\nIf you prefer to use a contact form, almost all of the great embedded form\nservices work great with Ghost and are easy to set up:\n\n[https://ghost.org/integrations/?tag=forms]","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T05:53:14.000Z","published_at":"2021-09-30T05:53:22.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615550ca0b5fbd002f24e845","uuid":"bad1a962-df90-4035-9b57-8594f27fd921","title":"Privacy","slug":"privacy","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"Wondering how Ghost fares when it comes to privacy and GDPR rules? Good news: Ghost does not use any tracking cookies of any kind.\"]]],[1,\"p\",[[0,[],0,\"You can integrate any products, services, ads or integrations with Ghost yourself if you want to, but it's always a good idea to disclose how subscriber data will be used by putting together a privacy page.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Wondering how Ghost fares when it comes to privacy and GDPR rules? Good news: Ghost does not use any tracking cookies of any kind.</p><p>You can integrate any products, services, ads or integrations with Ghost yourself if you want to, but it's always a good idea to disclose how subscriber data will be used by putting together a privacy page.</p>","comment_id":"615550ca0b5fbd002f24e845","plaintext":"Wondering how Ghost fares when it comes to privacy and GDPR rules? Good news:\nGhost does not use any tracking cookies of any kind.\n\nYou can integrate any products, services, ads or integrations with Ghost\nyourself if you want to, but it's always a good idea to disclose how subscriber\ndata will be used by putting together a privacy page.","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T05:53:14.000Z","published_at":"2021-09-30T05:53:23.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615550ca0b5fbd002f24e847","uuid":"24e1d830-9cc2-4828-8c22-2cc34d3adc55","title":"Contribute","slug":"contribute","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"a\",[\"href\",\"https://github.com/tryghost\"]],[\"a\",[\"href\",\"https://github.com/sponsors/TryGhost\"]],[\"a\",[\"href\",\"https://opencollective.com/ghost\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Oh hey, you clicked every link of our starter content and even clicked this small link in the footer! If you like Ghost and you're enjoying the product so far, we'd hugely appreciate your support in any way you care to show it.\"]]],[1,\"p\",[[0,[],0,\"Ghost is a non-profit organization, and we give away all our intellectual property as open source software. If you believe in what we do, there are a number of ways you can give us a hand, and we hugely appreciate all of them:\"]]],[3,\"ul\",[[[0,[],0,\"Contribute code via \"],[0,[0],1,\"GitHub\"]],[[0,[],0,\"Contribute financially via \"],[0,[1],1,\"GitHub Sponsors\"]],[[0,[],0,\"Contribute financially via \"],[0,[2],1,\"Open Collective\"]],[[0,[],0,\"Contribute reviews via \"],[0,[3],1,\"writing a blog post\"]],[[0,[],0,\"Contribute good vibes via \"],[0,[3],1,\"telling your friends\"],[0,[],0,\" about us\"]]]],[1,\"p\",[[0,[],0,\"Thanks for checking us out!\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Oh hey, you clicked every link of our starter content and even clicked this small link in the footer! If you like Ghost and you're enjoying the product so far, we'd hugely appreciate your support in any way you care to show it.</p><p>Ghost is a non-profit organization, and we give away all our intellectual property as open source software. If you believe in what we do, there are a number of ways you can give us a hand, and we hugely appreciate all of them:</p><ul><li>Contribute code via <a href=\"https://github.com/tryghost\">GitHub</a></li><li>Contribute financially via <a href=\"https://github.com/sponsors/TryGhost\">GitHub Sponsors</a></li><li>Contribute financially via <a href=\"https://opencollective.com/ghost\">Open Collective</a></li><li>Contribute reviews via <strong>writing a blog post</strong></li><li>Contribute good vibes via <strong>telling your friends</strong> about us</li></ul><p>Thanks for checking us out!</p>","comment_id":"615550ca0b5fbd002f24e847","plaintext":"Oh hey, you clicked every link of our starter content and even clicked this\nsmall link in the footer! If you like Ghost and you're enjoying the product so\nfar, we'd hugely appreciate your support in any way you care to show it.\n\nGhost is a non-profit organization, and we give away all our intellectual\nproperty as open source software. If you believe in what we do, there are a\nnumber of ways you can give us a hand, and we hugely appreciate all of them:\n\n * Contribute code via GitHub [https://github.com/tryghost]\n * Contribute financially via GitHub Sponsors\n   [https://github.com/sponsors/TryGhost]\n * Contribute financially via Open Collective [https://opencollective.com/ghost]\n * Contribute reviews via writing a blog post\n * Contribute good vibes via telling your friends about us\n\nThanks for checking us out!","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-09-30T05:53:14.000Z","updated_at":"2021-09-30T05:53:14.000Z","published_at":"2021-09-30T05:53:24.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"61555db8ce2018003b838a60","uuid":"fdcf2cc7-7b45-43c2-be09-ecf7e02478d1","title":"NPM Packages That Fix React Problems","slug":"the-greatest-react-developer-i-ever-met","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[],\"markups\":[[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://redux.js.org/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://react-redux.js.org/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://github.com/reduxjs/redux-thunk\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://github.com/rt2zz/redux-persist\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://github.com/reduxjs/reselect\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://reactjs.org/docs/context.html\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://recoiljs.org/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://javascript.plainenglish.io/state-management-in-react-with-recoil-984cfc1fcd63\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://mobx.js.org/README.html\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://react-query.tanstack.com/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://swr.vercel.app/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://betterprogramming.pub/complete-guideline-to-creating-a-modern-react-app-with-typescript-from-scratch-cebbb5817d8\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://javascript.plainenglish.io/start-your-journey-with-next-js-958705cfc299\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://nextjs.org/\",\"rel\",\"noopener ugc nofollow\"]],[\"em\"],[\"a\",[\"href\",\"https://javascript.plainenglish.io/3-easy-ways-to-solve-seo-problems-in-react-applications-d3d7873dc494\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://github.com/facebook/create-react-app\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.gatsbyjs.org/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://react-hook-form.com/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://formik.org/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.npmjs.com/package/axios\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://styled-components.com/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.w3.org/Style/CSS/Overview.en.html\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://sass-lang.com/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://github.com/vercel/styled-jsx\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://material-ui.com/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://semantic-ui.com/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://ant.design/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://chakra-ui.com/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://react-styleguidist.js.org/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://jsdoc.app/index.html\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.docz.site/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://javascript.plainenglish.io/implement-multi-language-support-in-react-9854c52ddb55\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://react.i18next.com/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.npmjs.com/package/i18next\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.npmjs.com/package/react-intl\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.w3schools.com/css/css3_animations.asp\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.framer.com/motion/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.npmjs.com/package/react-awesome-reveal\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://react-spring.io/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://react-window.vercel.app/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.npmjs.com/package/react-paginate\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://eslint.org/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://jshint.com/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://palantir.github.io/tslint/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://prettier.io/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://github.com/react-ga/react-ga\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://testing-library.com/docs/react-testing-library/intro/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://jestjs.io/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://www.cypress.io/\",\"rel\",\"noopener ugc nofollow\"]],[\"a\",[\"href\",\"https://storybook.js.org/\",\"rel\",\"noopener ugc nofollow\"]]],\"sections\":[[1,\"p\",[]],[1,\"h1\",[[0,[],0,\"1. Global State Management\"]]],[1,\"p\",[[0,[],0,\"Sharing state between components is mandatory in 99% of the applications. And there are some good solutions — both native and external.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"If you ask me for one solution, I will say \"],[0,[0,0],2,\"Redux\"],[0,[],0,\". Not because it’s the best but because it’s the most practical one. Many companies already use it and you will have to use it at some point.\"]]],[3,\"ul\",[[[0,[1,2],2,\"redux\"],[0,[],0,\" with \"],[0,[1,3],2,\"react-redux\"]]]],[1,\"p\",[[0,[],0,\"Also, the ecosystem is great as well. You can find a solution to almost any problem. Some great libraries that go with redux are:\"]]],[3,\"ul\",[[[0,[1,4],2,\"redux-thunk\"],[0,[],0,\" -> For handling asynchronous action.\"]],[[0,[1,5],2,\"redux-persist\"],[0,[],0,\" -> For storing data locally (offline support).\"]],[[0,[1,6],2,\"reselect\"],[0,[],0,\" -> For making faster queries to store.\"]]]],[1,\"h2\",[[0,[],0,\"Alternatives\"]]],[3,\"ul\",[[[0,[1,7],2,\"context\"],[0,[],0,\" -> Built in to React. Good for simple use. Not good for performance. Especially if you have huge changing data.\"]],[[0,[1,8],2,\"recoil\"],[0,[],0,\" -> Designed to solve a specific problem. Not good for all use-cases. Understand it first! You can learn more about it \"],[0,[9],1,\"here\"],[0,[],0,\".\"]],[[0,[1,10],2,\"mobx\"],[0,[],0,\" -> Follows observer pattern. Good for reactive programming. Shouldn’t be used in any new project.\"]]]],[1,\"h1\",[[0,[],0,\"2. Server State Management\"]]],[1,\"p\",[[0,[],0,\"If your application heavily relies on some external data source, then managing that data (caching, pre-fetching, etc) can be crucial for performance.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"I am personally a huge fan of \"],[0,[1],1,\"react-query\"],[0,[],0,\" and there are many others like me. It just works like magic.\"]]],[3,\"ul\",[[[0,[1,11],2,\"react-query\"]]]],[1,\"p\",[[0,[],0,\"It handles \"],[0,[1],1,\"caching\"],[0,[],0,\" stale data, and many more things out of the box. It’s simple, powerful, and configurable!\"]]],[1,\"h2\",[[0,[],0,\"Alternative\"]]],[1,\"p\",[[0,[],0,\"There is another player in the game named \"],[0,[1,0,0],3,\"SWR\"],[0,[],0,\". This is a similar library to React Query.\"]]],[3,\"ul\",[[[0,[1,12],2,\"SWR\"]]]],[1,\"p\",[[0,[],0,\"The main benefit of this library is that it is built by Vercel. They are the same people who created NextJS. So you can expect better performance when using \"],[0,[0,0],2,\"NextJS.\"]]],[1,\"h1\",[[0,[],0,\"3. Scaffolding\"]]],[1,\"p\",[[0,[13],1,\"Creating a React app from scratch\"],[0,[],0,\" is complex. Setting up \"],[0,[1],1,\"Webpack\"],[0,[],0,\", \"],[0,[1],1,\"Bable\"],[0,[],0,\", etc can be daunting!\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[1,14],2,\"NextJS\"],[0,[],0,\" is the choice for me when creating a React application from scratch. It is called the full-stack React framework.\"]]],[3,\"ul\",[[[0,[1,15],2,\"NextJS\"]]]],[1,\"p\",[[0,[],0,\"In the documentation, it says,\"]]],[1,\"blockquote\",[[0,[16,16],2,\"Next.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.\"]]],[1,\"p\",[[0,[],0,\"The most important feature of this is its out-of-the-box SEO support. Which is great! You can do \"],[0,[1,17],2,\"SEO in React\"],[0,[],0,\" as well. But it’s not straightforward like Next.\"]]],[1,\"h2\",[[0,[],0,\"Alternative\"]]],[1,\"p\",[[0,[],0,\"If you are starting with React or building some basic project, then you have other options.\"]]],[3,\"ul\",[[[0,[1,18],2,\"create-react-app\"],[0,[],0,\" -> Building a single-page application. Good for beginners.\"]],[[0,[1,19],2,\"gatsby\"],[0,[],0,\" -> Building static content-oriented website. Not good for other use-cases.\"]]]],[1,\"h1\",[[0,[],0,\"4. Form Handling\"]]],[1,\"p\",[[0,[],0,\"90% of the web applications have some kind of form. And handling form inputs are a great pain. But we have some good news!\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[0,0],2,\"React hook form\"],[0,[],0,\" is the latest and greatest (according to me :P ) library for form handling. It’s really performant and flexible.\"]]],[3,\"ul\",[[[0,[1,20],2,\"react-hook-form\"]]]],[1,\"p\",[[0,[],0,\"It has some good support with some external design libraries like \"],[0,[1],1,\"material-ui\"],[0,[],0,\" and \"],[0,[1],1,\"ant-design\"],[0,[],0,\" as well.\"]]],[1,\"h2\",[[0,[],0,\"How to Use React Hook Form with TypeScript\"]]],[1,\"h3\",[[0,[],0,\"Build Performant and Clean Forms for Your Application\"]]],[1,\"p\",[[0,[],0,\"javascript.plainenglish.io\"]]],[1,\"h2\",[[0,[],0,\"Alternatives\"]]],[1,\"p\",[[0,[],0,\"There are some good alternatives for this field.\"]]],[3,\"ul\",[[[0,[1,21],2,\"Formik\"],[0,[],0,\" -> Formik comes with battle-tested solutions for input validation, formatting, masking, arrays, and error handling.\"]],[[0,[1],1,\"redux-form\"],[0,[],0,\" -> Don’t use it. It can really hurt the performance.\"]]]],[1,\"h1\",[[0,[],0,\"5. HTTP Call\"]]],[1,\"p\",[[0,[],0,\"In the modern world, almost all websites rely on some external data source. So making HTTP calls are very trivial.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"Fetch is the recommended way to make HTTP calls.\"]]],[3,\"ul\",[[[0,[1,22],2,\"fetch\"]]]],[1,\"p\",[[0,[],0,\"It has limited but powerful features. It can support 95% of your workload.\"]]],[1,\"h2\",[[0,[],0,\"Alternative\"]]],[1,\"p\",[[0,[0,0],2,\"Axios\"],[0,[],0,\" is an improvement over fetch. It’s very popular.\"]]],[3,\"ul\",[[[0,[1,23],2,\"axios\"]]]],[1,\"p\",[[0,[],0,\"It has some nice features like built-in XSRF protection and automatic JSON conversion and the ability to intercept HTTP calls. If you need that, you should go for it.\"]]],[1,\"h1\",[[0,[],0,\"6. Styling\"]]],[1,\"p\",[[0,[],0,\"You are going to need styling. There is no doubt about that. There are multiple ways to style your application.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"Many may not agree with me. But I think styled-components are the best choice when it comes to styling in React applications.\"]]],[3,\"ul\",[[[0,[1,24],2,\"styled-components\"]]]],[1,\"p\",[[0,[],0,\"It helps to create clean components with a clear separation of concerns. Also, it’s easily manageable and configurable through props.\"]]],[1,\"h2\",[[0,[],0,\"Alternatives\"]]],[1,\"p\",[[0,[],0,\"However, as I said, there are other great alternatives!\"]]],[3,\"ul\",[[[0,[1,25],2,\"plain old css\"],[0,[],0,\" -> Supported out-of-the-box. Should be fine for smaller projects.\"]],[[0,[1,26],2,\"sass\"],[0,[],0,\" -> An improvement over CSS. It provides nice features for managing CSS. good for mid-sized or even larger projects.\"]],[[0,[1,27],2,\"styled-jsx\"],[0,[],0,\" -> A library with a lot of similar features like \"],[0,[1],1,\"styled-components\"],[0,[],0,\". Has some extra features here and there.\"]]]],[1,\"h1\",[[0,[],0,\"7. UI Library\"]]],[1,\"p\",[[0,[],0,\"In many cases designing all the components by hand may not be a good idea. In those cases using some kind of UI library might be a good idea.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"The most versatile and configurable UI library for me is the Material UI.\"]]],[3,\"ul\",[[[0,[1,28],2,\"material-ui\"]]]],[1,\"p\",[[0,[],0,\"It’s very popular and used by many companies. It's highly configurable which is why it’s so powerful.\"]]],[1,\"h2\",[[0,[],0,\"Alternatives\"]]],[1,\"p\",[[0,[],0,\"There are some good alternatives to check out as well.\"]]],[3,\"ul\",[[[0,[1,29],2,\"semantic-ui\"],[0,[],0,\" -> Many built-in components.\"]],[[0,[1,30],2,\"ant-design\"],[0,[],0,\" -> Less configurable. Limited but nice components.\"]],[[0,[1,31],2,\"chakra-ui\"],[0,[],0,\" -> Recently gaining popularity.\"]]]],[1,\"h1\",[[0,[],0,\"8. Documentation\"]]],[1,\"p\",[[0,[],0,\"Good documentation can save 100s of hours in the future. So be proactive and adopt a documentation library very early in the project.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"The recommended way to create documentation is React StyleGuidist.\"]]],[3,\"ul\",[[[0,[1,32],2,\"react-styleguidist\"]]]],[1,\"p\",[[0,[],0,\"It's easy to use and really powerful.\"]]],[1,\"h2\",[[0,[],0,\"Document Your React Applications The Right Way\"]]],[1,\"h3\",[[0,[],0,\"Step by Step Introduction Guide\"]]],[1,\"p\",[[0,[],0,\"javascript.plainenglish.io\"]]],[1,\"h2\",[[0,[],0,\"Alternatives\"]]],[1,\"p\",[[0,[],0,\"There are some other alternatives too.\"]]],[3,\"ul\",[[[0,[1,33],2,\"js-docs\"],[0,[],0,\" -> General documentation tool for javascript.\"]],[[0,[1,34],2,\"react-docz\"],[0,[],0,\" -> Very easy to use documentation guide. Worth a shot.\"]]]],[1,\"h1\",[[0,[],0,\"9. Multi-Language Support\"]]],[1,\"p\",[[0,[],0,\"If you are building a product on a global, scale then you would probably like to add multiple language support in your React application.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[0,0],2,\"React i18next\"],[0,[],0,\" is the de-facto option for \"],[0,[35],1,\"implementing multi-language support in React applications\"],[0,[],0,\".\"]]],[3,\"ul\",[[[0,[1,36],2,\"react-i18next\"]],[[0,[1,37],2,\"i18next\"]]]],[1,\"h2\",[[0,[],0,\"Alternatives\"]]],[1,\"p\",[[0,[],0,\"There are some other good alternatives as well.\"]]],[3,\"ul\",[[[0,[1,38],2,\"react-intl\"]]]],[1,\"p\",[[0,[],0,\"This also has support for other libraries like VueJS and Angular as well.\"]]],[1,\"h2\",[[0,[],0,\"Implement multi-language Support in React\"]]],[1,\"h3\",[[0,[],0,\"In 6 easy steps\"]]],[1,\"p\",[[0,[],0,\"javascript.plainenglish.io\"]]],[1,\"h1\",[[0,[],0,\"10. Animation\"]]],[1,\"p\",[[0,[],0,\"Animations bring your application to life. There are some good options to use animation in React.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"Plain CSS is the best way to animate a React application. It’s simple and fast. Also, this is more performant.\"]]],[3,\"ul\",[[[0,[1,39],2,\"Plain CSS Animations\"]]]],[1,\"h2\",[[0,[],0,\"Alternatives\"]]],[1,\"p\",[[0,[],0,\"If you want something that is ready-to-use then here are some recommendations for you\"]]],[3,\"ul\",[[[0,[1,40],2,\"framer-motion\"],[0,[],0,\" -> Production-ready animation\"]],[[0,[1,41],2,\"react-awesome-reveal\"],[0,[],0,\" -> This is used for simple animations to reveal a component\"]],[[0,[1,42],2,\"react-spring\"],[0,[],0,\" -> Another great and ready-to-use library.\"]]]],[1,\"h1\",[[0,[],0,\"11. Long List Render\"]]],[1,\"p\",[[0,[],0,\"Rendering a long list can hurt the performance of an application really badly. Using a library in this scenario can be a good idea.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"If you have some kind of infinite-scrolling application then you should consider \"],[0,[0,0],2,\"React Window\"]]],[3,\"ul\",[[[0,[1,43],2,\"react-window\"]]]],[1,\"h2\",[[0,[],0,\"Alternative\"]]],[1,\"p\",[[0,[],0,\"If you don’t need an infinite scrolling list then you can just paginate the data\"]]],[3,\"ul\",[[[0,[1,44],2,\"react-paginate\"]]]],[1,\"h2\",[[0,[],0,\"How To Improve Rendering Performance in a 1,000-Item React List\"]]],[1,\"h3\",[[0,[],0,\"Let’s ensure that our web apps scroll efficiently\"]]],[1,\"p\",[[0,[],0,\"betterprogramming.pub\"]]],[1,\"h1\",[[0,[],0,\"12. Code Quality Tool\"]]],[1,\"p\",[[0,[],0,\"Linters can find any error in your code statically. It’s a good idea to use some kind of linter.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"The go-to solution is Eslint\"]]],[3,\"ul\",[[[0,[1,45],2,\"eslint\"]]]],[1,\"h2\",[[0,[],0,\"Alternative\"]]],[3,\"ul\",[[[0,[1,46],2,\"jshint\"],[0,[],0,\" -> Old library\"]],[[0,[1,47],2,\"tslint\"],[0,[],0,\" -> Linter for typescript. Not recommended now.\"]]]],[1,\"h2\",[[0,[],0,\"How to Add Linting and Formatting for your React App\"]]],[1,\"h3\",[[0,[],0,\"Get this right, otherwise your code will have problems\"]]],[1,\"p\",[[0,[],0,\"javascript.plainenglish.io\"]]],[1,\"h1\",[[0,[],0,\"13. Formatting\"]]],[1,\"p\",[[0,[],0,\"Having consistent visual styling is very important for any application and code-formatter can do that job for you!\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[3,\"ul\",[[[0,[1,48],2,\"Prettier\"]]]],[1,\"p\",[[0,[],0,\"This is the greatest solution for you. You don’t need anything else!\"]]],[1,\"h1\",[[0,[],0,\"14. Analytics\"]]],[1,\"p\",[[0,[],0,\"Data is the future. Most businesses today are data-driven. So having a good analytics tool for your application is very very important!\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"The most popular and powerful tool for the job is React Ga.\"]]],[3,\"ul\",[[[0,[49],1,\"react-ga\"]]]],[1,\"p\",[[0,[],0,\"I don’t think you will need anything else.\"]]],[1,\"h2\",[[0,[],0,\"How to Setup and Add Google Analytics to your React App\"]]],[1,\"h3\",[[0,[],0,\"Google has made it really easy to gain insights into your web application\"]]],[1,\"p\",[[0,[],0,\"javascript.plainenglish.io\"]]],[1,\"h1\",[[0,[],0,\"15. Testing\"]]],[1,\"p\",[[0,[],0,\"I don’t need to reiterate how important testing is for any application. So here you go.\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"The recommended way to go is React Testing Library\"]]],[3,\"ul\",[[[0,[50],1,\"react-testing-library\"]]]],[1,\"p\",[[0,[],0,\"It is very easy to use and designed to follow real-life use.\"]]],[1,\"h2\",[[0,[],0,\"Alternatives\"]]],[3,\"ul\",[[[0,[1,51],2,\"jest\"],[0,[],0,\" -> For unit tests\"]],[[0,[1,52],2,\"cypress\"],[0,[],0,\" -> For end-to-end test\"]]]],[1,\"h2\",[[0,[],0,\"Everything You Need to Get Started With Testing in React\"]]],[1,\"h3\",[[0,[],0,\"A gentle introduction for beginners\"]]],[1,\"p\",[[0,[],0,\"betterprogramming.pub\"]]],[1,\"h1\",[[0,[],0,\"16. Building sharable components\"]]],[1,\"p\",[[0,[],0,\"If you are in a large team then sharing components easily can become a great concern!\"]]],[1,\"h2\",[[0,[],0,\"Recommended\"]]],[1,\"p\",[[0,[],0,\"Storybook is the way to go if you are looking for the most complete solution\"]]],[3,\"ul\",[[[0,[53],1,\"Storybook\"]]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"\"]]],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p></p><h1 id=\"1-global-state-management\">1. Global State Management</h1><p>Sharing state between components is mandatory in 99% of the applications. And there are some good solutions — both native and external.</p><h2 id=\"recommended\">Recommended</h2><p>If you ask me for one solution, I will say <strong><strong>Redux</strong></strong>. Not because it’s the best but because it’s the most practical one. Many companies already use it and you will have to use it at some point.</p><ul><li><code><a href=\"https://redux.js.org/\" rel=\"noopener ugc nofollow\">redux</a></code> with <code><a href=\"https://react-redux.js.org/\" rel=\"noopener ugc nofollow\">react-redux</a></code></li></ul><p>Also, the ecosystem is great as well. You can find a solution to almost any problem. Some great libraries that go with redux are:</p><ul><li><code><a href=\"https://github.com/reduxjs/redux-thunk\" rel=\"noopener ugc nofollow\">redux-thunk</a></code> -&gt; For handling asynchronous action.</li><li><code><a href=\"https://github.com/rt2zz/redux-persist\" rel=\"noopener ugc nofollow\">redux-persist</a></code> -&gt; For storing data locally (offline support).</li><li><code><a href=\"https://github.com/reduxjs/reselect\" rel=\"noopener ugc nofollow\">reselect</a></code> -&gt; For making faster queries to store.</li></ul><h2 id=\"alternatives\">Alternatives</h2><ul><li><code><a href=\"https://reactjs.org/docs/context.html\" rel=\"noopener ugc nofollow\">context</a></code> -&gt; Built in to React. Good for simple use. Not good for performance. Especially if you have huge changing data.</li><li><code><a href=\"https://recoiljs.org/\" rel=\"noopener ugc nofollow\">recoil</a></code> -&gt; Designed to solve a specific problem. Not good for all use-cases. Understand it first! You can learn more about it <a href=\"https://javascript.plainenglish.io/state-management-in-react-with-recoil-984cfc1fcd63\" rel=\"noopener ugc nofollow\">here</a>.</li><li><code><a href=\"https://mobx.js.org/README.html\" rel=\"noopener ugc nofollow\">mobx</a></code> -&gt; Follows observer pattern. Good for reactive programming. Shouldn’t be used in any new project.</li></ul><h1 id=\"2-server-state-management\">2. Server State Management</h1><p>If your application heavily relies on some external data source, then managing that data (caching, pre-fetching, etc) can be crucial for performance.</p><h2 id=\"recommended-1\">Recommended</h2><p>I am personally a huge fan of <code>react-query</code> and there are many others like me. It just works like magic.</p><ul><li><code><a href=\"https://react-query.tanstack.com/\" rel=\"noopener ugc nofollow\">react-query</a></code></li></ul><p>It handles <code>caching</code> stale data, and many more things out of the box. It’s simple, powerful, and configurable!</p><h2 id=\"alternative\">Alternative</h2><p>There is another player in the game named <code><strong><strong>SWR</strong></strong></code>. This is a similar library to React Query.</p><ul><li><code><a href=\"https://swr.vercel.app/\" rel=\"noopener ugc nofollow\">SWR</a></code></li></ul><p>The main benefit of this library is that it is built by Vercel. They are the same people who created NextJS. So you can expect better performance when using <strong><strong>NextJS.</strong></strong></p><h1 id=\"3-scaffolding\">3. Scaffolding</h1><p><a href=\"https://betterprogramming.pub/complete-guideline-to-creating-a-modern-react-app-with-typescript-from-scratch-cebbb5817d8\" rel=\"noopener ugc nofollow\">Creating a React app from scratch</a> is complex. Setting up <code>Webpack</code>, <code>Bable</code>, etc can be daunting!</p><h2 id=\"recommended-2\">Recommended</h2><p><code><a href=\"https://javascript.plainenglish.io/start-your-journey-with-next-js-958705cfc299\" rel=\"noopener ugc nofollow\">NextJS</a></code> is the choice for me when creating a React application from scratch. It is called the full-stack React framework.</p><ul><li><code><a href=\"https://nextjs.org/\" rel=\"noopener ugc nofollow\">NextJS</a></code></li></ul><p>In the documentation, it says,</p><blockquote><em><em>Next.js gives you the best developer experience with all the features you need for production: hybrid static &amp; server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.</em></em></blockquote><p>The most important feature of this is its out-of-the-box SEO support. Which is great! You can do <code><a href=\"https://javascript.plainenglish.io/3-easy-ways-to-solve-seo-problems-in-react-applications-d3d7873dc494\" rel=\"noopener ugc nofollow\">SEO in React</a></code> as well. But it’s not straightforward like Next.</p><h2 id=\"alternative-1\">Alternative</h2><p>If you are starting with React or building some basic project, then you have other options.</p><ul><li><code><a href=\"https://github.com/facebook/create-react-app\" rel=\"noopener ugc nofollow\">create-react-app</a></code> -&gt; Building a single-page application. Good for beginners.</li><li><code><a href=\"https://www.gatsbyjs.org/\" rel=\"noopener ugc nofollow\">gatsby</a></code> -&gt; Building static content-oriented website. Not good for other use-cases.</li></ul><h1 id=\"4-form-handling\">4. Form Handling</h1><p>90% of the web applications have some kind of form. And handling form inputs are a great pain. But we have some good news!</p><h2 id=\"recommended-3\">Recommended</h2><p><strong><strong>React hook form</strong></strong> is the latest and greatest (according to me :P ) library for form handling. It’s really performant and flexible.</p><ul><li><code><a href=\"https://react-hook-form.com/\" rel=\"noopener ugc nofollow\">react-hook-form</a></code></li></ul><p>It has some good support with some external design libraries like <code>material-ui</code> and <code>ant-design</code> as well.</p><h2 id=\"how-to-use-react-hook-form-with-typescript\">How to Use React Hook Form with TypeScript</h2><h3 id=\"build-performant-and-clean-forms-for-your-application\">Build Performant and Clean Forms for Your Application</h3><p>javascript.plainenglish.io</p><h2 id=\"alternatives-1\">Alternatives</h2><p>There are some good alternatives for this field.</p><ul><li><code><a href=\"https://formik.org/\" rel=\"noopener ugc nofollow\">Formik</a></code> -&gt; Formik comes with battle-tested solutions for input validation, formatting, masking, arrays, and error handling.</li><li><code>redux-form</code> -&gt; Don’t use it. It can really hurt the performance.</li></ul><h1 id=\"5-http-call\">5. HTTP Call</h1><p>In the modern world, almost all websites rely on some external data source. So making HTTP calls are very trivial.</p><h2 id=\"recommended-4\">Recommended</h2><p>Fetch is the recommended way to make HTTP calls.</p><ul><li><code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\" rel=\"noopener ugc nofollow\">fetch</a></code></li></ul><p>It has limited but powerful features. It can support 95% of your workload.</p><h2 id=\"alternative-2\">Alternative</h2><p><strong><strong>Axios</strong></strong> is an improvement over fetch. It’s very popular.</p><ul><li><code><a href=\"https://www.npmjs.com/package/axios\" rel=\"noopener ugc nofollow\">axios</a></code></li></ul><p>It has some nice features like built-in XSRF protection and automatic JSON conversion and the ability to intercept HTTP calls. If you need that, you should go for it.</p><h1 id=\"6-styling\">6. Styling</h1><p>You are going to need styling. There is no doubt about that. There are multiple ways to style your application.</p><h2 id=\"recommended-5\">Recommended</h2><p>Many may not agree with me. But I think styled-components are the best choice when it comes to styling in React applications.</p><ul><li><code><a href=\"https://styled-components.com/\" rel=\"noopener ugc nofollow\">styled-components</a></code></li></ul><p>It helps to create clean components with a clear separation of concerns. Also, it’s easily manageable and configurable through props.</p><h2 id=\"alternatives-2\">Alternatives</h2><p>However, as I said, there are other great alternatives!</p><ul><li><code><a href=\"https://www.w3.org/Style/CSS/Overview.en.html\" rel=\"noopener ugc nofollow\">plain old css</a></code> -&gt; Supported out-of-the-box. Should be fine for smaller projects.</li><li><code><a href=\"https://sass-lang.com/\" rel=\"noopener ugc nofollow\">sass</a></code> -&gt; An improvement over CSS. It provides nice features for managing CSS. good for mid-sized or even larger projects.</li><li><code><a href=\"https://github.com/vercel/styled-jsx\" rel=\"noopener ugc nofollow\">styled-jsx</a></code> -&gt; A library with a lot of similar features like <code>styled-components</code>. Has some extra features here and there.</li></ul><h1 id=\"7-ui-library\">7. UI Library</h1><p>In many cases designing all the components by hand may not be a good idea. In those cases using some kind of UI library might be a good idea.</p><h2 id=\"recommended-6\">Recommended</h2><p>The most versatile and configurable UI library for me is the Material UI.</p><ul><li><code><a href=\"https://material-ui.com/\" rel=\"noopener ugc nofollow\">material-ui</a></code></li></ul><p>It’s very popular and used by many companies. It's highly configurable which is why it’s so powerful.</p><h2 id=\"alternatives-3\">Alternatives</h2><p>There are some good alternatives to check out as well.</p><ul><li><code><a href=\"https://semantic-ui.com/\" rel=\"noopener ugc nofollow\">semantic-ui</a></code> -&gt; Many built-in components.</li><li><code><a href=\"https://ant.design/\" rel=\"noopener ugc nofollow\">ant-design</a></code> -&gt; Less configurable. Limited but nice components.</li><li><code><a href=\"https://chakra-ui.com/\" rel=\"noopener ugc nofollow\">chakra-ui</a></code> -&gt; Recently gaining popularity.</li></ul><h1 id=\"8-documentation\">8. Documentation</h1><p>Good documentation can save 100s of hours in the future. So be proactive and adopt a documentation library very early in the project.</p><h2 id=\"recommended-7\">Recommended</h2><p>The recommended way to create documentation is React StyleGuidist.</p><ul><li><code><a href=\"https://react-styleguidist.js.org/\" rel=\"noopener ugc nofollow\">react-styleguidist</a></code></li></ul><p>It's easy to use and really powerful.</p><h2 id=\"document-your-react-applications-the-right-way\">Document Your React Applications The Right Way</h2><h3 id=\"step-by-step-introduction-guide\">Step by Step Introduction Guide</h3><p>javascript.plainenglish.io</p><h2 id=\"alternatives-4\">Alternatives</h2><p>There are some other alternatives too.</p><ul><li><code><a href=\"https://jsdoc.app/index.html\" rel=\"noopener ugc nofollow\">js-docs</a></code> -&gt; General documentation tool for javascript.</li><li><code><a href=\"https://www.docz.site/\" rel=\"noopener ugc nofollow\">react-docz</a></code> -&gt; Very easy to use documentation guide. Worth a shot.</li></ul><h1 id=\"9-multi-language-support\">9. Multi-Language Support</h1><p>If you are building a product on a global, scale then you would probably like to add multiple language support in your React application.</p><h2 id=\"recommended-8\">Recommended</h2><p><strong><strong>React i18next</strong></strong> is the de-facto option for <a href=\"https://javascript.plainenglish.io/implement-multi-language-support-in-react-9854c52ddb55\" rel=\"noopener ugc nofollow\">implementing multi-language support in React applications</a>.</p><ul><li><code><a href=\"https://react.i18next.com/\" rel=\"noopener ugc nofollow\">react-i18next</a></code></li><li><code><a href=\"https://www.npmjs.com/package/i18next\" rel=\"noopener ugc nofollow\">i18next</a></code></li></ul><h2 id=\"alternatives-5\">Alternatives</h2><p>There are some other good alternatives as well.</p><ul><li><code><a href=\"https://www.npmjs.com/package/react-intl\" rel=\"noopener ugc nofollow\">react-intl</a></code></li></ul><p>This also has support for other libraries like VueJS and Angular as well.</p><h2 id=\"implement-multi-language-support-in-react\">Implement multi-language Support in React</h2><h3 id=\"in-6-easy-steps\">In 6 easy steps</h3><p>javascript.plainenglish.io</p><h1 id=\"10-animation\">10. Animation</h1><p>Animations bring your application to life. There are some good options to use animation in React.</p><h2 id=\"recommended-9\">Recommended</h2><p>Plain CSS is the best way to animate a React application. It’s simple and fast. Also, this is more performant.</p><ul><li><code><a href=\"https://www.w3schools.com/css/css3_animations.asp\" rel=\"noopener ugc nofollow\">Plain CSS Animations</a></code></li></ul><h2 id=\"alternatives-6\">Alternatives</h2><p>If you want something that is ready-to-use then here are some recommendations for you</p><ul><li><code><a href=\"https://www.framer.com/motion/\" rel=\"noopener ugc nofollow\">framer-motion</a></code> -&gt; Production-ready animation</li><li><code><a href=\"https://www.npmjs.com/package/react-awesome-reveal\" rel=\"noopener ugc nofollow\">react-awesome-reveal</a></code> -&gt; This is used for simple animations to reveal a component</li><li><code><a href=\"https://react-spring.io/\" rel=\"noopener ugc nofollow\">react-spring</a></code> -&gt; Another great and ready-to-use library.</li></ul><h1 id=\"11-long-list-render\">11. Long List Render</h1><p>Rendering a long list can hurt the performance of an application really badly. Using a library in this scenario can be a good idea.</p><h2 id=\"recommended-10\">Recommended</h2><p>If you have some kind of infinite-scrolling application then you should consider <strong><strong>React Window</strong></strong></p><ul><li><code><a href=\"https://react-window.vercel.app/\" rel=\"noopener ugc nofollow\">react-window</a></code></li></ul><h2 id=\"alternative-3\">Alternative</h2><p>If you don’t need an infinite scrolling list then you can just paginate the data</p><ul><li><code><a href=\"https://www.npmjs.com/package/react-paginate\" rel=\"noopener ugc nofollow\">react-paginate</a></code></li></ul><h2 id=\"how-to-improve-rendering-performance-in-a-1000-item-react-list\">How To Improve Rendering Performance in a 1,000-Item React List</h2><h3 id=\"let%E2%80%99s-ensure-that-our-web-apps-scroll-efficiently\">Let’s ensure that our web apps scroll efficiently</h3><p>betterprogramming.pub</p><h1 id=\"12-code-quality-tool\">12. Code Quality Tool</h1><p>Linters can find any error in your code statically. It’s a good idea to use some kind of linter.</p><h2 id=\"recommended-11\">Recommended</h2><p>The go-to solution is Eslint</p><ul><li><code><a href=\"https://eslint.org/\" rel=\"noopener ugc nofollow\">eslint</a></code></li></ul><h2 id=\"alternative-4\">Alternative</h2><ul><li><code><a href=\"https://jshint.com/\" rel=\"noopener ugc nofollow\">jshint</a></code> -&gt; Old library</li><li><code><a href=\"https://palantir.github.io/tslint/\" rel=\"noopener ugc nofollow\">tslint</a></code> -&gt; Linter for typescript. Not recommended now.</li></ul><h2 id=\"how-to-add-linting-and-formatting-for-your-react-app\">How to Add Linting and Formatting for your React App</h2><h3 id=\"get-this-right-otherwise-your-code-will-have-problems\">Get this right, otherwise your code will have problems</h3><p>javascript.plainenglish.io</p><h1 id=\"13-formatting\">13. Formatting</h1><p>Having consistent visual styling is very important for any application and code-formatter can do that job for you!</p><h2 id=\"recommended-12\">Recommended</h2><ul><li><code><a href=\"https://prettier.io/\" rel=\"noopener ugc nofollow\">Prettier</a></code></li></ul><p>This is the greatest solution for you. You don’t need anything else!</p><h1 id=\"14-analytics\">14. Analytics</h1><p>Data is the future. Most businesses today are data-driven. So having a good analytics tool for your application is very very important!</p><h2 id=\"recommended-13\">Recommended</h2><p>The most popular and powerful tool for the job is React Ga.</p><ul><li><a href=\"https://github.com/react-ga/react-ga\" rel=\"noopener ugc nofollow\">react-ga</a></li></ul><p>I don’t think you will need anything else.</p><h2 id=\"how-to-setup-and-add-google-analytics-to-your-react-app\">How to Setup and Add Google Analytics to your React App</h2><h3 id=\"google-has-made-it-really-easy-to-gain-insights-into-your-web-application\">Google has made it really easy to gain insights into your web application</h3><p>javascript.plainenglish.io</p><h1 id=\"15-testing\">15. Testing</h1><p>I don’t need to reiterate how important testing is for any application. So here you go.</p><h2 id=\"recommended-14\">Recommended</h2><p>The recommended way to go is React Testing Library</p><ul><li><a href=\"https://testing-library.com/docs/react-testing-library/intro/\" rel=\"noopener ugc nofollow\">react-testing-library</a></li></ul><p>It is very easy to use and designed to follow real-life use.</p><h2 id=\"alternatives-7\">Alternatives</h2><ul><li><code><a href=\"https://jestjs.io/\" rel=\"noopener ugc nofollow\">jest</a></code> -&gt; For unit tests</li><li><code><a href=\"https://www.cypress.io/\" rel=\"noopener ugc nofollow\">cypress</a></code> -&gt; For end-to-end test</li></ul><h2 id=\"everything-you-need-to-get-started-with-testing-in-react\">Everything You Need to Get Started With Testing in React</h2><h3 id=\"a-gentle-introduction-for-beginners\">A gentle introduction for beginners</h3><p>betterprogramming.pub</p><h1 id=\"16-building-sharable-components\">16. Building sharable components</h1><p>If you are in a large team then sharing components easily can become a great concern!</p><h2 id=\"recommended-15\">Recommended</h2><p>Storybook is the way to go if you are looking for the most complete solution</p><ul><li><a href=\"https://storybook.js.org/\" rel=\"noopener ugc nofollow\">Storybook</a></li></ul><p><br></p>","comment_id":"61555db8ce2018003b838a60","plaintext":"\n\n1. Global State Management\nSharing state between components is mandatory in 99% of the applications. And\nthere are some good solutions — both native and external.\n\nRecommended\nIf you ask me for one solution, I will say Redux. Not because it’s the best but\nbecause it’s the most practical one. Many companies already use it and you will\nhave to use it at some point.\n\n * redux [https://redux.js.org/] with react-redux [https://react-redux.js.org/]\n\nAlso, the ecosystem is great as well. You can find a solution to almost any\nproblem. Some great libraries that go with redux are:\n\n * redux-thunk [https://github.com/reduxjs/redux-thunk] -> For handling\n   asynchronous action.\n * redux-persist [https://github.com/rt2zz/redux-persist] -> For storing data\n   locally (offline support).\n * reselect [https://github.com/reduxjs/reselect] -> For making faster queries\n   to store.\n\nAlternatives\n * context [https://reactjs.org/docs/context.html] -> Built in to React. Good\n   for simple use. Not good for performance. Especially if you have huge\n   changing data.\n * recoil [https://recoiljs.org/] -> Designed to solve a specific problem. Not\n   good for all use-cases. Understand it first! You can learn more about it here\n   [https://javascript.plainenglish.io/state-management-in-react-with-recoil-984cfc1fcd63]\n   .\n * mobx [https://mobx.js.org/README.html] -> Follows observer pattern. Good for\n   reactive programming. Shouldn’t be used in any new project.\n\n2. Server State Management\nIf your application heavily relies on some external data source, then managing\nthat data (caching, pre-fetching, etc) can be crucial for performance.\n\nRecommended\nI am personally a huge fan of react-query and there are many others like me. It\njust works like magic.\n\n * react-query [https://react-query.tanstack.com/]\n\nIt handles caching stale data, and many more things out of the box. It’s simple,\npowerful, and configurable!\n\nAlternative\nThere is another player in the game named SWR. This is a similar library to\nReact Query.\n\n * SWR [https://swr.vercel.app/]\n\nThe main benefit of this library is that it is built by Vercel. They are the\nsame people who created NextJS. So you can expect better performance when using \nNextJS.\n\n3. Scaffolding\nCreating a React app from scratch\n[https://betterprogramming.pub/complete-guideline-to-creating-a-modern-react-app-with-typescript-from-scratch-cebbb5817d8] \nis complex. Setting up Webpack, Bable, etc can be daunting!\n\nRecommended\nNextJS\n[https://javascript.plainenglish.io/start-your-journey-with-next-js-958705cfc299] \nis the choice for me when creating a React application from scratch. It is\ncalled the full-stack React framework.\n\n * NextJS [https://nextjs.org/]\n\nIn the documentation, it says,\n\n> Next.js gives you the best developer experience with all the features you need\nfor production: hybrid static & server rendering, TypeScript support, smart\nbundling, route pre-fetching, and more. No config needed.\nThe most important feature of this is its out-of-the-box SEO support. Which is\ngreat! You can do SEO in React\n[https://javascript.plainenglish.io/3-easy-ways-to-solve-seo-problems-in-react-applications-d3d7873dc494] \nas well. But it’s not straightforward like Next.\n\nAlternative\nIf you are starting with React or building some basic project, then you have\nother options.\n\n * create-react-app [https://github.com/facebook/create-react-app] -> Building a\n   single-page application. Good for beginners.\n * gatsby [https://www.gatsbyjs.org/] -> Building static content-oriented\n   website. Not good for other use-cases.\n\n4. Form Handling\n90% of the web applications have some kind of form. And handling form inputs are\na great pain. But we have some good news!\n\nRecommended\nReact hook form is the latest and greatest (according to me :P ) library for\nform handling. It’s really performant and flexible.\n\n * react-hook-form [https://react-hook-form.com/]\n\nIt has some good support with some external design libraries like material-ui \nand ant-design as well.\n\nHow to Use React Hook Form with TypeScript\nBuild Performant and Clean Forms for Your Application\njavascript.plainenglish.io\n\nAlternatives\nThere are some good alternatives for this field.\n\n * Formik [https://formik.org/] -> Formik comes with battle-tested solutions for\n   input validation, formatting, masking, arrays, and error handling.\n * redux-form -> Don’t use it. It can really hurt the performance.\n\n5. HTTP Call\nIn the modern world, almost all websites rely on some external data source. So\nmaking HTTP calls are very trivial.\n\nRecommended\nFetch is the recommended way to make HTTP calls.\n\n * fetch [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API]\n\nIt has limited but powerful features. It can support 95% of your workload.\n\nAlternative\nAxios is an improvement over fetch. It’s very popular.\n\n * axios [https://www.npmjs.com/package/axios]\n\nIt has some nice features like built-in XSRF protection and automatic JSON\nconversion and the ability to intercept HTTP calls. If you need that, you should\ngo for it.\n\n6. Styling\nYou are going to need styling. There is no doubt about that. There are multiple\nways to style your application.\n\nRecommended\nMany may not agree with me. But I think styled-components are the best choice\nwhen it comes to styling in React applications.\n\n * styled-components [https://styled-components.com/]\n\nIt helps to create clean components with a clear separation of concerns. Also,\nit’s easily manageable and configurable through props.\n\nAlternatives\nHowever, as I said, there are other great alternatives!\n\n * plain old css [https://www.w3.org/Style/CSS/Overview.en.html] -> Supported\n   out-of-the-box. Should be fine for smaller projects.\n * sass [https://sass-lang.com/] -> An improvement over CSS. It provides nice\n   features for managing CSS. good for mid-sized or even larger projects.\n * styled-jsx [https://github.com/vercel/styled-jsx] -> A library with a lot of\n   similar features like styled-components. Has some extra features here and\n   there.\n\n7. UI Library\nIn many cases designing all the components by hand may not be a good idea. In\nthose cases using some kind of UI library might be a good idea.\n\nRecommended\nThe most versatile and configurable UI library for me is the Material UI.\n\n * material-ui [https://material-ui.com/]\n\nIt’s very popular and used by many companies. It's highly configurable which is\nwhy it’s so powerful.\n\nAlternatives\nThere are some good alternatives to check out as well.\n\n * semantic-ui [https://semantic-ui.com/] -> Many built-in components.\n * ant-design [https://ant.design/] -> Less configurable. Limited but nice\n   components.\n * chakra-ui [https://chakra-ui.com/] -> Recently gaining popularity.\n\n8. Documentation\nGood documentation can save 100s of hours in the future. So be proactive and\nadopt a documentation library very early in the project.\n\nRecommended\nThe recommended way to create documentation is React StyleGuidist.\n\n * react-styleguidist [https://react-styleguidist.js.org/]\n\nIt's easy to use and really powerful.\n\nDocument Your React Applications The Right Way\nStep by Step Introduction Guide\njavascript.plainenglish.io\n\nAlternatives\nThere are some other alternatives too.\n\n * js-docs [https://jsdoc.app/index.html] -> General documentation tool for\n   javascript.\n * react-docz [https://www.docz.site/] -> Very easy to use documentation guide.\n   Worth a shot.\n\n9. Multi-Language Support\nIf you are building a product on a global, scale then you would probably like to\nadd multiple language support in your React application.\n\nRecommended\nReact i18next is the de-facto option for implementing multi-language support in\nReact applications\n[https://javascript.plainenglish.io/implement-multi-language-support-in-react-9854c52ddb55]\n.\n\n * react-i18next [https://react.i18next.com/]\n * i18next [https://www.npmjs.com/package/i18next]\n\nAlternatives\nThere are some other good alternatives as well.\n\n * react-intl [https://www.npmjs.com/package/react-intl]\n\nThis also has support for other libraries like VueJS and Angular as well.\n\nImplement multi-language Support in React\nIn 6 easy steps\njavascript.plainenglish.io\n\n10. Animation\nAnimations bring your application to life. There are some good options to use\nanimation in React.\n\nRecommended\nPlain CSS is the best way to animate a React application. It’s simple and fast.\nAlso, this is more performant.\n\n * Plain CSS Animations [https://www.w3schools.com/css/css3_animations.asp]\n\nAlternatives\nIf you want something that is ready-to-use then here are some recommendations\nfor you\n\n * framer-motion [https://www.framer.com/motion/] -> Production-ready animation\n * react-awesome-reveal [https://www.npmjs.com/package/react-awesome-reveal] ->\n   This is used for simple animations to reveal a component\n * react-spring [https://react-spring.io/] -> Another great and ready-to-use\n   library.\n\n11. Long List Render\nRendering a long list can hurt the performance of an application really badly.\nUsing a library in this scenario can be a good idea.\n\nRecommended\nIf you have some kind of infinite-scrolling application then you should consider \nReact Window\n\n * react-window [https://react-window.vercel.app/]\n\nAlternative\nIf you don’t need an infinite scrolling list then you can just paginate the data\n\n * react-paginate [https://www.npmjs.com/package/react-paginate]\n\nHow To Improve Rendering Performance in a 1,000-Item React List\nLet’s ensure that our web apps scroll efficiently\nbetterprogramming.pub\n\n12. Code Quality Tool\nLinters can find any error in your code statically. It’s a good idea to use some\nkind of linter.\n\nRecommended\nThe go-to solution is Eslint\n\n * eslint [https://eslint.org/]\n\nAlternative\n * jshint [https://jshint.com/] -> Old library\n * tslint [https://palantir.github.io/tslint/] -> Linter for typescript. Not\n   recommended now.\n\nHow to Add Linting and Formatting for your React App\nGet this right, otherwise your code will have problems\njavascript.plainenglish.io\n\n13. Formatting\nHaving consistent visual styling is very important for any application and\ncode-formatter can do that job for you!\n\nRecommended\n * Prettier [https://prettier.io/]\n\nThis is the greatest solution for you. You don’t need anything else!\n\n14. Analytics\nData is the future. Most businesses today are data-driven. So having a good\nanalytics tool for your application is very very important!\n\nRecommended\nThe most popular and powerful tool for the job is React Ga.\n\n * react-ga [https://github.com/react-ga/react-ga]\n\nI don’t think you will need anything else.\n\nHow to Setup and Add Google Analytics to your React App\nGoogle has made it really easy to gain insights into your web application\njavascript.plainenglish.io\n\n15. Testing\nI don’t need to reiterate how important testing is for any application. So here\nyou go.\n\nRecommended\nThe recommended way to go is React Testing Library\n\n * react-testing-library\n   [https://testing-library.com/docs/react-testing-library/intro/]\n\nIt is very easy to use and designed to follow real-life use.\n\nAlternatives\n * jest [https://jestjs.io/] -> For unit tests\n * cypress [https://www.cypress.io/] -> For end-to-end test\n\nEverything You Need to Get Started With Testing in React\nA gentle introduction for beginners\nbetterprogramming.pub\n\n16. Building sharable components\nIf you are in a large team then sharing components easily can become a great\nconcern!\n\nRecommended\nStorybook is the way to go if you are looking for the most complete solution\n\n * Storybook [https://storybook.js.org/]","feature_image":null,"featured":1,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","author_id":"1","created_at":"2021-09-30T06:48:24.000Z","updated_at":"2021-09-30T06:58:19.000Z","published_at":"2021-09-30T06:48:52.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"615565fdce2018003b838a7d","uuid":"61f4e791-0496-477f-9b06-46782c3719a6","title":"Hi","slug":"hi","mobiledoc":"{\"version\":\"0.3.1\",\"ghostVersion\":\"4.0\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"615565fdce2018003b838a7d","plaintext":null,"feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-09-30T07:23:41.000Z","updated_at":"2021-09-30T07:23:45.000Z","published_at":"2021-09-30T07:23:45.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"6155661dce2018003b838a82","uuid":"13419902-d574-4be9-869b-5d783ae3ca56","title":"JavaScript  Arrow Functions","slug":"https-web-dev-collaborative-github-io-realtime-html-editor","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"image\",{\"src\":\"https://camo.githubusercontent.com/7834e7bef390ec2cf679af4ca7fd757bbd1dca2c9f6cad830657d88cc89a691c/68747470733a2f2f6d69726f2e6d656469756d2e636f6d2f6d61782f313437302f312a496e3439685754457a5a6a4f455a54514c37387554412e676966\",\"alt\":\"ZACH\",\"title\":\"\"}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}],[\"hr\",{}]],\"markups\":[[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/this\"]],[\"code\"],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/super\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Glossary/Method\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/new.target\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Glossary/Scope\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Glossary/Constructor\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/yield\"]],[\"strong\"],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"]],[\"a\",[\"href\",\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\"]],[\"a\",[\"href\",\"https://gist.github.com/bgoonz/javascript-function-type/\"]],[\"a\",[\"href\",\"https://gist.github.com/bgoonz/javascript-array-sort/\"]],[\"em\"],[\"a\",[\"href\",\"https://www.phptutorial.net/php-oop/php-this/\",\"rel\",\"nofollow\"]],[\"a\",[\"href\",\"https://gist.github.com/javascript-execution-context/\"]],[\"a\",[\"href\",\"https://gist.github.com/es-next/javascript-globalthis/\"]],[\"a\",[\"href\",\"https://gist.github.com/bgoonz/javascript-function/\"]],[\"a\",[\"href\",\"https://gist.github.com/javascript-this/#function_invocation\"]],[\"a\",[\"href\",\"https://gist.github.com/javascript-this/#method_invocation\"]],[\"a\",[\"href\",\"https://gist.github.com/javascript-this/#constructor_invocation\"]],[\"a\",[\"href\",\"https://gist.github.com/javascript-this/#indirect_invocation\"]],[\"a\",[\"href\",\"https://gist.github.com/bgoonz/es6/javascript-new-target/\"]],[\"a\",[\"href\",\"https://gist.github.com/javascript-functions-are-first-class-citizens/\"]],[\"a\",[\"href\",\"https://gist.github.com/bgoonz/es6/\"]],[\"a\",[\"href\",\"https://gist.github.com/bgoonz/es6/javascript-arrow-function/\"]],[\"a\",[\"href\",\"https://gist.github.com/javascript-anonymous-functions/\"]],[\"a\",[\"href\",\"https://gist.github.com/javascript-function/\"]],[\"a\",[\"href\",\"https://gist.github.com/javascript-callback/\"]],[\"a\",[\"href\",\"https://gist.github.com/javascript-closure/\"]]],\"sections\":[[1,\"h1\",[[0,[],0,\"Introduction to JavaScript arrow functions\"]]],[10,0],[10,1],[10,2],[10,3],[1,\"h1\",[[0,[],0,\"FROM MDN DOCS:\"]]],[1,\"p\",[[0,[],0,\"====>Arrow Functions<=======\"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"**Differences & Limitations:**\"]]],[3,\"ul\",[[[0,[],0,\"Does not have its own bindings to \"],[0,[0,1],2,\"this\"],[0,[],0,\" or \"],[0,[2,1],2,\"super\"],[0,[],0,\", and should not be used as \"],[0,[3,1],2,\"methods\"],[0,[],0,\".\"]],[[0,[],0,\"Does not have \"],[0,[4,1],2,\"new.target\"],[0,[],0,\" keyword.\"]],[[0,[],0,\"Not suitable for \"],[0,[5,1],2,\"call\"],[0,[],0,\", \"],[0,[6,1],2,\"apply\"],[0,[],0,\" and \"],[0,[7,1],2,\"bind\"],[0,[],0,\" methods, which generally rely on establishing a \"],[0,[8],1,\"scope\"],[0,[],0,\".\"]],[[0,[],0,\"Can not be used as \"],[0,[9],1,\"constructors\"],[0,[],0,\".\"]],[[0,[],0,\"Can not use \"],[0,[10,1],2,\"yield\"],[0,[],0,\", within its body.\"]]]],[1,\"p\",[]],[1,\"h3\",[[0,[],0,\"Comparing traditional functions to arrow functions\"]]],[1,\"p\",[[0,[],0,\"Let's decompose a \\\"traditional anonymous function\\\" down to the simplest \\\"arrow function\\\" step-by-step:\"]]],[1,\"blockquote\",[[0,[11],1,\"Note:\"],[0,[],0,\" Each step along the way is a valid \\\"arrow function\\\".// Traditional Anonymous Functionfunction (a){  return a + 100;} // Arrow Function Break Down // 1. Remove the word \\\"function\\\" and place arrow between the argument and opening body bracket(a) => {  return a + 100;} // 2. Remove the body braces and word \\\"return\\\" -- the return is implied.(a) => a + 100; // 3. Remove the argument parenthesesa => a + 100;\"]]],[1,\"blockquote\",[[0,[11],1,\"Note:\"],[0,[],0,\" As shown above, the { braces } and ( parentheses ) and \\\"return\\\" are required in some cases.\"]]],[1,\"p\",[[0,[],0,\"For example, if you have \"],[0,[11],1,\"multiple arguments\"],[0,[],0,\" or \"],[0,[11],1,\"no arguments\"],[0,[],0,\", you'll need to re-introduce parentheses around the arguments:// Traditional Anonymous Functionfunction (a, b){  return a + b + 100;} // Arrow Function(a, b) => a + b + 100; // Traditional Anonymous Function (no arguments)let a = 4;let b = 2;function (){  return a + b + 100;} // Arrow Function (no arguments)let a = 4;let b = 2;() => a + b + 100;\"]]],[1,\"p\",[[0,[],0,\"Likewise, if the body requires \"],[0,[11],1,\"additional lines\"],[0,[],0,\" of processing, you'll need to re-introduce braces \"],[0,[11],1,\"PLUS the \\\"return\\\"\"],[0,[],0,\" (arrow functions do not magically guess what or when you want to \\\"return\\\"):// Traditional Anonymous Functionfunction (a, b){  let chuck = 42;  return a + b + chuck;} // Arrow Function(a, b) => {  let chuck = 42;  return a + b + chuck;}\"]]],[1,\"p\",[[0,[],0,\"And finally, for \"],[0,[11],1,\"named functions\"],[0,[],0,\" we treat arrow expressions like variables:// Traditional Functionfunction bob (a){  return a + 100;} // Arrow Functionlet bob = a => a + 100;\"]]],[1,\"h2\",[[0,[],0,\"Syntax\"]]],[1,\"h3\",[[0,[],0,\"Basic syntax\"]]],[1,\"p\",[[0,[],0,\"One param. With simple expression return is not needed:param => expression\"]]],[1,\"p\",[[0,[],0,\"Multiple params require parentheses. With simple expression return is not needed:(param1, paramN) => expression\"]]],[1,\"p\",[[0,[],0,\"Multiline statements require body braces and return:param => {  let a = 1;  return a + param;}\"]]],[1,\"p\",[[0,[],0,\"Multiple params require parentheses. Multiline statements require body braces and return:(param1, paramN) => {   let a = 1;   return a + param1 + paramN;}\"]]],[1,\"h3\",[[0,[],0,\"Advanced syntax\"]]],[1,\"p\",[[0,[],0,\"To return an object literal expression requires parentheses around expression:params => ({foo: \\\"a\\\"}) // returning the object {foo: \\\"a\\\"}\"]]],[1,\"p\",[[0,[12],1,\"Rest parameters\"],[0,[],0,\" are supported:(a, b, ...r) => expression\"]]],[1,\"p\",[[0,[13],1,\"Default parameters\"],[0,[],0,\" are supported:(a=400, b=20, c) => expression\"]]],[1,\"p\",[[0,[14],1,\"Destructuring\"],[0,[],0,\" within params supported:([a, b] = [10, 20]) => a + b;  // result is 30({ a, b } = { a: 10, b: 20 }) => a + b; // result is 30\"]]],[1,\"h2\",[[0,[],0,\"Description\"]]],[1,\"h3\",[[0,[],0,\"Arrow functions used as methods\"]]],[1,\"p\",[[0,[],0,\"As stated previously, arrow function expressions are best suited for non-method functions. Let's see what happens when we try to use them as methods:'use strict'; var obj = { // does not create a new scope  i: 10,  b: () => console.log(this.i, this),  c: function() {    console.log(this.i, this);  }} obj.b(); // prints undefined, Window {...} (or the global object)obj.c(); // prints 10, Object {...}\"]]],[1,\"p\",[[0,[],0,\"Arrow functions do not have their own \"],[0,[1],1,\"this\"],[0,[],0,\". Another example involving {{jsxref(\\\"Object.defineProperty()\\\")}}:'use strict'; var obj = {  a: 10}; Object.defineProperty(obj, 'b', {  get: () => {    console.log(this.a, typeof this.a, this); // undefined 'undefined' Window {...} (or the global object)    return this.a + 10; // represents global object 'Window', therefore 'this.a' returns 'undefined'  }});\"]]],[1,\"h3\",[[0,[],0,\"call, apply and bind\"]]],[1,\"p\",[[0,[],0,\"The \"],[0,[5,1],2,\"call\"],[0,[],0,\", \"],[0,[6,1],2,\"apply\"],[0,[],0,\" and \"],[0,[7,1],1,\"bind\"],[0,[],1,\" \"],[0,[],0,\"methods are \"],[0,[11],1,\"NOT suitable\"],[0,[],0,\" for Arrow functions -- as they were designed to allow methods to execute within different scopes -- because \"],[0,[11],1,\"Arrow functions establish \\\"this\\\" based on the scope the Arrow function is defined within.\"]]],[1,\"p\",[[0,[],0,\"For example \"],[0,[5,1],2,\"call\"],[0,[],0,\", \"],[0,[6,1],2,\"apply\"],[0,[],0,\" and \"],[0,[7,1],1,\"bind\"],[0,[],1,\" \"],[0,[],0,\"work as expected with Traditional functions, because we establish the scope for each of the methods:// ----------------------// Traditional Example// ----------------------// A simplistic object with its very own \\\"this\\\".var obj = {    num: 100} // Setting \\\"num\\\" on window to show how it is NOT used.window.num = 2020; // yikes! // A simple traditional function to operate on \\\"this\\\"var add = function (a, b, c) {  return this.num + a + b + c;} // callvar result = add.call(obj, 1, 2, 3) // establishing the scope as \\\"obj\\\"console.log(result) // result 106 // applyconst arr = [1, 2, 3]var result = add.apply(obj, arr) // establishing the scope as \\\"obj\\\"console.log(result) // result 106 // bindvar result = add.bind(obj) // establishing the scope as \\\"obj\\\"console.log(result(1, 2, 3)) // result 106\"]]],[1,\"p\",[[0,[],0,\"With Arrow functions, since our \"],[0,[1],1,\"add\"],[0,[],0,\" function is essentially created on the \"],[0,[1],1,\"window\"],[0,[],0,\" (global) scope, it will assume \"],[0,[1],1,\"this\"],[0,[],0,\" is the window.// ----------------------// Arrow Example// ---------------------- // A simplistic object with its very own \\\"this\\\".var obj = {    num: 100} // Setting \\\"num\\\" on window to show how it gets picked up.window.num = 2020; // yikes! // Arrow Functionvar add = (a, b, c) => this.num + a + b + c; // callconsole.log(add.call(obj, 1, 2, 3)) // result 2026 // applyconst arr = [1, 2, 3]console.log(add.apply(obj, arr)) // result 2026 // bindconst bound = add.bind(obj)console.log(bound(1, 2, 3)) // result 2026\"]]],[1,\"p\",[[0,[],0,\"Perhaps the greatest benefit of using Arrow functions is with DOM-level methods (setTimeout, setInterval, addEventListener) that usually required some kind of closure, call, apply or bind to ensure the function executed in the proper scope.\"]]],[1,\"p\",[[0,[11],1,\"Traditional Example:\"],[0,[],0,\"var obj = {    count : 10,    doSomethingLater : function (){        setTimeout(function(){ // the function executes on the window scope            this.count++;            console.log(this.count);        }, 300);    }} obj.doSomethingLater(); // console prints \\\"NaN\\\", because the property \\\"count\\\" is not in the window scope.\"]]],[1,\"p\",[[0,[11],1,\"Arrow Example:\"],[0,[],0,\"var obj = {    count : 10,    doSomethingLater : function(){        // The traditional function binds \\\"this\\\" to the \\\"obj\\\" context.        setTimeout( () => {            // Since the arrow function doesn't have its own binding and            // setTimeout (as a function call) doesn't create a binding            // itself, the \\\"obj\\\" context of the traditional function will            // be used within.            this.count++;            console.log(this.count);        }, 300);    }} obj.doSomethingLater();\"]]],[1,\"h3\",[[0,[],0,\"No binding of \"],[0,[1],1,\"arguments\"]]],[1,\"p\",[[0,[],0,\"Arrow functions do not have their own \"],[0,[15,1],1,\"arguments\"],[0,[],1,\" object\"],[0,[],0,\". Thus, in this example, \"],[0,[1],1,\"arguments\"],[0,[],0,\" is a reference to the arguments of the enclosing scope:var arguments = [1, 2, 3];var arr = () => arguments[0]; arr(); // 1 function foo(n) {  var f = () => arguments[0] + n; // foo's implicit arguments binding. arguments[0] is n  return f();} foo(3); // 3 + 3 = 6\"]]],[1,\"p\",[[0,[],0,\"In most cases, using \"],[0,[12],1,\"rest parameters\"],[0,[],0,\" is a good alternative to using an \"],[0,[1],1,\"arguments\"],[0,[],0,\" object.function foo(n) {  var f = (...args) => args[0] + n;  return f(10);} foo(1); // 11\"]]],[1,\"h3\",[[0,[],0,\"Use of the \"],[0,[1],1,\"new\"],[0,[],0,\" operator\"]]],[1,\"p\",[[0,[],0,\"Arrow functions cannot be used as constructors and will throw an error when used with \"],[0,[1],1,\"new\"],[0,[],0,\".var Foo = () => {};var foo = new Foo(); // TypeError: Foo is not a constructor\"]]],[1,\"h3\",[[0,[],0,\"Use of \"],[0,[1],1,\"prototype\"],[0,[],0,\" property\"]]],[1,\"p\",[[0,[],0,\"Arrow functions do not have a \"],[0,[1],1,\"prototype\"],[0,[],0,\" property.var Foo = () => {};console.log(Foo.prototype); // undefined\"]]],[1,\"h3\",[[0,[],0,\"Use of the \"],[0,[1],1,\"yield\"],[0,[],0,\" keyword\"]]],[1,\"p\",[[0,[],0,\"The \"],[0,[10,1],2,\"yield\"],[0,[],0,\" keyword may not be used in an arrow function's body (except when permitted within functions further nested within it). As a consequence, arrow functions cannot be used as generators.\"]]],[1,\"h3\",[[0,[],0,\"Function body\"]]],[1,\"p\",[[0,[],0,\"Arrow functions can have either a \\\"concise body\\\" or the usual \\\"block body\\\".\"]]],[1,\"p\",[[0,[],0,\"In a concise body, only an expression is specified, which becomes the implicit return value. In a block body, you must use an explicit \"],[0,[1],1,\"return\"],[0,[],0,\" statement.var func = x => x * x;// concise body syntax, implied \\\"return\\\" var func = (x, y) => { return x + y; };// with block body, explicit \\\"return\\\" needed\"]]],[1,\"h3\",[[0,[],0,\"Returning object literals\"]]],[1,\"p\",[[0,[],0,\"Keep in mind that returning object literals using the concise body syntax \"],[0,[1],1,\"params => {object:literal}\"],[0,[],0,\" will not work as expected.var func = () => { foo: 1 };// Calling func() returns undefined! var func = () => { foo: function() {} };// SyntaxError: function statement requires a name\"]]],[1,\"p\",[[0,[],0,\"This is because the code inside braces ({}) is parsed as a sequence of statements (i.e. \"],[0,[1],1,\"foo\"],[0,[],0,\" is treated like a label, not a key in an object literal).\"]]],[1,\"p\",[[0,[],0,\"You must wrap the object literal in parentheses:var func = () => ({ foo: 1 });\"]]],[1,\"h3\",[[0,[],0,\"Line breaks\"]]],[1,\"p\",[[0,[],0,\"An arrow function cannot contain a line break between its parameters and its arrow.var func = (a, b, c)  => 1;// SyntaxError: expected expression, got '=>'\"]]],[1,\"p\",[[0,[],0,\"However, this can be amended by putting the line break after the arrow or using parentheses/braces as seen below to ensure that the code stays pretty and fluffy. You can also put line breaks between arguments.var func = (a, b, c) =>  1; var func = (a, b, c) => (  1); var func = (a, b, c) => {  return 1}; var func = (  a,  b,  c) => 1; // no SyntaxError thrown\"]]],[1,\"h3\",[[0,[],0,\"Parsing order\"]]],[1,\"p\",[[0,[],0,\"Although the arrow in an arrow function is not an operator, arrow functions have special parsing rules that interact differently with \"],[0,[16],1,\"operator precedence\"],[0,[],0,\" compared to regular functions.let callback; callback = callback || function() {}; // ok callback = callback || () => {};// SyntaxError: invalid arrow-function arguments callback = callback || (() => {});    // ok\"]]],[1,\"h2\",[[0,[],0,\"Examples\"]]],[1,\"h3\",[[0,[],0,\"Basic usage// An empty arrow function returns undefinedlet empty = () => {}; (() => 'foobar')();// Returns \\\"foobar\\\"// (this is an Immediately Invoked Function Expression) var simple = a => a > 15 ? 15 : a;simple(16); // 15simple(10); // 10 let max = (a, b) => a > b ? a : b; // Easy array filtering, mapping, ... var arr = [5, 6, 13, 0, 1, 18, 23]; var sum = arr.reduce((a, b) => a + b);// 66 var even = arr.filter(v => v % 2 == 0);// [6, 0, 18] var double = arr.map(v => v * 2);// [10, 12, 26, 0, 2, 36, 46] // More concise promise chainspromise.then(a => {  // ...}).then(b => {  // ...}); // Parameterless arrow functions that are visually easier to parsesetTimeout( () => {  console.log('I happen sooner');  setTimeout( () => {    // deeper code    console.log('I happen later');  }, 1);}, 1);\"]]],[10,4],[10,5],[10,6],[10,7],[10,8],[1,\"blockquote\",[[0,[],0,\"ES6 arrow functions provide you with an alternative way to write a shorter syntax compared to the function expression.\"]]],[1,\"p\",[[0,[11],1,\"The following example defines a function expression that returns the sum of two numbers:\"]]],[10,9],[1,\"p\",[[0,[],0,\"let add = function (x, y) {  return x + y;}; console.log(add(10, 20)); // 30\"]]],[10,10],[1,\"p\",[[0,[11],0,\"The following example is equivalent to the above \"],[0,[1],1,\"add()\"],[0,[],1,\" function expression but use an arrow function instead:\"]]],[10,11],[1,\"p\",[[0,[],0,\"let add = (x, y) => x + y; console.log(add(10, 20)); // 30;\"]]],[10,12],[1,\"p\",[[0,[11],0,\"In this example, the arrow function has one expression \"],[0,[1],1,\"x + y\"],[0,[],1,\" so it returns the result of the expression.\"]]],[1,\"p\",[[0,[11],0,\"However, if you use the block syntax, you need to specify the \"],[0,[1],1,\"return\"],[0,[],1,\" keyword:\"]]],[10,13],[1,\"p\",[[0,[],0,\"let add = (x, y) => {  return x + y;};\"]]],[10,14],[1,\"p\",[[0,[11],0,\"The  \"],[0,[1],1,\"typeof\"],[0,[],0,\" operator returns \"],[0,[1],1,\"function\"],[0,[],1,\" indicating the type of arrow function.\"]]],[10,15],[1,\"p\",[[0,[],0,\"console.log(typeof add); // function\"]]],[10,16],[1,\"p\",[[0,[11],0,\"The arrow function is also an instance of the \"],[0,[17],1,\"Function type\"],[0,[],1,\" as shown in the following example:\"]]],[10,17],[1,\"p\",[[0,[],0,\"console.log(add instanceof Function); // true\"]]],[10,18],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions with multiple parameters\"]]],[1,\"p\",[[0,[11],1,\"If an arrow function has two or more parameters, you use the following syntax:\"]]],[10,19],[1,\"p\",[[0,[],0,\"(p1, p2, ..., pn) => expression;\"]]],[10,20],[1,\"p\",[[0,[11],1,\"The following expression:\"]]],[10,21],[1,\"p\",[[0,[],0,\"=> expression\"]]],[10,22],[1,\"p\",[[0,[11],1,\"is equivalent to the following expression:\"]]],[10,23],[1,\"p\",[[0,[],0,\"=> { return expression; }\"]]],[10,24],[1,\"p\",[[0,[11],0,\"For example, to \"],[0,[18],1,\"sort an array\"],[0,[],0,\" of numbers in the descending order, you use the \"],[0,[1],1,\"sort()\"],[0,[],1,\" method of the array object as follows:\"]]],[10,25],[1,\"p\",[[0,[],0,\"let numbers = [4, 2, 6];numbers.sort(function (a, b) {  return b - a;});console.log(numbers); // [6,4,2]\"]]],[10,26],[1,\"p\",[[0,[11],1,\"The code is more concise with the arrow function syntax:\"]]],[10,27],[1,\"p\",[[0,[],0,\"let numbers = [4, 2, 6];numbers.sort((a, b) => b - a);console.log(numbers); // [6,4,2]\"]]],[10,28],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions with a single parameter\"]]],[1,\"p\",[[0,[11],1,\"If an arrow function takes a single parameter, you use the following syntax:\"]]],[10,29],[1,\"p\",[[0,[],0,\"(p1) => {  statements;};\"]]],[10,30],[1,\"p\",[[0,[11],1,\"Note that you can omit the parentheses as follows:\"]]],[10,31],[1,\"p\",[[0,[],0,\"(p) => {  statements;};\"]]],[10,32],[1,\"p\",[[0,[11],0,\"The following example uses an arrow function as an argument of the \"],[0,[1],1,\"[map()](/javascript-array-map/)\"],[0,[],1,\" method that transforms an array of strings into an array of the string's lengths.\"]]],[10,33],[1,\"p\",[[0,[],0,\"let names = [\\\"John\\\", \\\"Mac\\\", \\\"Peter\\\"];let lengths = names.map((name) => name.length); console.log(lengths);\"]]],[10,34],[1,\"h2\",[[0,[],0,\"Output\"]]],[1,\"p\",[[0,[],0,\"[4, 3, 5];\"]]],[10,35],[1,\"blockquote\",[[0,[],0,\"Code language: JSON / JSON with Comments (json)\"]]],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions with no parameter\"]]],[1,\"blockquote\",[[0,[],0,\"If the arrow function has no parameter, you need to use parentheses, like this:\"]]],[10,36],[1,\"p\",[[0,[],0,\"() => {  statements;};\"]]],[10,37],[1,\"h2\",[[0,[],0,\"For example\"]]],[1,\"p\",[[0,[],0,\"let logDoc = () => console.log(window.document);logDoc();\"]]],[10,38],[1,\"h4\",[[0,[],0,\"Line break between parameter definition and arrow\"]]],[1,\"blockquote\",[[0,[],0,\"JavaScript doesn't allow you to have a line break between the parameter definition and the arrow (\"],[0,[1],1,\"=>\"],[0,[],0,\") in an arrow function.\"]]],[1,\"h2\",[[0,[],0,\"For example, the following code causes a \"],[0,[1],1,\"SyntaxError\"]]],[1,\"p\",[[0,[],0,\"let multiply = (x,y)=> x * y;\"]]],[10,39],[1,\"p\",[[0,[19],1,\"However, the following code works perfectly fine:\"]]],[10,40],[1,\"p\",[[0,[],0,\"let multiply = (x, y) => x * y;\"]]],[10,41],[1,\"p\",[[0,[11],1,\"JavaScript allows you to have line breaks between parameters as shown in the following example:\"]]],[10,42],[1,\"p\",[[0,[],0,\"let multiply = (x, y) => x * y;\"]]],[10,43],[1,\"h4\",[[0,[],0,\"Statements & expressions in the arrow function body\"]]],[1,\"h4\",[[0,[11],1,\"In JavaScript, an expression evaluates to a value as shown in the following example\"]]],[10,44],[1,\"p\",[[0,[],0,\"10 + 20;\"]]],[10,45],[1,\"p\",[[0,[19],1,\"A statement does a specific task such as:\"]]],[10,46],[1,\"p\",[[0,[],0,\"**If (x === y) {  console.log(\\\"x equals y\\\");}\"]]],[10,47],[1,\"p\",[[0,[11],1,\"If you use an expression in the body of an arrow function, you don't need to use the curly braces.\"]]],[10,48],[1,\"p\",[[0,[],0,\"let square = (x) => x * x;\"]]],[10,49],[1,\"p\",[[0,[11],1,\"However, if you use a statement, you must wrap it inside a pair of curly braces as in the following example:#####\"]]],[10,50],[1,\"p\",[[0,[],0,\"let except = (msg) => {  throw msg;};\"]]],[10,51],[1,\"h4\",[[0,[],0,\"JavaScript arrow functions and object literal\"]]],[1,\"h4\",[[0,[],0,\"Consider the following example\"]]],[10,52],[1,\"p\",[[0,[],0,\"let setColor = function (color) {  return { value: color };}; let backgroundColor = setColor(\\\"Red\\\");console.log(backgroundColor.value); // \\\"Red\\\"\"]]],[10,53],[1,\"p\",[[0,[11],0,\"The \"],[0,[1],1,\"setColor()\"],[0,[],0,\" function expression returns an object that has the \"],[0,[1],1,\"value\"],[0,[],0,\" property set to the \"],[0,[1],1,\"color\"],[0,[],1,\" argument.\"]]],[1,\"p\",[[0,[11],1,\"If you use the following syntax to return an object literal from an arrow function, you will get an error.\"]]],[10,54],[1,\"p\",[[0,[],0,\"(p) => {  object: literal;};\"]]],[10,55],[1,\"h2\",[[0,[],0,\"For example, the following code causes an error\"]]],[1,\"p\",[[0,[],0,\"let setColor = (color) => {  value: color;};\"]]],[10,56],[1,\"p\",[[0,[],0,\"**Since both block and object literal use curly brackets, the JavasScript engine cannot distinguish between a block and an object.\"]]],[1,\"h2\",[[0,[],0,\"To fix this, you need to wrap the object literal in parentheses as follows\"]]],[1,\"p\",[[0,[],0,\"let setColor = (color) => ({ value: color });\"]]],[10,57],[1,\"h4\",[[0,[],0,\"Arrow function vs. regular function\"]]],[1,\"h5\",[[0,[],0,\"There are two main differences between an arrow function and a regular function\"]]],[3,\"ol\",[[[0,[],0,\"First, in the arrow function, the \"],[0,[1],1,\"this\"],[0,[],0,\" are lexical. It means that the arrow function uses these variables (or constructs) from the enclosing lexical scope.\"]],[[0,[],0,\"Second, an arrow function cannot be used as a function constructor. If you use the \"],[0,[1],1,\"new\"],[0,[],0,\" keyword to create a new object from an arrow function, you will get an error.\"]]]],[10,58],[10,59],[1,\"h1\",[[0,[19,11],2,\"More On THIS\"]]],[1,\"p\",[[0,[],0,\"_**More On THIS**_\"]]],[1,\"p\",[[0,[],0,\"Summary: in this tutorial, you will  learn about the JavaScript \"],[0,[1],1,\"this\"],[0,[],0,\" value and understand it clearly in various contexts.\"]]],[1,\"h5\",[[0,[],0,\"If you have been working with other programming languages such as C++, Java, and \"],[0,[20],1,\"PHP\"],[0,[],0,\", you're already familiar with the \"],[0,[1],1,\"this\"],[0,[],0,\" keyword\"]]],[1,\"h5\",[[0,[],0,\"In these languages, the \"],[0,[1],1,\"this\"],[0,[],0,\"keyword represents the instance of the current object in the method of the class. And the \"],[0,[1],1,\"this\"],[0,[],0,\" keyword is only relevant within a method of the class, meaning that you cannot use it outside of a method\"]]],[1,\"blockquote\",[[0,[],0,\"JavaScript has the \"],[0,[1],1,\"this\"],[0,[],0,\" keyword that behaves differently from other programming languages, which may confuse you at first.\"]]],[1,\"h4\",[[0,[11],0,\"In JavaScript, you can use the \"],[0,[1],1,\"this\"],[0,[],0,\" keyword in the \"],[0,[21],1,\"global and function contexts\"],[0,[],0,\". Moreover, the behavior of the  \"],[0,[1],1,\"this\"],[0,[],1,\" keyword changes between strict and non-strict modes\"]]],[1,\"h4\",[[0,[],0,\"What is the \"],[0,[1],1,\"this\"],[0,[],0,\" keyword\"]]],[1,\"h5\",[[0,[],0,\"The \"],[0,[1],1,\"this\"],[0,[],0,\" references the object of which the function is a property. In other words, the \"],[0,[1],1,\"this\"],[0,[],0,\" references the object that is currently calling the function\"]]],[1,\"p\",[[0,[],0,\"Suppose that you have an object called \"],[0,[1],1,\"counter\"],[0,[],0,\". This object \"],[0,[1],1,\"counter\"],[0,[],0,\" has a method called \"],[0,[1],1,\"next()\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"When you call the \"],[0,[1],1,\"next()\"],[0,[],0,\" method, you can access the \"],[0,[1],1,\"this\"],[0,[],0,\" object.const counter = {  count: 0,  next: function () {    return ++this.count;  },}; counter.next();\"]]],[10,60],[1,\"p\",[[0,[],0,\"Inside the \"],[0,[1],1,\"next()\"],[0,[],0,\" function, the \"],[0,[1],1,\"this\"],[0,[],0,\" references the \"],[0,[1],1,\"counter\"],[0,[],0,\" object.\"]]],[1,\"p\",[[0,[],0,\"See the following method call:counter.next();\"]]],[10,61],[1,\"blockquote\",[[0,[],0,\"Code language: CSS (css)\"]]],[1,\"h5\",[[0,[],0,\"The \"],[0,[1],1,\"next()\"],[0,[],0,\" is a function that is the property of the \"],[0,[1],1,\"counter\"],[0,[],0,\" object. Therefore, inside the \"],[0,[1],1,\"next()\"],[0,[],0,\" function, the \"],[0,[1],1,\"this\"],[0,[],0,\" references the \"],[0,[1],1,\"counter\"],[0,[],0,\" object\"]]],[1,\"p\",[[0,[],0,\"By the way, when a function is a property of an object, it is called a method.\"]]],[1,\"h4\",[[0,[],0,\"Global context\"]]],[1,\"h5\",[[0,[],0,\"In the global context, the \"],[0,[1],1,\"this\"],[0,[],0,\" references the \"],[0,[22],1,\"global object\"],[0,[],0,\", which is the \"],[0,[1],1,\"window\"],[0,[],0,\" object on the web browser or \"],[0,[1],1,\"global\"],[0,[],0,\" object on Node.js\"]]],[1,\"p\",[[0,[],0,\"This behavior is consistent whether the strict mode is applied or not, like this:console.log(this === window); // true\"]]],[10,62],[1,\"h5\",[[0,[],0,\"If you assign a property to \"],[0,[1],1,\"this\"],[0,[],0,\" object in the global context, JavaScript will add the property to the global object as shown in the following examplethis.color = \\\"Red\\\";console.log(window.color); // 'Red'\"]]],[10,63],[1,\"h4\",[[0,[],0,\"Function context\"]]],[1,\"h4\",[[0,[11],0,\"In JavaScript, you can invoke a \"],[0,[23],1,\"function\"],[0,[],1,\" in the following ways\"]]],[3,\"ul\",[[[0,[24],1,\"Function invocation\"]],[[0,[25],1,\"Method invocation\"]],[[0,[26],1,\"Constructor invocation\"]],[[0,[27],1,\"Indirect invocation\"]]]],[1,\"p\",[[0,[],0,\"Each function invocation defines its own context, therefore, the \"],[0,[1],1,\"this\"],[0,[],0,\" behaves differently than you may expect.\"]]],[1,\"h3\",[[0,[],0,\"1) Simple function invocation\"]]],[1,\"h5\",[[0,[],0,\"In the non-strict mode, the \"],[0,[1],1,\"this\"],[0,[],0,\" references the global object when the function is called as followsfunction show() {  console.log(this === window); // true} show();\"]]],[10,64],[1,\"p\",[[0,[],0,\"When you call the \"],[0,[1],1,\"show()\"],[0,[],0,\" function, the \"],[0,[1],1,\"this\"],[0,[],0,\" references the \"],[0,[22],1,\"global object\"],[0,[],0,\", which is the \"],[0,[1],1,\"window\"],[0,[],0,\" on the web browser and \"],[0,[1],1,\"global\"],[0,[],0,\" on Node.js.\"]]],[1,\"p\",[[0,[],0,\"Calling the \"],[0,[1],1,\"show()\"],[0,[],0,\" function is the same as:window.show();\"]]],[10,65],[1,\"h5\",[[0,[],0,\"In the strict mode, JavaScript sets the \"],[0,[1],1,\"this\"],[0,[],0,\" to \"],[0,[1],1,\"undefined\"],[0,[],0,\". #### Consider the following example\\\"use strict\\\"; function show() {  console.log(this === undefined);} show();\"]]],[10,66],[1,\"p\",[[0,[],0,\"To set the strict mode, you can use the directive \"],[0,[1],1,\"\\\"use strict\\\"\"],[0,[],0,\" at the beginning of the file.\"]]],[1,\"h5\",[[0,[],0,\"If you want to apply the strict mode to a specific function only, you place it at the top of the function body\"]]],[1,\"p\",[[0,[],0,\"Note that the strict mode has been available since ECMAScript 5.1. The \"],[0,[1],1,\"strict\"],[0,[],0,\" mode applies to both function and inner functions within the function. Here is an example:function show() {  \\\"use strict\\\";  console.log(this === undefined); // true function display() {    console.log(this === undefined); // true  }  display();} show();\"]]],[10,67],[1,\"p\",[[0,[],0,\"Output:true;true;\"]]],[10,68],[1,\"h5\",[[0,[],0,\"In the \"],[0,[1],1,\"display()\"],[0,[],0,\" inner function, The \"],[0,[1],1,\"this\"],[0,[],0,\" also set to \"],[0,[1],1,\"undefined\"],[0,[],0,\" as shown in the console\"]]],[1,\"h3\",[[0,[],0,\"2) Method invocation\"]]],[1,\"p\",[[0,[],0,\"When you call a method of an object, JavaScript sets \"],[0,[1],1,\"this\"],[0,[],0,\" to the object that owns the method. See the following \"],[0,[1],1,\"car\"],[0,[],0,\" object:let car = {  brand: \\\"Honda\\\",  getBrand: function () {    return this.brand;  },}; console.log(car.getBrand()); // Honda\"]]],[10,69],[1,\"h5\",[[0,[],0,\"In this example, the \"],[0,[1],1,\"this\"],[0,[],0,\" object in the \"],[0,[1],1,\"getBrand()\"],[0,[],0,\" method references the \"],[0,[1],1,\"car\"],[0,[],0,\" object\"]]],[1,\"p\",[[0,[],0,\"**Since a method is a property of an object which is a value, you can store it in a variable.let brand = car.getBrand;\"]]],[10,70],[1,\"p\",[[0,[],0,\"And then call the method via the variableconsole.log(brand()); // undefined\"]]],[10,71],[1,\"p\",[[0,[],0,\"You get \"],[0,[1],1,\"undefined\"],[0,[],0,\" instead of \"],[0,[1],1,\"\\\"Honda\\\"\"],[0,[],0,\" because when you call a method without specifying its object, JavaScript sets \"],[0,[1],1,\"this\"],[0,[],0,\" to the global object in non-strict mode and \"],[0,[1],1,\"undefined\"],[0,[],0,\" in the strict mode.\"]]],[1,\"p\",[[0,[],0,\"To fix this issue, you use the \"],[0,[1],1,\"[bind()](/javascript-bind/)\"],[0,[],0,\" method of the \"],[0,[1],1,\"Function.prototype\"],[0,[],0,\" object. The \"],[0,[1],1,\"bind()\"],[0,[],0,\" method creates a new function whose the \"],[0,[1],1,\"this\"],[0,[],0,\" keyword is set to a specified value.let brand = car.getBrand.bind(car);console.log(brand()); // Honda\"]]],[10,72],[1,\"h5\",[[0,[],0,\"In this example, when you call the \"],[0,[1],1,\"brand()\"],[0,[],0,\" method, the \"],[0,[1],1,\"this\"],[0,[],0,\" keyword is bound to the \"],[0,[1],1,\"car\"],[0,[],0,\" object. For examplelet car = {  brand: \\\"Honda\\\",  getBrand: function () {    return this.brand;  },}; let bike = {  brand: \\\"Harley Davidson\\\",}; let brand = car.getBrand.bind(bike);console.log(brand());\"]]],[10,73],[1,\"p\",[[0,[],0,\"Output:Harley Davidson\"]]],[10,74],[1,\"h5\",[[0,[],0,\"In this example, the \"],[0,[1],1,\"bind()\"],[0,[],0,\" method sets the \"],[0,[1],1,\"this\"],[0,[],0,\" to the \"],[0,[1],1,\"bike\"],[0,[],0,\" object, therefore, you see the value of the \"],[0,[1],1,\"brand\"],[0,[],0,\" property of the \"],[0,[1],1,\"bike\"],[0,[],0,\" object on the console\"]]],[1,\"h3\",[[0,[],0,\"3) Constructor invocation\"]]],[1,\"p\",[[0,[],0,\"When you use the \"],[0,[1],1,\"new\"],[0,[],0,\" keyword to create an instance of a function object, you use the function as a constructor.\"]]],[1,\"h5\",[[0,[],0,\"The following example declares a \"],[0,[1],1,\"Car\"],[0,[],0,\" function, then invokes it as a constructorfunction Car(brand) {  this.brand = brand;} Car.prototype.getBrand = function () {  return this.brand;}; var car = new Car(\\\"Honda\\\");console.log(car.getBrand());\"]]],[10,75],[1,\"h5\",[[0,[],0,\"The expression \"],[0,[1],1,\"new Car('Honda')\"],[0,[],0,\" is a constructor invocation of the \"],[0,[1],1,\"Car\"],[0,[],0,\" function\"]]],[1,\"blockquote\",[[0,[],0,\"JavaScript creates a new object and sets \"],[0,[1],1,\"this\"],[0,[],0,\" to the newly created object. This pattern works great with only one potential problem.\"]]],[1,\"p\",[[0,[],0,\"Now, you can invoke the \"],[0,[1],1,\"Car()\"],[0,[],0,\" as a function or as a constructor. If you omit the \"],[0,[1],1,\"new\"],[0,[],0,\" keyword as follows:var bmw = Car(\\\"BMW\\\");console.log(bmw.brand);// => TypeError: Cannot read property 'brand' of undefined\"]]],[10,76],[1,\"p\",[[0,[],0,\"**Since the \"],[0,[1],1,\"this\"],[0,[],0,\" value in the \"],[0,[1],1,\"Car()\"],[0,[],0,\" sets to the global object, the \"],[0,[1],1,\"bmw.brand\"],[0,[],0,\" returns \"],[0,[1],1,\"undefined\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"To make sure that the \"],[0,[1],1,\"Car()\"],[0,[],0,\" function is always invoked using constructor invocation, you add a check at the beginning of the \"],[0,[1],1,\"Car()\"],[0,[],0,\" function as follows:function Car(brand) {  if (!(this instanceof Car)) {    throw Error(\\\"Must use the new operator to call the function\\\");  }  this.brand = brand;}\"]]],[10,77],[1,\"p\",[[0,[],0,\"ES6 introduced a meta-property named \"],[0,[28,1],2,\"new.target\"],[0,[],0,\" that allows you to detect whether a function is invoked as a simple invocation or as a constructor.\"]]],[1,\"p\",[[0,[],0,\"You can modify the \"],[0,[1],1,\"Car()\"],[0,[],0,\" function that uses the \"],[0,[1],1,\"new.target\"],[0,[],0,\" metaproperty as follows:function Car(brand) {  if (!new.target) {    throw Error(\\\"Must use the new operator to call the function\\\");  }  this.brand = brand;}\"]]],[10,78],[1,\"h3\",[[0,[],0,\"4) Indirect Invocation\"]]],[1,\"h4\",[[0,[11],0,\"In JavaScript, \"],[0,[29],1,\"functions are first-class citizens\"],[0,[],0,\". In other words, functions are objects, which are instances of the \"],[0,[17],2,\"Function type\"]]],[1,\"h5\",[[0,[],0,\"The \"],[0,[1],1,\"Function\"],[0,[],0,\" type has two methods: \"],[0,[1],1,\"[call()](/javascript-call/)\"],[0,[],0,\" and \"],[0,[1],1,\"[apply()](/javascript-apply-method/)\"],[0,[],0,\" . These methods allow you to set the \"],[0,[1],1,\"this\"],[0,[],0,\" value when calling a function. For examplefunction getBrand(prefix) {  console.log(prefix + this.brand);} let honda = {  brand: \\\"Honda\\\",};let audi = {  brand: \\\"Audi\\\",}; getBrand.call(honda, \\\"It's a \\\");getBrand.call(audi, \\\"It's an \\\");\"]]],[10,79],[1,\"p\",[[0,[],0,\"Output:It's a HondaIt's an Audi\"]]],[10,80],[1,\"h5\",[[0,[],0,\"In this example, we called the \"],[0,[1],1,\"getBrand()\"],[0,[],0,\" function indirectly using the \"],[0,[1],1,\"call()\"],[0,[],0,\" method of the \"],[0,[1],1,\"getBrand\"],[0,[],0,\" function. We passed \"],[0,[1],1,\"honda\"],[0,[],0,\" and  \"],[0,[1],1,\"audi\"],[0,[],0,\" object as the first argument of the \"],[0,[1],1,\"call()\"],[0,[],0,\" method, therefore, we got the corresponding brand in each call\"]]],[1,\"h5\",[[0,[],0,\"The \"],[0,[1],1,\"apply()\"],[0,[],0,\" method is similar to the \"],[0,[1],1,\"call()\"],[0,[],0,\" method except that its second argument is an array of argumentsgetBrand.apply(honda, [\\\"It's a \\\"]); // \\\"It's a Honda\\\"getBrand.apply(audi, [\\\"It's an \\\"]); // \\\"It's a Audi\\\"\"]]],[10,81],[1,\"h4\",[[0,[],0,\"Arrow functions\"]]],[1,\"p\",[[0,[30],1,\"ES6\"],[0,[],0,\"introduced a new concept named \"],[0,[31],1,\"arrow function\"],[0,[],0,\". In arrow functions, JavaScript sets the \"],[0,[1],1,\"this\"],[0,[],0,\" lexically.\"]]],[1,\"p\",[[0,[],0,\"It means the arrow function does not create its own \"],[0,[21],1,\"execution context\"],[0,[],0,\" but inherits the \"],[0,[1],1,\"this\"],[0,[],0,\" from the outer function where the arrow function is defined. See the following example:let getThis = () => this;console.log(getThis() === window); // true\"]]],[10,82],[1,\"h5\",[[0,[],0,\"In this example, the \"],[0,[1],1,\"this\"],[0,[],0,\" value is set to the global object i.e., \"],[0,[1],1,\"window\"],[0,[],0,\" in the web browser\"]]],[1,\"p\",[[0,[],0,\"**Since an arrow function does not create its own execution context, defining a method using an arrow function will cause an issue. For example:function Car() {  this.speed = 120;} Car.prototype.getSpeed = () => {  return this.speed;}; var car = new Car();car.getSpeed(); // TypeError\"]]],[10,83],[1,\"p\",[[0,[],0,\"Inside the \"],[0,[1],1,\"getSpeed()\"],[0,[],0,\" method, the \"],[0,[1],1,\"this\"],[0,[],0,\" value reference the global object, not the \"],[0,[1],1,\"Car\"],[0,[],0,\" object. Therefore the \"],[0,[1],1,\"car.getSpeed()\"],[0,[],0,\" invocation causes an error because the global object does not have the \"],[0,[1],1,\"speed\"],[0,[],0,\" property.\"]]],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions and \"],[0,[1],1,\"this\"],[0,[],0,\" value\"]]],[1,\"h4\",[[0,[11],0,\"In JavaScript, a new function defines its own \"],[0,[1],1,\"this\"],[0,[],1,\" value. However, it is not the case for the arrow function. See the following example\"]]],[10,84],[1,\"p\",[[0,[],0,\"function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    setTimeout(function () {      console.log(this.speed); // undefined    }, 1000);  };} let car = new Car();car.speedUp(50);\"]]],[10,85],[1,\"p\",[[0,[],0,\"Inside the anonymous function of the \"],[0,[1],1,\"[setTimeout()](/javascript-bom/javascript-settimeout/)\"],[0,[],0,\" function, the \"],[0,[1],1,\"this.speed\"],[0,[],0,\" is \"],[0,[1],1,\"undefined\"],[0,[],0,\". The reason is that the \"],[0,[1],1,\"this\"],[0,[],0,\" of the \"],[0,[32],1,\"anonymous function\"],[0,[],0,\" shadows the \"],[0,[1],1,\"this\"],[0,[],0,\" of the \"],[0,[1],1,\"speedUp()\"],[0,[],0,\" method.\"]]],[1,\"h2\",[[0,[],0,\"To fix this, you assign the \"],[0,[1],1,\"this\"],[0,[],0,\" value to a variable that doesn't shadow inside the anonymous function as follows\"]]],[1,\"p\",[[0,[],0,\"function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    let self = this;    setTimeout(function () {      console.log(self.speed);    }, 1000);  };} let car = new Car();car.speedUp(50); // 50;\"]]],[10,86],[1,\"h2\",[[0,[],0,\"Unlike an anonymous function, an arrow function captures the \"],[0,[1],1,\"this\"],[0,[],0,\" value of the enclosing context instead of creating its own \"],[0,[1],1,\"this\"],[0,[],0,\" context. The following code should work as expected\"]]],[1,\"p\",[[0,[],0,\"function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    setTimeout(() => console.log(this.speed), 1000);  };} let car = new Car();car.speedUp(50); // 50;\"]]],[10,87],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions and the arguments object\"]]],[1,\"h2\",[[0,[],0,\"An arrow function doesn't have the \"],[0,[1],1,\"arguments\"],[0,[],0,\" object. For example\"]]],[1,\"p\",[[0,[],0,\"function show() {  return (x) => x + arguments[0];} let display = show(10, 20);let result = display(5);console.log(result); // 15\"]]],[10,88],[1,\"h5\",[[0,[],0,\"The arrow function inside the \"],[0,[1],1,\"showMe()\"],[0,[],0,\" function references the \"],[0,[1],1,\"arguments\"],[0,[],0,\" object. However, this \"],[0,[1],1,\"arguments\"],[0,[],0,\" object belongs to the \"],[0,[1],1,\"show()\"],[0,[],0,\" function, not the arrow function\"]]],[1,\"p\",[[0,[],0,\"Also, an arrow function doesn't have the \"],[0,[1],1,\"[new.target](/es6/javascript-new-target/)\"],[0,[],0,\" keyword.\"]]],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions and the prototype property\"]]],[1,\"h2\",[[0,[],0,\"When you define a \"],[0,[33],1,\"function\"],[0,[],0,\" using a \"],[0,[1],1,\"function\"],[0,[],0,\" keyword, the function has a property called \"],[0,[1],1,\"[prototype](/javascript-prototype/)\"]]],[1,\"p\",[[0,[],0,\"function dump(message) {  console.log(message);}console.log(dump.hasOwnProperty(\\\"prototype\\\")); // true\"]]],[10,89],[1,\"p\",[[0,[11],0,\"However, arrow functions don't have the \"],[0,[1],1,\"prototype\"],[0,[],1,\" property:\"]]],[10,90],[1,\"p\",[[0,[],0,\"let dump = (message) => console.log(message);console.log(dump.hasOwnProperty(\\\"prototype\\\")); // false\"]]],[10,91],[1,\"p\",[[0,[],0,\"It is a good practice to use arrow functions for \"],[0,[34],1,\"callbacks\"],[0,[],0,\" and \"],[0,[35],1,\"closures\"],[0,[],0,\" because the syntax of arrow functions is cleaner.\"]]],[1,\"h4\",[[0,[],0,\"Summary\"]]],[3,\"ul\",[[[0,[],0,\"Use the \"],[0,[1],1,\"(...args) => expression;\"],[0,[],0,\" to define an arrow function.\"]],[[0,[],0,\"Use the \"],[0,[1],1,\"(...args) => { statements }\"],[0,[],0,\" to define an arrow function that has multiple statements.\"]],[[0,[],0,\"An arrow function doesn't have its binding to \"],[0,[1],1,\"this\"],[0,[],0,\" or \"],[0,[1],1,\"super\"],[0,[],0,\".\"]],[[0,[],0,\"An arrow function doesn't have \"],[0,[1],1,\"arguments\"],[0,[],0,\" object, \"],[0,[1],1,\"new.target\"],[0,[],0,\" keyword, and \"],[0,[1],1,\"prototype\"],[0,[],0,\" property.Introduction to JavaScript arrow functions\"]]]],[10,92],[1,\"p\",[[0,[],0,\"ES6 arrow functions provide you with an alternative way to write a shorter syntax compared to the function expression.\"]]],[1,\"p\",[[0,[11],1,\"The following example defines a function expression that returns the sum of two numbers:\"]]],[10,93],[1,\"p\",[[0,[],0,\"let add = function (x, y) {  return x + y;}; console.log(add(10, 20)); // 30\"]]],[10,94],[1,\"p\",[[0,[11],0,\"The following example is equivalent to the above \"],[0,[1],1,\"add()\"],[0,[],1,\" function expression but use an arrow function instead:\"]]],[10,95],[1,\"p\",[[0,[],0,\"let add = (x, y) => x + y; console.log(add(10, 20)); // 30;\"]]],[10,96],[1,\"h5\",[[0,[],0,\"In this example, the arrow function has one expression \"],[0,[1],1,\"x + y\"],[0,[],0,\" so it returns the result of the expression\"]]],[1,\"p\",[[0,[11],0,\"However, if you use the block syntax, you need to specify the \"],[0,[1],1,\"return\"],[0,[],1,\" keyword:\"]]],[10,97],[1,\"p\",[[0,[],0,\"let add = (x, y) => {  return x + y;};\"]]],[10,98],[1,\"p\",[[0,[11],0,\"The  \"],[0,[1],1,\"typeof\"],[0,[],0,\" operator returns \"],[0,[1],1,\"function\"],[0,[],1,\" indicating the type of arrow function.\"]]],[10,99],[1,\"p\",[[0,[],0,\"console.log(typeof add); // function\"]]],[10,100],[1,\"p\",[[0,[11],0,\"The arrow function is also an instance of the \"],[0,[17],1,\"Function type\"],[0,[],1,\" as shown in the following example:\"]]],[10,101],[1,\"p\",[[0,[],0,\"console.log(add instanceof Function); // true\"]]],[10,102],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions with multiple parameters\"]]],[1,\"p\",[[0,[11],1,\"If an arrow function has two or more parameters, you use the following syntax:\"]]],[10,103],[1,\"p\",[[0,[],0,\"(p1, p2, ..., pn) => expression;\"]]],[10,104],[1,\"p\",[[0,[11],1,\"The following expression:\"]]],[10,105],[1,\"p\",[[0,[],0,\"=> expression\"]]],[10,106],[1,\"h2\",[[0,[],0,\"is equivalent to the following expression\"]]],[1,\"p\",[[0,[],0,\"=> { return expression; }\"]]],[10,107],[1,\"h2\",[[0,[],0,\"For example, to \"],[0,[18],1,\"sort an array\"],[0,[],0,\" of numbers in the descending order, you use the \"],[0,[1],1,\"sort()\"],[0,[],0,\" method of the array object as follows\"]]],[1,\"p\",[[0,[],0,\"let numbers = [4, 2, 6];numbers.sort(function (a, b) {  return b - a;});console.log(numbers); // [6,4,2]\"]]],[10,108],[1,\"p\",[[0,[11],1,\"The code is more concise with the arrow function syntax:\"]]],[10,109],[1,\"p\",[[0,[],0,\"let numbers = [4, 2, 6];numbers.sort((a, b) => b - a);console.log(numbers); // [6,4,2]\"]]],[10,110],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions with a single parameter\"]]],[1,\"p\",[[0,[11],1,\"If an arrow function takes a single parameter, you use the following syntax:#####\"]]],[10,111],[1,\"p\",[[0,[],0,\"(p1) => {  statements;};\"]]],[10,112],[1,\"h2\",[[0,[],0,\"Note that you can omit the parentheses as follows\"]]],[1,\"p\",[[0,[],0,\"(p) => {  statements;};\"]]],[10,113],[1,\"p\",[[0,[11],0,\"The following example uses an arrow function as an argument of the \"],[0,[1],1,\"[map()](/javascript-array-map/)\"],[0,[],1,\" method that transforms an array of strings into an array of the string's lengths.\"]]],[10,114],[1,\"p\",[[0,[],0,\"let names = [\\\"John\\\", \\\"Mac\\\", \\\"Peter\\\"];let lengths = names.map((name) => name.length); console.log(lengths);\"]]],[10,115],[1,\"h2\",[[0,[],0,\"Output\"]]],[1,\"p\",[[0,[],0,\"[4, 3, 5];\"]]],[10,116],[1,\"blockquote\",[[0,[],0,\"Code language: JSON / JSON with Comments (json)\"]]],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions with no parameter\"]]],[1,\"blockquote\",[[0,[],0,\"If the arrow function has no parameter, you need to use parentheses, like this:\"]]],[10,117],[1,\"p\",[[0,[],0,\"() => {  statements;};\"]]],[10,118],[1,\"h2\",[[0,[],0,\"For example\"]]],[1,\"p\",[[0,[],0,\"let logDoc = () => console.log(window.document);logDoc();\"]]],[10,119],[1,\"h4\",[[0,[],0,\"Line break between parameter definition and arrow\"]]],[1,\"blockquote\",[[0,[],0,\"JavaScript doesn't allow you to have a line break between the parameter definition and the arrow (\"],[0,[1],1,\"=>\"],[0,[],0,\") in an arrow function.\"]]],[1,\"h2\",[[0,[],0,\"For example, the following code causes a \"],[0,[1],1,\"SyntaxError\"]]],[1,\"p\",[[0,[],0,\"let multiply = (x,y)=> x * y;\"]]],[10,120],[1,\"p\",[[0,[11],1,\"However, the following code works perfectly fine:\"]]],[10,121],[1,\"p\",[[0,[],0,\"let multiply = (x, y) => x * y;\"]]],[10,122],[1,\"blockquote\",[[0,[],0,\"JavaScript allows you to have line breaks between parameters as shown in the following example:\"]]],[10,123],[1,\"p\",[[0,[],0,\"let multiply = (x, y) => x * y;\"]]],[10,124],[1,\"h2\",[[0,[],0,\"Statements & expressions in the arrow function body\"]]],[1,\"h4\",[[0,[11],1,\"In JavaScript, an expression evaluates to a value as shown in the following example\"]]],[10,125],[1,\"p\",[[0,[],0,\"10 + 20;\"]]],[10,126],[1,\"h2\",[[0,[],0,\"A statement does a specific task such as\"]]],[1,\"p\",[[0,[],0,\"**If (x === y) {  console.log(\\\"x equals y\\\");}\"]]],[10,127],[1,\"p\",[[0,[11],1,\"If you use an expression in the body of an arrow function, you don't need to use the curly braces.\"]]],[10,128],[1,\"p\",[[0,[],0,\"let square = (x) => x * x;\"]]],[10,129],[1,\"p\",[[0,[11],1,\"However, if you use a statement, you must wrap it inside a pair of curly braces as in the following example:\"]]],[10,130],[1,\"p\",[[0,[],0,\"let except = (msg) => {  throw msg;};\"]]],[10,131],[1,\"h4\",[[0,[],0,\"JavaScript arrow functions and object literal\"]]],[1,\"h4\",[[0,[],0,\"Consider the following example\"]]],[10,132],[1,\"p\",[[0,[],0,\"let setColor = function (color) {  return { value: color };}; let backgroundColor = setColor(\\\"Red\\\");console.log(backgroundColor.value); // \\\"Red\\\"\"]]],[10,133],[1,\"h5\",[[0,[],0,\"The \"],[0,[1],1,\"setColor()\"],[0,[],0,\" function expression returns an object that has the \"],[0,[1],1,\"value\"],[0,[],0,\" property set to the \"],[0,[1],1,\"color\"],[0,[],0,\" argument\"]]],[1,\"p\",[[0,[11],1,\"If you use the following syntax to return an object literal from an arrow function, you will get an error.\"]]],[10,134],[1,\"p\",[[0,[],0,\"(p) => {  object: literal;};\"]]],[10,135],[1,\"h2\",[[0,[],0,\"For example, the following code causes an error\"]]],[1,\"p\",[[0,[],0,\"let setColor = (color) => {  value: color;};\"]]],[10,136],[1,\"p\",[[0,[11],1,\"Since both block and object literal use curly brackets, the JavasScript engine cannot distinguish between a block and an object.\"]]],[1,\"h2\",[[0,[],0,\"To fix this, you need to wrap the object literal in parentheses as follows\"]]],[1,\"p\",[[0,[],0,\"let setColor = (color) => ({ value: color });\"]]],[10,137],[1,\"h4\",[[0,[],0,\"Arrow function vs. regular function\"]]],[1,\"h5\",[[0,[],0,\"There are two main differences between an arrow function and a regular function\"]]],[1,\"blockquote\",[[0,[19,11],0,\"1. First, in the arrow function, the \"],[0,[1],1,\"[this](/javascript-this/)\"],[0,[],0,\", \"],[0,[1],1,\"arguments\"],[0,[],0,\", \"],[0,[1],1,\"super\"],[0,[],0,\", \"],[0,[1],1,\"[new.target](/es6/javascript-new-target/)\"],[0,[],0,\" are lexical. It means that the arrow function uses these variables (or constructs) from the enclosing lexical scope. 2. Second, an arrow function cannot be used as a function constructor. If you use the \"],[0,[1],1,\"new\"],[0,[],2,\" keyword to create a new object from an arrow function, you will get an error.\"]]],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions and \"],[0,[1],1,\"this\"],[0,[],0,\" value\"]]],[1,\"h4\",[[0,[11],0,\"In JavaScript, a new function defines its own \"],[0,[1],1,\"this\"],[0,[],1,\" value. However, it is not the case for the arrow function. See the following example\"]]],[10,138],[1,\"p\",[[0,[],0,\"function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    setTimeout(function () {      console.log(this.speed); // undefined    }, 1000);  };} let car = new Car();car.speedUp(50);\"]]],[10,139],[1,\"p\",[[0,[11],0,\"Inside the anonymous function of the \"],[0,[1],1,\"[setTimeout()](/javascript-bom/javascript-settimeout/)\"],[0,[],0,\" function, the \"],[0,[1],1,\"this.speed\"],[0,[],0,\" is \"],[0,[1],1,\"undefined\"],[0,[],0,\". The reason is that the \"],[0,[1],1,\"this\"],[0,[],0,\" of the \"],[0,[32],1,\"anonymous function\"],[0,[],0,\" shadows the \"],[0,[1],1,\"this\"],[0,[],0,\" of the \"],[0,[1],1,\"speedUp()\"],[0,[],1,\" method.\"]]],[1,\"h2\",[[0,[],0,\"To fix this, you assign the \"],[0,[1],1,\"this\"],[0,[],0,\" value to a variable that doesn't shadow inside the anonymous function as follows\"]]],[1,\"p\",[[0,[],0,\"function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    let self = this;    setTimeout(function () {      console.log(self.speed);    }, 1000);  };} let car = new Car();car.speedUp(50); // 50;\"]]],[10,140],[1,\"h2\",[[0,[],0,\"Unlike an anonymous function, an arrow function captures the \"],[0,[1],1,\"this\"],[0,[],0,\" value of the enclosing context instead of creating its own \"],[0,[1],1,\"this\"],[0,[],0,\" context. The following code should work as expected\"]]],[1,\"p\",[[0,[],0,\"function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    setTimeout(() => console.log(this.speed), 1000);  };} let car = new Car();car.speedUp(50); // 50;\"]]],[10,141],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions and the arguments object\"]]],[1,\"h2\",[[0,[],0,\"An arrow function doesn't have the \"],[0,[1],1,\"arguments\"],[0,[],0,\" object. For example\"]]],[1,\"p\",[[0,[],0,\"function show() {  return (x) => x + arguments[0];} let display = show(10, 20);let result = display(5);console.log(result); // 15\"]]],[10,142],[1,\"h5\",[[0,[],0,\"The arrow function inside the \"],[0,[1],1,\"showMe()\"],[0,[],0,\" function references the \"],[0,[1],1,\"arguments\"],[0,[],0,\" object. However, this \"],[0,[1],1,\"arguments\"],[0,[],0,\" object belongs to the \"],[0,[1],1,\"show()\"],[0,[],0,\" function, not the arrow function\"]]],[1,\"p\",[[0,[],0,\"Also, an arrow function doesn't have the \"],[0,[1],1,\"[new.target](/es6/javascript-new-target/)\"],[0,[],0,\" keyword.\"]]],[1,\"h3\",[[0,[],0,\"JavaScript arrow functions and the prototype property\"]]],[1,\"h2\",[[0,[],0,\"When you define a \"],[0,[33],1,\"function\"],[0,[],0,\" using a \"],[0,[1],1,\"function\"],[0,[],0,\" keyword, the function has a property called \"],[0,[1],1,\"[prototype](/javascript-prototype/)\"]]],[1,\"p\",[[0,[],0,\"function dump(message) {  console.log(message);}console.log(dump.hasOwnProperty(\\\"prototype\\\")); // true\"]]],[10,143],[1,\"p\",[[0,[11],0,\"However, arrow functions don't have the \"],[0,[1],1,\"prototype\"],[0,[],1,\" property:\"]]],[10,144],[1,\"p\",[[0,[],0,\"let dump = (message) => console.log(message);console.log(dump.hasOwnProperty(\\\"prototype\\\")); // false\"]]],[10,145],[1,\"blockquote\",[[0,[],0,\"It is a good practice to use arrow functions for \"],[0,[34],1,\"callbacks\"],[0,[],0,\" and \"],[0,[35],1,\"closures\"],[0,[],0,\" because the syntax of arrow functions is cleaner.\"]]],[10,146],[1,\"h2\",[[0,[],0,\"Summary\"]]],[3,\"ul\",[[[0,[11],0,\"Use the \"],[0,[1],1,\"(...args) => expression;\"],[0,[],1,\" to define an arrow function.\"]],[[0,[11],0,\"Use the \"],[0,[1],1,\"(...args) => { statements }\"],[0,[],1,\" to define an arrow function\"],[0,[],0,\"that has multiple statements.**\"]],[[0,[11],0,\"An arrow function doesn't have its binding to \"],[0,[1],1,\"this\"],[0,[],0,\" or \"],[0,[1],1,\"super\"],[0,[],1,\".\"]],[[0,[11],0,\"An arrow function doesn't have \"],[0,[1],1,\"arguments\"],[0,[],0,\" object, \"],[0,[1],1,\"new.target\"],[0,[],0,\" keyword, and \"],[0,[1],1,\"prototype\"],[0,[],1,\" property.\"]]]]],\"ghostVersion\":\"4.0\"}","html":"<h1 id=\"introduction-to-javascript-arrow-functions\">Introduction to JavaScript arrow functions</h1><hr><hr><hr><hr><h1 id=\"from-mdn-docs\">FROM MDN DOCS:</h1><p>====&gt;Arrow Functions&lt;=======</p><p></p><p>**Differences &amp; Limitations:**</p><ul><li>Does not have its own bindings to <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/this\"><code>this</code></a> or <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/super\"><code>super</code></a>, and should not be used as <a href=\"https://gist.github.com/en-US/docs/Glossary/Method\"><code>methods</code></a>.</li><li>Does not have <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a> keyword.</li><li>Not suitable for <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call</code></a>, <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>apply</code></a> and <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>bind</code></a> methods, which generally rely on establishing a <a href=\"https://gist.github.com/en-US/docs/Glossary/Scope\">scope</a>.</li><li>Can not be used as <a href=\"https://gist.github.com/en-US/docs/Glossary/Constructor\">constructors</a>.</li><li>Can not use <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/yield\"><code>yield</code></a>, within its body.</li></ul><p></p><h3 id=\"comparing-traditional-functions-to-arrow-functions\">Comparing traditional functions to arrow functions</h3><p>Let's decompose a \"traditional anonymous function\" down to the simplest \"arrow function\" step-by-step:</p><blockquote><strong>Note:</strong> Each step along the way is a valid \"arrow function\".// Traditional Anonymous Functionfunction (a){  return a + 100;} // Arrow Function Break Down // 1. Remove the word \"function\" and place arrow between the argument and opening body bracket(a) =&gt; {  return a + 100;} // 2. Remove the body braces and word \"return\" -- the return is implied.(a) =&gt; a + 100; // 3. Remove the argument parenthesesa =&gt; a + 100;</blockquote><blockquote><strong>Note:</strong> As shown above, the { braces } and ( parentheses ) and \"return\" are required in some cases.</blockquote><p>For example, if you have <strong>multiple arguments</strong> or <strong>no arguments</strong>, you'll need to re-introduce parentheses around the arguments:// Traditional Anonymous Functionfunction (a, b){  return a + b + 100;} // Arrow Function(a, b) =&gt; a + b + 100; // Traditional Anonymous Function (no arguments)let a = 4;let b = 2;function (){  return a + b + 100;} // Arrow Function (no arguments)let a = 4;let b = 2;() =&gt; a + b + 100;</p><p>Likewise, if the body requires <strong>additional lines</strong> of processing, you'll need to re-introduce braces <strong>PLUS the \"return\"</strong> (arrow functions do not magically guess what or when you want to \"return\"):// Traditional Anonymous Functionfunction (a, b){  let chuck = 42;  return a + b + chuck;} // Arrow Function(a, b) =&gt; {  let chuck = 42;  return a + b + chuck;}</p><p>And finally, for <strong>named functions</strong> we treat arrow expressions like variables:// Traditional Functionfunction bob (a){  return a + 100;} // Arrow Functionlet bob = a =&gt; a + 100;</p><h2 id=\"syntax\">Syntax</h2><h3 id=\"basic-syntax\">Basic syntax</h3><p>One param. With simple expression return is not needed:param =&gt; expression</p><p>Multiple params require parentheses. With simple expression return is not needed:(param1, paramN) =&gt; expression</p><p>Multiline statements require body braces and return:param =&gt; {  let a = 1;  return a + param;}</p><p>Multiple params require parentheses. Multiline statements require body braces and return:(param1, paramN) =&gt; {   let a = 1;   return a + param1 + paramN;}</p><h3 id=\"advanced-syntax\">Advanced syntax</h3><p>To return an object literal expression requires parentheses around expression:params =&gt; ({foo: \"a\"}) // returning the object {foo: \"a\"}</p><p><a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest parameters</a> are supported:(a, b, ...r) =&gt; expression</p><p><a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">Default parameters</a> are supported:(a=400, b=20, c) =&gt; expression</p><p><a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">Destructuring</a> within params supported:([a, b] = [10, 20]) =&gt; a + b;  // result is 30({ a, b } = { a: 10, b: 20 }) =&gt; a + b; // result is 30</p><h2 id=\"description\">Description</h2><h3 id=\"arrow-functions-used-as-methods\">Arrow functions used as methods</h3><p>As stated previously, arrow function expressions are best suited for non-method functions. Let's see what happens when we try to use them as methods:'use strict'; var obj = { // does not create a new scope  i: 10,  b: () =&gt; console.log(this.i, this),  c: function() {    console.log(this.i, this);  }} obj.b(); // prints undefined, Window {...} (or the global object)obj.c(); // prints 10, Object {...}</p><p>Arrow functions do not have their own <code>this</code>. Another example involving {{jsxref(\"Object.defineProperty()\")}}:'use strict'; var obj = {  a: 10}; Object.defineProperty(obj, 'b', {  get: () =&gt; {    console.log(this.a, typeof this.a, this); // undefined 'undefined' Window {...} (or the global object)    return this.a + 10; // represents global object 'Window', therefore 'this.a' returns 'undefined'  }});</p><h3 id=\"call-apply-and-bind\">call, apply and bind</h3><p>The <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call</code></a>, <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>apply</code></a> and <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>bind</code> </a>methods are <strong>NOT suitable</strong> for Arrow functions -- as they were designed to allow methods to execute within different scopes -- because <strong>Arrow functions establish \"this\" based on the scope the Arrow function is defined within.</strong></p><p>For example <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code>call</code></a>, <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>apply</code></a> and <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>bind</code> </a>work as expected with Traditional functions, because we establish the scope for each of the methods:// ----------------------// Traditional Example// ----------------------// A simplistic object with its very own \"this\".var obj = {    num: 100} // Setting \"num\" on window to show how it is NOT used.window.num = 2020; // yikes! // A simple traditional function to operate on \"this\"var add = function (a, b, c) {  return this.num + a + b + c;} // callvar result = add.call(obj, 1, 2, 3) // establishing the scope as \"obj\"console.log(result) // result 106 // applyconst arr = [1, 2, 3]var result = add.apply(obj, arr) // establishing the scope as \"obj\"console.log(result) // result 106 // bindvar result = add.bind(obj) // establishing the scope as \"obj\"console.log(result(1, 2, 3)) // result 106</p><p>With Arrow functions, since our <code>add</code> function is essentially created on the <code>window</code> (global) scope, it will assume <code>this</code> is the window.// ----------------------// Arrow Example// ---------------------- // A simplistic object with its very own \"this\".var obj = {    num: 100} // Setting \"num\" on window to show how it gets picked up.window.num = 2020; // yikes! // Arrow Functionvar add = (a, b, c) =&gt; this.num + a + b + c; // callconsole.log(add.call(obj, 1, 2, 3)) // result 2026 // applyconst arr = [1, 2, 3]console.log(add.apply(obj, arr)) // result 2026 // bindconst bound = add.bind(obj)console.log(bound(1, 2, 3)) // result 2026</p><p>Perhaps the greatest benefit of using Arrow functions is with DOM-level methods (setTimeout, setInterval, addEventListener) that usually required some kind of closure, call, apply or bind to ensure the function executed in the proper scope.</p><p><strong>Traditional Example:</strong>var obj = {    count : 10,    doSomethingLater : function (){        setTimeout(function(){ // the function executes on the window scope            this.count++;            console.log(this.count);        }, 300);    }} obj.doSomethingLater(); // console prints \"NaN\", because the property \"count\" is not in the window scope.</p><p><strong>Arrow Example:</strong>var obj = {    count : 10,    doSomethingLater : function(){        // The traditional function binds \"this\" to the \"obj\" context.        setTimeout( () =&gt; {            // Since the arrow function doesn't have its own binding and            // setTimeout (as a function call) doesn't create a binding            // itself, the \"obj\" context of the traditional function will            // be used within.            this.count++;            console.log(this.count);        }, 300);    }} obj.doSomethingLater();</p><h3 id=\"no-binding-of-arguments\">No binding of <code>arguments</code></h3><p>Arrow functions do not have their own <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code> object</a>. Thus, in this example, <code>arguments</code> is a reference to the arguments of the enclosing scope:var arguments = [1, 2, 3];var arr = () =&gt; arguments[0]; arr(); // 1 function foo(n) {  var f = () =&gt; arguments[0] + n; // foo's implicit arguments binding. arguments[0] is n  return f();} foo(3); // 3 + 3 = 6</p><p>In most cases, using <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">rest parameters</a> is a good alternative to using an <code>arguments</code> object.function foo(n) {  var f = (...args) =&gt; args[0] + n;  return f(10);} foo(1); // 11</p><h3 id=\"use-of-the-new-operator\">Use of the <code>new</code> operator</h3><p>Arrow functions cannot be used as constructors and will throw an error when used with <code>new</code>.var Foo = () =&gt; {};var foo = new Foo(); // TypeError: Foo is not a constructor</p><h3 id=\"use-of-prototype-property\">Use of <code>prototype</code> property</h3><p>Arrow functions do not have a <code>prototype</code> property.var Foo = () =&gt; {};console.log(Foo.prototype); // undefined</p><h3 id=\"use-of-the-yield-keyword\">Use of the <code>yield</code> keyword</h3><p>The <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/yield\"><code>yield</code></a> keyword may not be used in an arrow function's body (except when permitted within functions further nested within it). As a consequence, arrow functions cannot be used as generators.</p><h3 id=\"function-body\">Function body</h3><p>Arrow functions can have either a \"concise body\" or the usual \"block body\".</p><p>In a concise body, only an expression is specified, which becomes the implicit return value. In a block body, you must use an explicit <code>return</code> statement.var func = x =&gt; x * x;// concise body syntax, implied \"return\" var func = (x, y) =&gt; { return x + y; };// with block body, explicit \"return\" needed</p><h3 id=\"returning-object-literals\">Returning object literals</h3><p>Keep in mind that returning object literals using the concise body syntax <code>params =&gt; {object:literal}</code> will not work as expected.var func = () =&gt; { foo: 1 };// Calling func() returns undefined! var func = () =&gt; { foo: function() {} };// SyntaxError: function statement requires a name</p><p>This is because the code inside braces ({}) is parsed as a sequence of statements (i.e. <code>foo</code> is treated like a label, not a key in an object literal).</p><p>You must wrap the object literal in parentheses:var func = () =&gt; ({ foo: 1 });</p><h3 id=\"line-breaks\">Line breaks</h3><p>An arrow function cannot contain a line break between its parameters and its arrow.var func = (a, b, c)  =&gt; 1;// SyntaxError: expected expression, got '=&gt;'</p><p>However, this can be amended by putting the line break after the arrow or using parentheses/braces as seen below to ensure that the code stays pretty and fluffy. You can also put line breaks between arguments.var func = (a, b, c) =&gt;  1; var func = (a, b, c) =&gt; (  1); var func = (a, b, c) =&gt; {  return 1}; var func = (  a,  b,  c) =&gt; 1; // no SyntaxError thrown</p><h3 id=\"parsing-order\">Parsing order</h3><p>Although the arrow in an arrow function is not an operator, arrow functions have special parsing rules that interact differently with <a href=\"https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">operator precedence</a> compared to regular functions.let callback; callback = callback || function() {}; // ok callback = callback || () =&gt; {};// SyntaxError: invalid arrow-function arguments callback = callback || (() =&gt; {});    // ok</p><h2 id=\"examples\">Examples</h2><h3 id=\"basic-usage-an-empty-arrow-function-returns-undefinedlet-empty-foobar-returns-foobar-this-is-an-immediately-invoked-function-expression-var-simple-a-a-15-15-asimple16-15simple10-10-let-max-a-b-a-b-a-b-easy-array-filtering-mapping-var-arr-5-6-13-0-1-18-23-var-sum-arrreducea-b-a-b-66-var-even-arrfilterv-v-2-0-6-0-18-var-double-arrmapv-v-2-10-12-26-0-2-36-46-more-concise-promise-chainspromisethena-thenb-parameterless-arrow-functions-that-are-visually-easier-to-parsesettimeout-consolelogi-happen-sooner-settimeout-deeper-code-consolelogi-happen-later-1-1\">Basic usage// An empty arrow function returns undefinedlet empty = () =&gt; {}; (() =&gt; 'foobar')();// Returns \"foobar\"// (this is an Immediately Invoked Function Expression) var simple = a =&gt; a &gt; 15 ? 15 : a;simple(16); // 15simple(10); // 10 let max = (a, b) =&gt; a &gt; b ? a : b; // Easy array filtering, mapping, ... var arr = [5, 6, 13, 0, 1, 18, 23]; var sum = arr.reduce((a, b) =&gt; a + b);// 66 var even = arr.filter(v =&gt; v % 2 == 0);// [6, 0, 18] var double = arr.map(v =&gt; v * 2);// [10, 12, 26, 0, 2, 36, 46] // More concise promise chainspromise.then(a =&gt; {  // ...}).then(b =&gt; {  // ...}); // Parameterless arrow functions that are visually easier to parsesetTimeout( () =&gt; {  console.log('I happen sooner');  setTimeout( () =&gt; {    // deeper code    console.log('I happen later');  }, 1);}, 1);</h3><hr><hr><hr><hr><figure class=\"kg-card kg-image-card\"><img src=\"https://camo.githubusercontent.com/7834e7bef390ec2cf679af4ca7fd757bbd1dca2c9f6cad830657d88cc89a691c/68747470733a2f2f6d69726f2e6d656469756d2e636f6d2f6d61782f313437302f312a496e3439685754457a5a6a4f455a54514c37387554412e676966\" class=\"kg-image\" alt=\"ZACH\" loading=\"lazy\"></figure><blockquote>ES6 arrow functions provide you with an alternative way to write a shorter syntax compared to the function expression.</blockquote><p><strong>The following example defines a function expression that returns the sum of two numbers:</strong></p><hr><p>let add = function (x, y) {  return x + y;}; console.log(add(10, 20)); // 30</p><hr><p><strong>The following example is equivalent to the above <code>add()</code> function expression but use an arrow function instead:</strong></p><hr><p>let add = (x, y) =&gt; x + y; console.log(add(10, 20)); // 30;</p><hr><p><strong>In this example, the arrow function has one expression <code>x + y</code> so it returns the result of the expression.</strong></p><p><strong>However, if you use the block syntax, you need to specify the <code>return</code> keyword:</strong></p><hr><p>let add = (x, y) =&gt; {  return x + y;};</p><hr><p><strong>The  <code>typeof</code> operator returns <code>function</code> indicating the type of arrow function.</strong></p><hr><p>console.log(typeof add); // function</p><hr><p><strong>The arrow function is also an instance of the <a href=\"https://gist.github.com/bgoonz/javascript-function-type/\">Function type</a> as shown in the following example:</strong></p><hr><p>console.log(add instanceof Function); // true</p><hr><h3 id=\"javascript-arrow-functions-with-multiple-parameters\">JavaScript arrow functions with multiple parameters</h3><p><strong>If an arrow function has two or more parameters, you use the following syntax:</strong></p><hr><p>(p1, p2, ..., pn) =&gt; expression;</p><hr><p><strong>The following expression:</strong></p><hr><p>=&gt; expression</p><hr><p><strong>is equivalent to the following expression:</strong></p><hr><p>=&gt; { return expression; }</p><hr><p><strong>For example, to <a href=\"https://gist.github.com/bgoonz/javascript-array-sort/\">sort an array</a> of numbers in the descending order, you use the <code>sort()</code> method of the array object as follows:</strong></p><hr><p>let numbers = [4, 2, 6];numbers.sort(function (a, b) {  return b - a;});console.log(numbers); // [6,4,2]</p><hr><p><strong>The code is more concise with the arrow function syntax:</strong></p><hr><p>let numbers = [4, 2, 6];numbers.sort((a, b) =&gt; b - a);console.log(numbers); // [6,4,2]</p><hr><h3 id=\"javascript-arrow-functions-with-a-single-parameter\">JavaScript arrow functions with a single parameter</h3><p><strong>If an arrow function takes a single parameter, you use the following syntax:</strong></p><hr><p>(p1) =&gt; {  statements;};</p><hr><p><strong>Note that you can omit the parentheses as follows:</strong></p><hr><p>(p) =&gt; {  statements;};</p><hr><p><strong>The following example uses an arrow function as an argument of the <code>[map()](/javascript-array-map/)</code> method that transforms an array of strings into an array of the string's lengths.</strong></p><hr><p>let names = [\"John\", \"Mac\", \"Peter\"];let lengths = names.map((name) =&gt; name.length); console.log(lengths);</p><hr><h2 id=\"output\">Output</h2><p>[4, 3, 5];</p><hr><blockquote>Code language: JSON / JSON with Comments (json)</blockquote><h3 id=\"javascript-arrow-functions-with-no-parameter\">JavaScript arrow functions with no parameter</h3><blockquote>If the arrow function has no parameter, you need to use parentheses, like this:</blockquote><hr><p>() =&gt; {  statements;};</p><hr><h2 id=\"for-example\">For example</h2><p>let logDoc = () =&gt; console.log(window.document);logDoc();</p><hr><h4 id=\"line-break-between-parameter-definition-and-arrow\">Line break between parameter definition and arrow</h4><blockquote>JavaScript doesn't allow you to have a line break between the parameter definition and the arrow (<code>=&gt;</code>) in an arrow function.</blockquote><h2 id=\"for-example-the-following-code-causes-a-syntaxerror\">For example, the following code causes a <code>SyntaxError</code></h2><p>let multiply = (x,y)=&gt; x * y;</p><hr><p><em>However, the following code works perfectly fine:</em></p><hr><p>let multiply = (x, y) =&gt; x * y;</p><hr><p><strong>JavaScript allows you to have line breaks between parameters as shown in the following example:</strong></p><hr><p>let multiply = (x, y) =&gt; x * y;</p><hr><h4 id=\"statements-expressions-in-the-arrow-function-body\">Statements &amp; expressions in the arrow function body</h4><h4 id=\"in-javascript-an-expression-evaluates-to-a-value-as-shown-in-the-following-example\"><strong>In JavaScript, an expression evaluates to a value as shown in the following example</strong></h4><hr><p>10 + 20;</p><hr><p><em>A statement does a specific task such as:</em></p><hr><p>**If (x === y) {  console.log(\"x equals y\");}</p><hr><p><strong>If you use an expression in the body of an arrow function, you don't need to use the curly braces.</strong></p><hr><p>let square = (x) =&gt; x * x;</p><hr><p><strong>However, if you use a statement, you must wrap it inside a pair of curly braces as in the following example:#####</strong></p><hr><p>let except = (msg) =&gt; {  throw msg;};</p><hr><h4 id=\"javascript-arrow-functions-and-object-literal\">JavaScript arrow functions and object literal</h4><h4 id=\"consider-the-following-example\">Consider the following example</h4><hr><p>let setColor = function (color) {  return { value: color };}; let backgroundColor = setColor(\"Red\");console.log(backgroundColor.value); // \"Red\"</p><hr><p><strong>The <code>setColor()</code> function expression returns an object that has the <code>value</code> property set to the <code>color</code> argument.</strong></p><p><strong>If you use the following syntax to return an object literal from an arrow function, you will get an error.</strong></p><hr><p>(p) =&gt; {  object: literal;};</p><hr><h2 id=\"for-example-the-following-code-causes-an-error\">For example, the following code causes an error</h2><p>let setColor = (color) =&gt; {  value: color;};</p><hr><p>**Since both block and object literal use curly brackets, the JavasScript engine cannot distinguish between a block and an object.</p><h2 id=\"to-fix-this-you-need-to-wrap-the-object-literal-in-parentheses-as-follows\">To fix this, you need to wrap the object literal in parentheses as follows</h2><p>let setColor = (color) =&gt; ({ value: color });</p><hr><h4 id=\"arrow-function-vs-regular-function\">Arrow function vs. regular function</h4><h5 id=\"there-are-two-main-differences-between-an-arrow-function-and-a-regular-function\">There are two main differences between an arrow function and a regular function</h5><ol><li>First, in the arrow function, the <code>this</code> are lexical. It means that the arrow function uses these variables (or constructs) from the enclosing lexical scope.</li><li>Second, an arrow function cannot be used as a function constructor. If you use the <code>new</code> keyword to create a new object from an arrow function, you will get an error.</li></ol><hr><hr><h1 id=\"more-on-this\"><em><strong>More On THIS</strong></em></h1><p>_**More On THIS**_</p><p>Summary: in this tutorial, you will  learn about the JavaScript <code>this</code> value and understand it clearly in various contexts.</p><h5 id=\"if-you-have-been-working-with-other-programming-languages-such-as-c-java-and-php-youre-already-familiar-with-the-this-keyword\">If you have been working with other programming languages such as C++, Java, and <a href=\"https://www.phptutorial.net/php-oop/php-this/\" rel=\"nofollow\">PHP</a>, you're already familiar with the <code>this</code> keyword</h5><h5 id=\"in-these-languages-the-thiskeyword-represents-the-instance-of-the-current-object-in-the-method-of-the-class-and-the-this-keyword-is-only-relevant-within-a-method-of-the-class-meaning-that-you-cannot-use-it-outside-of-a-method\">In these languages, the <code>this</code>keyword represents the instance of the current object in the method of the class. And the <code>this</code> keyword is only relevant within a method of the class, meaning that you cannot use it outside of a method</h5><blockquote>JavaScript has the <code>this</code> keyword that behaves differently from other programming languages, which may confuse you at first.</blockquote><h4 id=\"in-javascript-you-can-use-the-this-keyword-in-the-global-and-function-contexts-moreover-the-behavior-of-the-this-keyword-changes-between-strict-and-non-strict-modes\"><strong>In JavaScript, you can use the <code>this</code> keyword in the <a href=\"https://gist.github.com/javascript-execution-context/\">global and function contexts</a>. Moreover, the behavior of the  <code>this</code> keyword changes between strict and non-strict modes</strong></h4><h4 id=\"what-is-the-this-keyword\">What is the <code>this</code> keyword</h4><h5 id=\"the-this-references-the-object-of-which-the-function-is-a-property-in-other-words-the-this-references-the-object-that-is-currently-calling-the-function\">The <code>this</code> references the object of which the function is a property. In other words, the <code>this</code> references the object that is currently calling the function</h5><p>Suppose that you have an object called <code>counter</code>. This object <code>counter</code> has a method called <code>next()</code>.</p><p>When you call the <code>next()</code> method, you can access the <code>this</code> object.const counter = {  count: 0,  next: function () {    return ++this.count;  },}; counter.next();</p><hr><p>Inside the <code>next()</code> function, the <code>this</code> references the <code>counter</code> object.</p><p>See the following method call:counter.next();</p><hr><blockquote>Code language: CSS (css)</blockquote><h5 id=\"the-next-is-a-function-that-is-the-property-of-the-counter-object-therefore-inside-the-next-function-the-this-references-the-counter-object\">The <code>next()</code> is a function that is the property of the <code>counter</code> object. Therefore, inside the <code>next()</code> function, the <code>this</code> references the <code>counter</code> object</h5><p>By the way, when a function is a property of an object, it is called a method.</p><h4 id=\"global-context\">Global context</h4><h5 id=\"in-the-global-context-the-this-references-the-global-object-which-is-the-window-object-on-the-web-browser-or-global-object-on-nodejs\">In the global context, the <code>this</code> references the <a href=\"https://gist.github.com/es-next/javascript-globalthis/\">global object</a>, which is the <code>window</code> object on the web browser or <code>global</code> object on Node.js</h5><p>This behavior is consistent whether the strict mode is applied or not, like this:console.log(this === window); // true</p><hr><h5 id=\"if-you-assign-a-property-to-this-object-in-the-global-context-javascript-will-add-the-property-to-the-global-object-as-shown-in-the-following-examplethiscolor-redconsolelogwindowcolor-red\">If you assign a property to <code>this</code> object in the global context, JavaScript will add the property to the global object as shown in the following examplethis.color = \"Red\";console.log(window.color); // 'Red'</h5><hr><h4 id=\"function-context\">Function context</h4><h4 id=\"in-javascript-you-can-invoke-a-function-in-the-following-ways\"><strong>In JavaScript, you can invoke a <a href=\"https://gist.github.com/bgoonz/javascript-function/\">function</a> in the following ways</strong></h4><ul><li><a href=\"https://gist.github.com/javascript-this/#function_invocation\">Function invocation</a></li><li><a href=\"https://gist.github.com/javascript-this/#method_invocation\">Method invocation</a></li><li><a href=\"https://gist.github.com/javascript-this/#constructor_invocation\">Constructor invocation</a></li><li><a href=\"https://gist.github.com/javascript-this/#indirect_invocation\">Indirect invocation</a></li></ul><p>Each function invocation defines its own context, therefore, the <code>this</code> behaves differently than you may expect.</p><h3 id=\"1-simple-function-invocation\">1) Simple function invocation</h3><h5 id=\"in-the-non-strict-mode-the-this-references-the-global-object-when-the-function-is-called-as-followsfunction-show-consolelogthis-window-true-show\">In the non-strict mode, the <code>this</code> references the global object when the function is called as followsfunction show() {  console.log(this === window); // true} show();</h5><hr><p>When you call the <code>show()</code> function, the <code>this</code> references the <a href=\"https://gist.github.com/es-next/javascript-globalthis/\">global object</a>, which is the <code>window</code> on the web browser and <code>global</code> on Node.js.</p><p>Calling the <code>show()</code> function is the same as:window.show();</p><hr><h5 id=\"in-the-strict-mode-javascript-sets-the-this-to-undefined-consider-the-following-exampleuse-strict-function-show-consolelogthis-undefined-show\">In the strict mode, JavaScript sets the <code>this</code> to <code>undefined</code>. #### Consider the following example\"use strict\"; function show() {  console.log(this === undefined);} show();</h5><hr><p>To set the strict mode, you can use the directive <code>\"use strict\"</code> at the beginning of the file.</p><h5 id=\"if-you-want-to-apply-the-strict-mode-to-a-specific-function-only-you-place-it-at-the-top-of-the-function-body\">If you want to apply the strict mode to a specific function only, you place it at the top of the function body</h5><p>Note that the strict mode has been available since ECMAScript 5.1. The <code>strict</code> mode applies to both function and inner functions within the function. Here is an example:function show() {  \"use strict\";  console.log(this === undefined); // true function display() {    console.log(this === undefined); // true  }  display();} show();</p><hr><p>Output:true;true;</p><hr><h5 id=\"in-the-display-inner-function-the-this-also-set-to-undefined-as-shown-in-the-console\">In the <code>display()</code> inner function, The <code>this</code> also set to <code>undefined</code> as shown in the console</h5><h3 id=\"2-method-invocation\">2) Method invocation</h3><p>When you call a method of an object, JavaScript sets <code>this</code> to the object that owns the method. See the following <code>car</code> object:let car = {  brand: \"Honda\",  getBrand: function () {    return this.brand;  },}; console.log(car.getBrand()); // Honda</p><hr><h5 id=\"in-this-example-the-this-object-in-the-getbrand-method-references-the-car-object\">In this example, the <code>this</code> object in the <code>getBrand()</code> method references the <code>car</code> object</h5><p>**Since a method is a property of an object which is a value, you can store it in a variable.let brand = car.getBrand;</p><hr><p>And then call the method via the variableconsole.log(brand()); // undefined</p><hr><p>You get <code>undefined</code> instead of <code>\"Honda\"</code> because when you call a method without specifying its object, JavaScript sets <code>this</code> to the global object in non-strict mode and <code>undefined</code> in the strict mode.</p><p>To fix this issue, you use the <code>[bind()](/javascript-bind/)</code> method of the <code>Function.prototype</code> object. The <code>bind()</code> method creates a new function whose the <code>this</code> keyword is set to a specified value.let brand = car.getBrand.bind(car);console.log(brand()); // Honda</p><hr><h5 id=\"in-this-example-when-you-call-the-brand-method-the-this-keyword-is-bound-to-the-car-object-for-examplelet-car-brand-honda-getbrand-function-return-thisbrand-let-bike-brand-harley-davidson-let-brand-cargetbrandbindbikeconsolelogbrand\">In this example, when you call the <code>brand()</code> method, the <code>this</code> keyword is bound to the <code>car</code> object. For examplelet car = {  brand: \"Honda\",  getBrand: function () {    return this.brand;  },}; let bike = {  brand: \"Harley Davidson\",}; let brand = car.getBrand.bind(bike);console.log(brand());</h5><hr><p>Output:Harley Davidson</p><hr><h5 id=\"in-this-example-the-bind-method-sets-the-this-to-the-bike-object-therefore-you-see-the-value-of-the-brand-property-of-the-bike-object-on-the-console\">In this example, the <code>bind()</code> method sets the <code>this</code> to the <code>bike</code> object, therefore, you see the value of the <code>brand</code> property of the <code>bike</code> object on the console</h5><h3 id=\"3-constructor-invocation\">3) Constructor invocation</h3><p>When you use the <code>new</code> keyword to create an instance of a function object, you use the function as a constructor.</p><h5 id=\"the-following-example-declares-a-car-function-then-invokes-it-as-a-constructorfunction-carbrand-thisbrand-brand-carprototypegetbrand-function-return-thisbrand-var-car-new-carhondaconsolelogcargetbrand\">The following example declares a <code>Car</code> function, then invokes it as a constructorfunction Car(brand) {  this.brand = brand;} Car.prototype.getBrand = function () {  return this.brand;}; var car = new Car(\"Honda\");console.log(car.getBrand());</h5><hr><h5 id=\"the-expression-new-carhonda-is-a-constructor-invocation-of-the-car-function\">The expression <code>new Car('Honda')</code> is a constructor invocation of the <code>Car</code> function</h5><blockquote>JavaScript creates a new object and sets <code>this</code> to the newly created object. This pattern works great with only one potential problem.</blockquote><p>Now, you can invoke the <code>Car()</code> as a function or as a constructor. If you omit the <code>new</code> keyword as follows:var bmw = Car(\"BMW\");console.log(bmw.brand);// =&gt; TypeError: Cannot read property 'brand' of undefined</p><hr><p>**Since the <code>this</code> value in the <code>Car()</code> sets to the global object, the <code>bmw.brand</code> returns <code>undefined</code>.</p><p>To make sure that the <code>Car()</code> function is always invoked using constructor invocation, you add a check at the beginning of the <code>Car()</code> function as follows:function Car(brand) {  if (!(this instanceof Car)) {    throw Error(\"Must use the new operator to call the function\");  }  this.brand = brand;}</p><hr><p>ES6 introduced a meta-property named <a href=\"https://gist.github.com/bgoonz/es6/javascript-new-target/\"><code>new.target</code></a> that allows you to detect whether a function is invoked as a simple invocation or as a constructor.</p><p>You can modify the <code>Car()</code> function that uses the <code>new.target</code> metaproperty as follows:function Car(brand) {  if (!new.target) {    throw Error(\"Must use the new operator to call the function\");  }  this.brand = brand;}</p><hr><h3 id=\"4-indirect-invocation\">4) Indirect Invocation</h3><h4 id=\"in-javascript-functions-are-first-class-citizens-in-other-words-functions-are-objects-which-are-instances-of-the-function-type\"><strong>In JavaScript, <a href=\"https://gist.github.com/javascript-functions-are-first-class-citizens/\">functions are first-class citizens</a>. In other words, functions are objects, which are instances of the <a href=\"https://gist.github.com/bgoonz/javascript-function-type/\">Function type</a></strong></h4><h5 id=\"the-function-type-has-two-methods-calljavascript-call-and-applyjavascript-apply-method-these-methods-allow-you-to-set-the-this-value-when-calling-a-function-for-examplefunction-getbrandprefix-consolelogprefix-thisbrand-let-honda-brand-hondalet-audi-brand-audi-getbrandcallhonda-its-a-getbrandcallaudi-its-an\">The <code>Function</code> type has two methods: <code>[call()](/javascript-call/)</code> and <code>[apply()](/javascript-apply-method/)</code> . These methods allow you to set the <code>this</code> value when calling a function. For examplefunction getBrand(prefix) {  console.log(prefix + this.brand);} let honda = {  brand: \"Honda\",};let audi = {  brand: \"Audi\",}; getBrand.call(honda, \"It's a \");getBrand.call(audi, \"It's an \");</h5><hr><p>Output:It's a HondaIt's an Audi</p><hr><h5 id=\"in-this-example-we-called-the-getbrand-function-indirectly-using-the-call-method-of-the-getbrand-function-we-passed-honda-and-audi-object-as-the-first-argument-of-the-call-method-therefore-we-got-the-corresponding-brand-in-each-call\">In this example, we called the <code>getBrand()</code> function indirectly using the <code>call()</code> method of the <code>getBrand</code> function. We passed <code>honda</code> and  <code>audi</code> object as the first argument of the <code>call()</code> method, therefore, we got the corresponding brand in each call</h5><h5 id=\"the-apply-method-is-similar-to-the-call-method-except-that-its-second-argument-is-an-array-of-argumentsgetbrandapplyhonda-its-a-its-a-hondagetbrandapplyaudi-its-an-its-a-audi\">The <code>apply()</code> method is similar to the <code>call()</code> method except that its second argument is an array of argumentsgetBrand.apply(honda, [\"It's a \"]); // \"It's a Honda\"getBrand.apply(audi, [\"It's an \"]); // \"It's a Audi\"</h5><hr><h4 id=\"arrow-functions\">Arrow functions</h4><p><a href=\"https://gist.github.com/bgoonz/es6/\">ES6</a>introduced a new concept named <a href=\"https://gist.github.com/bgoonz/es6/javascript-arrow-function/\">arrow function</a>. In arrow functions, JavaScript sets the <code>this</code> lexically.</p><p>It means the arrow function does not create its own <a href=\"https://gist.github.com/javascript-execution-context/\">execution context</a> but inherits the <code>this</code> from the outer function where the arrow function is defined. See the following example:let getThis = () =&gt; this;console.log(getThis() === window); // true</p><hr><h5 id=\"in-this-example-the-this-value-is-set-to-the-global-object-ie-window-in-the-web-browser\">In this example, the <code>this</code> value is set to the global object i.e., <code>window</code> in the web browser</h5><p>**Since an arrow function does not create its own execution context, defining a method using an arrow function will cause an issue. For example:function Car() {  this.speed = 120;} Car.prototype.getSpeed = () =&gt; {  return this.speed;}; var car = new Car();car.getSpeed(); // TypeError</p><hr><p>Inside the <code>getSpeed()</code> method, the <code>this</code> value reference the global object, not the <code>Car</code> object. Therefore the <code>car.getSpeed()</code> invocation causes an error because the global object does not have the <code>speed</code> property.</p><h3 id=\"javascript-arrow-functions-and-this-value\">JavaScript arrow functions and <code>this</code> value</h3><h4 id=\"in-javascript-a-new-function-defines-its-own-this-value-however-it-is-not-the-case-for-the-arrow-function-see-the-following-example\"><strong>In JavaScript, a new function defines its own <code>this</code> value. However, it is not the case for the arrow function. See the following example</strong></h4><hr><p>function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    setTimeout(function () {      console.log(this.speed); // undefined    }, 1000);  };} let car = new Car();car.speedUp(50);</p><hr><p>Inside the anonymous function of the <code>[setTimeout()](/javascript-bom/javascript-settimeout/)</code> function, the <code>this.speed</code> is <code>undefined</code>. The reason is that the <code>this</code> of the <a href=\"https://gist.github.com/javascript-anonymous-functions/\">anonymous function</a> shadows the <code>this</code> of the <code>speedUp()</code> method.</p><h2 id=\"to-fix-this-you-assign-the-this-value-to-a-variable-that-doesnt-shadow-inside-the-anonymous-function-as-follows\">To fix this, you assign the <code>this</code> value to a variable that doesn't shadow inside the anonymous function as follows</h2><p>function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    let self = this;    setTimeout(function () {      console.log(self.speed);    }, 1000);  };} let car = new Car();car.speedUp(50); // 50;</p><hr><h2 id=\"unlike-an-anonymous-function-an-arrow-function-captures-the-this-value-of-the-enclosing-context-instead-of-creating-its-own-this-context-the-following-code-should-work-as-expected\">Unlike an anonymous function, an arrow function captures the <code>this</code> value of the enclosing context instead of creating its own <code>this</code> context. The following code should work as expected</h2><p>function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    setTimeout(() =&gt; console.log(this.speed), 1000);  };} let car = new Car();car.speedUp(50); // 50;</p><hr><h3 id=\"javascript-arrow-functions-and-the-arguments-object\">JavaScript arrow functions and the arguments object</h3><h2 id=\"an-arrow-function-doesnt-have-the-arguments-object-for-example\">An arrow function doesn't have the <code>arguments</code> object. For example</h2><p>function show() {  return (x) =&gt; x + arguments[0];} let display = show(10, 20);let result = display(5);console.log(result); // 15</p><hr><h5 id=\"the-arrow-function-inside-the-showme-function-references-the-arguments-object-however-this-arguments-object-belongs-to-the-show-function-not-the-arrow-function\">The arrow function inside the <code>showMe()</code> function references the <code>arguments</code> object. However, this <code>arguments</code> object belongs to the <code>show()</code> function, not the arrow function</h5><p>Also, an arrow function doesn't have the <code>[new.target](/es6/javascript-new-target/)</code> keyword.</p><h3 id=\"javascript-arrow-functions-and-the-prototype-property\">JavaScript arrow functions and the prototype property</h3><h2 id=\"when-you-define-a-function-using-a-function-keyword-the-function-has-a-property-called-prototypejavascript-prototype\">When you define a <a href=\"https://gist.github.com/javascript-function/\">function</a> using a <code>function</code> keyword, the function has a property called <code>[prototype](/javascript-prototype/)</code></h2><p>function dump(message) {  console.log(message);}console.log(dump.hasOwnProperty(\"prototype\")); // true</p><hr><p><strong>However, arrow functions don't have the <code>prototype</code> property:</strong></p><hr><p>let dump = (message) =&gt; console.log(message);console.log(dump.hasOwnProperty(\"prototype\")); // false</p><hr><p>It is a good practice to use arrow functions for <a href=\"https://gist.github.com/javascript-callback/\">callbacks</a> and <a href=\"https://gist.github.com/javascript-closure/\">closures</a> because the syntax of arrow functions is cleaner.</p><h4 id=\"summary\">Summary</h4><ul><li>Use the <code>(...args) =&gt; expression;</code> to define an arrow function.</li><li>Use the <code>(...args) =&gt; { statements }</code> to define an arrow function that has multiple statements.</li><li>An arrow function doesn't have its binding to <code>this</code> or <code>super</code>.</li><li>An arrow function doesn't have <code>arguments</code> object, <code>new.target</code> keyword, and <code>prototype</code> property.Introduction to JavaScript arrow functions</li></ul><hr><p>ES6 arrow functions provide you with an alternative way to write a shorter syntax compared to the function expression.</p><p><strong>The following example defines a function expression that returns the sum of two numbers:</strong></p><hr><p>let add = function (x, y) {  return x + y;}; console.log(add(10, 20)); // 30</p><hr><p><strong>The following example is equivalent to the above <code>add()</code> function expression but use an arrow function instead:</strong></p><hr><p>let add = (x, y) =&gt; x + y; console.log(add(10, 20)); // 30;</p><hr><h5 id=\"in-this-example-the-arrow-function-has-one-expression-x-y-so-it-returns-the-result-of-the-expression\">In this example, the arrow function has one expression <code>x + y</code> so it returns the result of the expression</h5><p><strong>However, if you use the block syntax, you need to specify the <code>return</code> keyword:</strong></p><hr><p>let add = (x, y) =&gt; {  return x + y;};</p><hr><p><strong>The  <code>typeof</code> operator returns <code>function</code> indicating the type of arrow function.</strong></p><hr><p>console.log(typeof add); // function</p><hr><p><strong>The arrow function is also an instance of the <a href=\"https://gist.github.com/bgoonz/javascript-function-type/\">Function type</a> as shown in the following example:</strong></p><hr><p>console.log(add instanceof Function); // true</p><hr><h3 id=\"javascript-arrow-functions-with-multiple-parameters-1\">JavaScript arrow functions with multiple parameters</h3><p><strong>If an arrow function has two or more parameters, you use the following syntax:</strong></p><hr><p>(p1, p2, ..., pn) =&gt; expression;</p><hr><p><strong>The following expression:</strong></p><hr><p>=&gt; expression</p><hr><h2 id=\"is-equivalent-to-the-following-expression\">is equivalent to the following expression</h2><p>=&gt; { return expression; }</p><hr><h2 id=\"for-example-to-sort-an-array-of-numbers-in-the-descending-order-you-use-the-sort-method-of-the-array-object-as-follows\">For example, to <a href=\"https://gist.github.com/bgoonz/javascript-array-sort/\">sort an array</a> of numbers in the descending order, you use the <code>sort()</code> method of the array object as follows</h2><p>let numbers = [4, 2, 6];numbers.sort(function (a, b) {  return b - a;});console.log(numbers); // [6,4,2]</p><hr><p><strong>The code is more concise with the arrow function syntax:</strong></p><hr><p>let numbers = [4, 2, 6];numbers.sort((a, b) =&gt; b - a);console.log(numbers); // [6,4,2]</p><hr><h3 id=\"javascript-arrow-functions-with-a-single-parameter-1\">JavaScript arrow functions with a single parameter</h3><p><strong>If an arrow function takes a single parameter, you use the following syntax:#####</strong></p><hr><p>(p1) =&gt; {  statements;};</p><hr><h2 id=\"note-that-you-can-omit-the-parentheses-as-follows\">Note that you can omit the parentheses as follows</h2><p>(p) =&gt; {  statements;};</p><hr><p><strong>The following example uses an arrow function as an argument of the <code>[map()](/javascript-array-map/)</code> method that transforms an array of strings into an array of the string's lengths.</strong></p><hr><p>let names = [\"John\", \"Mac\", \"Peter\"];let lengths = names.map((name) =&gt; name.length); console.log(lengths);</p><hr><h2 id=\"output-1\">Output</h2><p>[4, 3, 5];</p><hr><blockquote>Code language: JSON / JSON with Comments (json)</blockquote><h3 id=\"javascript-arrow-functions-with-no-parameter-1\">JavaScript arrow functions with no parameter</h3><blockquote>If the arrow function has no parameter, you need to use parentheses, like this:</blockquote><hr><p>() =&gt; {  statements;};</p><hr><h2 id=\"for-example-1\">For example</h2><p>let logDoc = () =&gt; console.log(window.document);logDoc();</p><hr><h4 id=\"line-break-between-parameter-definition-and-arrow-1\">Line break between parameter definition and arrow</h4><blockquote>JavaScript doesn't allow you to have a line break between the parameter definition and the arrow (<code>=&gt;</code>) in an arrow function.</blockquote><h2 id=\"for-example-the-following-code-causes-a-syntaxerror-1\">For example, the following code causes a <code>SyntaxError</code></h2><p>let multiply = (x,y)=&gt; x * y;</p><hr><p><strong>However, the following code works perfectly fine:</strong></p><hr><p>let multiply = (x, y) =&gt; x * y;</p><hr><blockquote>JavaScript allows you to have line breaks between parameters as shown in the following example:</blockquote><hr><p>let multiply = (x, y) =&gt; x * y;</p><hr><h2 id=\"statements-expressions-in-the-arrow-function-body-1\">Statements &amp; expressions in the arrow function body</h2><h4 id=\"in-javascript-an-expression-evaluates-to-a-value-as-shown-in-the-following-example-1\"><strong>In JavaScript, an expression evaluates to a value as shown in the following example</strong></h4><hr><p>10 + 20;</p><hr><h2 id=\"a-statement-does-a-specific-task-such-as\">A statement does a specific task such as</h2><p>**If (x === y) {  console.log(\"x equals y\");}</p><hr><p><strong>If you use an expression in the body of an arrow function, you don't need to use the curly braces.</strong></p><hr><p>let square = (x) =&gt; x * x;</p><hr><p><strong>However, if you use a statement, you must wrap it inside a pair of curly braces as in the following example:</strong></p><hr><p>let except = (msg) =&gt; {  throw msg;};</p><hr><h4 id=\"javascript-arrow-functions-and-object-literal-1\">JavaScript arrow functions and object literal</h4><h4 id=\"consider-the-following-example-1\">Consider the following example</h4><hr><p>let setColor = function (color) {  return { value: color };}; let backgroundColor = setColor(\"Red\");console.log(backgroundColor.value); // \"Red\"</p><hr><h5 id=\"the-setcolor-function-expression-returns-an-object-that-has-the-value-property-set-to-the-color-argument\">The <code>setColor()</code> function expression returns an object that has the <code>value</code> property set to the <code>color</code> argument</h5><p><strong>If you use the following syntax to return an object literal from an arrow function, you will get an error.</strong></p><hr><p>(p) =&gt; {  object: literal;};</p><hr><h2 id=\"for-example-the-following-code-causes-an-error-1\">For example, the following code causes an error</h2><p>let setColor = (color) =&gt; {  value: color;};</p><hr><p><strong>Since both block and object literal use curly brackets, the JavasScript engine cannot distinguish between a block and an object.</strong></p><h2 id=\"to-fix-this-you-need-to-wrap-the-object-literal-in-parentheses-as-follows-1\">To fix this, you need to wrap the object literal in parentheses as follows</h2><p>let setColor = (color) =&gt; ({ value: color });</p><hr><h4 id=\"arrow-function-vs-regular-function-1\">Arrow function vs. regular function</h4><h5 id=\"there-are-two-main-differences-between-an-arrow-function-and-a-regular-function-1\">There are two main differences between an arrow function and a regular function</h5><blockquote><em><strong>1. First, in the arrow function, the <code>[this](/javascript-this/)</code>, <code>arguments</code>, <code>super</code>, <code>[new.target](/es6/javascript-new-target/)</code> are lexical. It means that the arrow function uses these variables (or constructs) from the enclosing lexical scope. 2. Second, an arrow function cannot be used as a function constructor. If you use the <code>new</code> keyword to create a new object from an arrow function, you will get an error.</strong></em></blockquote><h3 id=\"javascript-arrow-functions-and-this-value-1\">JavaScript arrow functions and <code>this</code> value</h3><h4 id=\"in-javascript-a-new-function-defines-its-own-this-value-however-it-is-not-the-case-for-the-arrow-function-see-the-following-example-1\"><strong>In JavaScript, a new function defines its own <code>this</code> value. However, it is not the case for the arrow function. See the following example</strong></h4><hr><p>function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    setTimeout(function () {      console.log(this.speed); // undefined    }, 1000);  };} let car = new Car();car.speedUp(50);</p><hr><p><strong>Inside the anonymous function of the <code>[setTimeout()](/javascript-bom/javascript-settimeout/)</code> function, the <code>this.speed</code> is <code>undefined</code>. The reason is that the <code>this</code> of the <a href=\"https://gist.github.com/javascript-anonymous-functions/\">anonymous function</a> shadows the <code>this</code> of the <code>speedUp()</code> method.</strong></p><h2 id=\"to-fix-this-you-assign-the-this-value-to-a-variable-that-doesnt-shadow-inside-the-anonymous-function-as-follows-1\">To fix this, you assign the <code>this</code> value to a variable that doesn't shadow inside the anonymous function as follows</h2><p>function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    let self = this;    setTimeout(function () {      console.log(self.speed);    }, 1000);  };} let car = new Car();car.speedUp(50); // 50;</p><hr><h2 id=\"unlike-an-anonymous-function-an-arrow-function-captures-the-this-value-of-the-enclosing-context-instead-of-creating-its-own-this-context-the-following-code-should-work-as-expected-1\">Unlike an anonymous function, an arrow function captures the <code>this</code> value of the enclosing context instead of creating its own <code>this</code> context. The following code should work as expected</h2><p>function Car() {  this.speed = 0; this.speedUp = function (speed) {    this.speed = speed;    setTimeout(() =&gt; console.log(this.speed), 1000);  };} let car = new Car();car.speedUp(50); // 50;</p><hr><h3 id=\"javascript-arrow-functions-and-the-arguments-object-1\">JavaScript arrow functions and the arguments object</h3><h2 id=\"an-arrow-function-doesnt-have-the-arguments-object-for-example-1\">An arrow function doesn't have the <code>arguments</code> object. For example</h2><p>function show() {  return (x) =&gt; x + arguments[0];} let display = show(10, 20);let result = display(5);console.log(result); // 15</p><hr><h5 id=\"the-arrow-function-inside-the-showme-function-references-the-arguments-object-however-this-arguments-object-belongs-to-the-show-function-not-the-arrow-function-1\">The arrow function inside the <code>showMe()</code> function references the <code>arguments</code> object. However, this <code>arguments</code> object belongs to the <code>show()</code> function, not the arrow function</h5><p>Also, an arrow function doesn't have the <code>[new.target](/es6/javascript-new-target/)</code> keyword.</p><h3 id=\"javascript-arrow-functions-and-the-prototype-property-1\">JavaScript arrow functions and the prototype property</h3><h2 id=\"when-you-define-a-function-using-a-function-keyword-the-function-has-a-property-called-prototypejavascript-prototype-1\">When you define a <a href=\"https://gist.github.com/javascript-function/\">function</a> using a <code>function</code> keyword, the function has a property called <code>[prototype](/javascript-prototype/)</code></h2><p>function dump(message) {  console.log(message);}console.log(dump.hasOwnProperty(\"prototype\")); // true</p><hr><p><strong>However, arrow functions don't have the <code>prototype</code> property:</strong></p><hr><p>let dump = (message) =&gt; console.log(message);console.log(dump.hasOwnProperty(\"prototype\")); // false</p><hr><blockquote>It is a good practice to use arrow functions for <a href=\"https://gist.github.com/javascript-callback/\">callbacks</a> and <a href=\"https://gist.github.com/javascript-closure/\">closures</a> because the syntax of arrow functions is cleaner.</blockquote><hr><h2 id=\"summary-1\">Summary</h2><ul><li><strong>Use the <code>(...args) =&gt; expression;</code> to define an arrow function.</strong></li><li><strong>Use the <code>(...args) =&gt; { statements }</code> to define an arrow function</strong>that has multiple statements.**</li><li><strong>An arrow function doesn't have its binding to <code>this</code> or <code>super</code>.</strong></li><li><strong>An arrow function doesn't have <code>arguments</code> object, <code>new.target</code> keyword, and <code>prototype</code> property.</strong></li></ul>","comment_id":"6155661dce2018003b838a82","plaintext":"Introduction to JavaScript arrow functions\n\n--------------------------------------------------------------------------------\n\n\n--------------------------------------------------------------------------------\n\n\n--------------------------------------------------------------------------------\n\n\n--------------------------------------------------------------------------------\n\nFROM MDN DOCS:\n====>Arrow Functions<=======\n\n\n\n**Differences & Limitations:**\n\n * Does not have its own bindings to this\n   [https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/this] \n   or super\n   [https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/super]\n   , and should not be used as methods\n   [https://gist.github.com/en-US/docs/Glossary/Method].\n * Does not have new.target\n   [https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/new.target] \n   keyword.\n * Not suitable for call\n   [https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call]\n   , apply\n   [https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply] \n   and bind\n   [https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind] \n   methods, which generally rely on establishing a scope\n   [https://gist.github.com/en-US/docs/Glossary/Scope].\n * Can not be used as constructors\n   [https://gist.github.com/en-US/docs/Glossary/Constructor].\n * Can not use yield\n   [https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/yield]\n   , within its body.\n\n\n\nComparing traditional functions to arrow functions\nLet's decompose a \"traditional anonymous function\" down to the simplest \"arrow\nfunction\" step-by-step:\n\n> Note: Each step along the way is a valid \"arrow function\".// Traditional\nAnonymous Functionfunction (a){  return a + 100;} // Arrow Function Break Down\n// 1. Remove the word \"function\" and place arrow between the argument and\nopening body bracket(a) => {  return a + 100;} // 2. Remove the body braces and\nword \"return\" -- the return is implied.(a) => a + 100; // 3. Remove the argument\nparenthesesa => a + 100;\n> Note: As shown above, the { braces } and ( parentheses ) and \"return\" are\nrequired in some cases.\nFor example, if you have multiple arguments or no arguments, you'll need to\nre-introduce parentheses around the arguments:// Traditional Anonymous\nFunctionfunction (a, b){  return a + b + 100;} // Arrow Function(a, b) => a + b\n+ 100; // Traditional Anonymous Function (no arguments)let a = 4;let b =\n2;function (){  return a + b + 100;} // Arrow Function (no arguments)let a =\n4;let b = 2;() => a + b + 100;\n\nLikewise, if the body requires additional lines of processing, you'll need to\nre-introduce braces PLUS the \"return\" (arrow functions do not magically guess\nwhat or when you want to \"return\"):// Traditional Anonymous Functionfunction (a,\nb){  let chuck = 42;  return a + b + chuck;} // Arrow Function(a, b) => {  let\nchuck = 42;  return a + b + chuck;}\n\nAnd finally, for named functions we treat arrow expressions like variables://\nTraditional Functionfunction bob (a){  return a + 100;} // Arrow Functionlet bob\n= a => a + 100;\n\nSyntax\nBasic syntax\nOne param. With simple expression return is not needed:param => expression\n\nMultiple params require parentheses. With simple expression return is not\nneeded:(param1, paramN) => expression\n\nMultiline statements require body braces and return:param => {  let a = 1;\n return a + param;}\n\nMultiple params require parentheses. Multiline statements require body braces\nand return:(param1, paramN) => {   let a = 1;   return a + param1 + paramN;}\n\nAdvanced syntax\nTo return an object literal expression requires parentheses around\nexpression:params => ({foo: \"a\"}) // returning the object {foo: \"a\"}\n\nRest parameters\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters] \nare supported:(a, b, ...r) => expression\n\nDefault parameters\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters] \nare supported:(a=400, b=20, c) => expression\n\nDestructuring\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment] \nwithin params supported:([a, b] = [10, 20]) => a + b;  // result is 30({ a, b }\n= { a: 10, b: 20 }) => a + b; // result is 30\n\nDescription\nArrow functions used as methods\nAs stated previously, arrow function expressions are best suited for non-method\nfunctions. Let's see what happens when we try to use them as methods:'use\nstrict'; var obj = { // does not create a new scope  i: 10,  b: () =>\nconsole.log(this.i, this),  c: function() {    console.log(this.i, this);  }}\nobj.b(); // prints undefined, Window {...} (or the global object)obj.c(); //\nprints 10, Object {...}\n\nArrow functions do not have their own this. Another example involving\n{{jsxref(\"Object.defineProperty()\")}}:'use strict'; var obj = {  a: 10};\nObject.defineProperty(obj, 'b', {  get: () => {    console.log(this.a, typeof\nthis.a, this); // undefined 'undefined' Window {...} (or the global object)  \n return this.a + 10; // represents global object 'Window', therefore 'this.a'\nreturns 'undefined'  }});\n\ncall, apply and bind\nThe call\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call]\n, apply\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply] \nand bind\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind]\nmethods are NOT suitable for Arrow functions -- as they were designed to allow\nmethods to execute within different scopes -- because Arrow functions establish\n\"this\" based on the scope the Arrow function is defined within.\n\nFor example call\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call]\n, apply\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply] \nand bind\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind]\nwork as expected with Traditional functions, because we establish the scope for\neach of the methods:// ----------------------// Traditional Example//\n----------------------// A simplistic object with its very own \"this\".var obj =\n{    num: 100} // Setting \"num\" on window to show how it is NOT used.window.num\n= 2020; // yikes! // A simple traditional function to operate on \"this\"var add =\nfunction (a, b, c) {  return this.num + a + b + c;} // callvar result =\nadd.call(obj, 1, 2, 3) // establishing the scope as \"obj\"console.log(result) //\nresult 106 // applyconst arr = [1, 2, 3]var result = add.apply(obj, arr) //\nestablishing the scope as \"obj\"console.log(result) // result 106 // bindvar\nresult = add.bind(obj) // establishing the scope as \"obj\"console.log(result(1,\n2, 3)) // result 106\n\nWith Arrow functions, since our add function is essentially created on the \nwindow (global) scope, it will assume this is the window.//\n----------------------// Arrow Example// ---------------------- // A simplistic\nobject with its very own \"this\".var obj = {    num: 100} // Setting \"num\" on\nwindow to show how it gets picked up.window.num = 2020; // yikes! // Arrow\nFunctionvar add = (a, b, c) => this.num + a + b + c; //\ncallconsole.log(add.call(obj, 1, 2, 3)) // result 2026 // applyconst arr = [1,\n2, 3]console.log(add.apply(obj, arr)) // result 2026 // bindconst bound =\nadd.bind(obj)console.log(bound(1, 2, 3)) // result 2026\n\nPerhaps the greatest benefit of using Arrow functions is with DOM-level methods\n(setTimeout, setInterval, addEventListener) that usually required some kind of\nclosure, call, apply or bind to ensure the function executed in the proper\nscope.\n\nTraditional Example:var obj = {    count : 10,    doSomethingLater : function\n(){        setTimeout(function(){ // the function executes on the window scope  \n         this.count++;            console.log(this.count);        }, 300);    }}\nobj.doSomethingLater(); // console prints \"NaN\", because the property \"count\" is\nnot in the window scope.\n\nArrow Example:var obj = {    count : 10,    doSomethingLater : function(){      \n // The traditional function binds \"this\" to the \"obj\" context.      \n setTimeout( () => {            // Since the arrow function doesn't have its own\nbinding and            // setTimeout (as a function call) doesn't create a\nbinding            // itself, the \"obj\" context of the traditional function will\n           // be used within.            this.count++;          \n console.log(this.count);        }, 300);    }} obj.doSomethingLater();\n\nNo binding of arguments\nArrow functions do not have their own arguments object\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/arguments]\n. Thus, in this example, arguments is a reference to the arguments of the\nenclosing scope:var arguments = [1, 2, 3];var arr = () => arguments[0]; arr();\n// 1 function foo(n) {  var f = () => arguments[0] + n; // foo's implicit\narguments binding. arguments[0] is n  return f();} foo(3); // 3 + 3 = 6\n\nIn most cases, using rest parameters\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters] \nis a good alternative to using an arguments object.function foo(n) {  var f =\n(...args) => args[0] + n;  return f(10);} foo(1); // 11\n\nUse of the new operator\nArrow functions cannot be used as constructors and will throw an error when used\nwith new.var Foo = () => {};var foo = new Foo(); // TypeError: Foo is not a\nconstructor\n\nUse of prototype property\nArrow functions do not have a prototype property.var Foo = () =>\n{};console.log(Foo.prototype); // undefined\n\nUse of the yield keyword\nThe yield\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/yield] \nkeyword may not be used in an arrow function's body (except when permitted\nwithin functions further nested within it). As a consequence, arrow functions\ncannot be used as generators.\n\nFunction body\nArrow functions can have either a \"concise body\" or the usual \"block body\".\n\nIn a concise body, only an expression is specified, which becomes the implicit\nreturn value. In a block body, you must use an explicit return statement.var\nfunc = x => x * x;// concise body syntax, implied \"return\" var func = (x, y) =>\n{ return x + y; };// with block body, explicit \"return\" needed\n\nReturning object literals\nKeep in mind that returning object literals using the concise body syntax params\n=> {object:literal} will not work as expected.var func = () => { foo: 1 };//\nCalling func() returns undefined! var func = () => { foo: function() {} };//\nSyntaxError: function statement requires a name\n\nThis is because the code inside braces ({}) is parsed as a sequence of\nstatements (i.e. foo is treated like a label, not a key in an object literal).\n\nYou must wrap the object literal in parentheses:var func = () => ({ foo: 1 });\n\nLine breaks\nAn arrow function cannot contain a line break between its parameters and its\narrow.var func = (a, b, c)  => 1;// SyntaxError: expected expression, got '=>'\n\nHowever, this can be amended by putting the line break after the arrow or using\nparentheses/braces as seen below to ensure that the code stays pretty and\nfluffy. You can also put line breaks between arguments.var func = (a, b, c) =>\n 1; var func = (a, b, c) => (  1); var func = (a, b, c) => {  return 1}; var\nfunc = (  a,  b,  c) => 1; // no SyntaxError thrown\n\nParsing order\nAlthough the arrow in an arrow function is not an operator, arrow functions have\nspecial parsing rules that interact differently with operator precedence\n[https://gist.github.com/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence] \ncompared to regular functions.let callback; callback = callback || function()\n{}; // ok callback = callback || () => {};// SyntaxError: invalid arrow-function\narguments callback = callback || (() => {});    // ok\n\nExamples\nBasic usage// An empty arrow function returns undefinedlet empty = () => {}; (()\n=> 'foobar')();// Returns \"foobar\"// (this is an Immediately Invoked Function\nExpression) var simple = a => a > 15 ? 15 : a;simple(16); // 15simple(10); // 10\nlet max = (a, b) => a > b ? a : b; // Easy array filtering, mapping, ... var arr\n= [5, 6, 13, 0, 1, 18, 23]; var sum = arr.reduce((a, b) => a + b);// 66 var even\n= arr.filter(v => v % 2 == 0);// [6, 0, 18] var double = arr.map(v => v * 2);//\n[10, 12, 26, 0, 2, 36, 46] // More concise promise chainspromise.then(a => {  //\n...}).then(b => {  // ...}); // Parameterless arrow functions that are visually\neasier to parsesetTimeout( () => {  console.log('I happen sooner');  setTimeout(\n() => {    // deeper code    console.log('I happen later');  }, 1);}, 1);\n\n--------------------------------------------------------------------------------\n\n\n--------------------------------------------------------------------------------\n\n\n--------------------------------------------------------------------------------\n\n\n--------------------------------------------------------------------------------\n\n> ES6 arrow functions provide you with an alternative way to write a shorter\nsyntax compared to the function expression.\nThe following example defines a function expression that returns the sum of two\nnumbers:\n\n\n--------------------------------------------------------------------------------\n\nlet add = function (x, y) {  return x + y;}; console.log(add(10, 20)); // 30\n\n\n--------------------------------------------------------------------------------\n\nThe following example is equivalent to the above add() function expression but\nuse an arrow function instead:\n\n\n--------------------------------------------------------------------------------\n\nlet add = (x, y) => x + y; console.log(add(10, 20)); // 30;\n\n\n--------------------------------------------------------------------------------\n\nIn this example, the arrow function has one expression x + y so it returns the\nresult of the expression.\n\nHowever, if you use the block syntax, you need to specify the return keyword:\n\n\n--------------------------------------------------------------------------------\n\nlet add = (x, y) => {  return x + y;};\n\n\n--------------------------------------------------------------------------------\n\nThetypeof operator returns function indicating the type of arrow function.\n\n\n--------------------------------------------------------------------------------\n\nconsole.log(typeof add); // function\n\n\n--------------------------------------------------------------------------------\n\nThe arrow function is also an instance of the Function type\n[https://gist.github.com/bgoonz/javascript-function-type/] as shown in the\nfollowing example:\n\n\n--------------------------------------------------------------------------------\n\nconsole.log(add instanceof Function); // true\n\n\n--------------------------------------------------------------------------------\n\nJavaScript arrow functions with multiple parameters\nIf an arrow function has two or more parameters, you use the following syntax:\n\n\n--------------------------------------------------------------------------------\n\n(p1, p2, ..., pn) => expression;\n\n\n--------------------------------------------------------------------------------\n\nThe following expression:\n\n\n--------------------------------------------------------------------------------\n\n=> expression\n\n\n--------------------------------------------------------------------------------\n\nis equivalent to the following expression:\n\n\n--------------------------------------------------------------------------------\n\n=> { return expression; }\n\n\n--------------------------------------------------------------------------------\n\nFor example, to sort an array\n[https://gist.github.com/bgoonz/javascript-array-sort/] of numbers in the\ndescending order, you use the sort() method of the array object as follows:\n\n\n--------------------------------------------------------------------------------\n\nlet numbers = [4, 2, 6];numbers.sort(function (a, b) {  return b -\na;});console.log(numbers); // [6,4,2]\n\n\n--------------------------------------------------------------------------------\n\nThe code is more concise with the arrow function syntax:\n\n\n--------------------------------------------------------------------------------\n\nlet numbers = [4, 2, 6];numbers.sort((a, b) => b - a);console.log(numbers); //\n[6,4,2]\n\n\n--------------------------------------------------------------------------------\n\nJavaScript arrow functions with a single parameter\nIf an arrow function takes a single parameter, you use the following syntax:\n\n\n--------------------------------------------------------------------------------\n\n(p1) => {  statements;};\n\n\n--------------------------------------------------------------------------------\n\nNote that you can omit the parentheses as follows:\n\n\n--------------------------------------------------------------------------------\n\n(p) => {  statements;};\n\n\n--------------------------------------------------------------------------------\n\nThe following example uses an arrow function as an argument of the \n[map()](/javascript-array-map/) method that transforms an array of strings into\nan array of the string's lengths.\n\n\n--------------------------------------------------------------------------------\n\nlet names = [\"John\", \"Mac\", \"Peter\"];let lengths = names.map((name) =>\nname.length); console.log(lengths);\n\n\n--------------------------------------------------------------------------------\n\nOutput\n[4, 3, 5];\n\n\n--------------------------------------------------------------------------------\n\n> Code language: JSON / JSON with Comments (json)\nJavaScript arrow functions with no parameter\n> If the arrow function has no parameter, you need to use parentheses, like this:\n\n--------------------------------------------------------------------------------\n\n() => {  statements;};\n\n\n--------------------------------------------------------------------------------\n\nFor example\nlet logDoc = () => console.log(window.document);logDoc();\n\n\n--------------------------------------------------------------------------------\n\nLine break between parameter definition and arrow\n> JavaScript doesn't allow you to have a line break between the parameter\ndefinition and the arrow (=>) in an arrow function.\nFor example, the following code causes a SyntaxError\nlet multiply = (x,y)=> x * y;\n\n\n--------------------------------------------------------------------------------\n\nHowever, the following code works perfectly fine:\n\n\n--------------------------------------------------------------------------------\n\nlet multiply = (x, y) => x * y;\n\n\n--------------------------------------------------------------------------------\n\nJavaScript allows you to have line breaks between parameters as shown in the\nfollowing example:\n\n\n--------------------------------------------------------------------------------\n\nlet multiply = (x, y) => x * y;\n\n\n--------------------------------------------------------------------------------\n\nStatements & expressions in the arrow function body\nIn JavaScript, an expression evaluates to a value as shown in the following\nexample\n\n--------------------------------------------------------------------------------\n\n10 + 20;\n\n\n--------------------------------------------------------------------------------\n\nA statement does a specific task such as:\n\n\n--------------------------------------------------------------------------------\n\n**If (x === y) {  console.log(\"x equals y\");}\n\n\n--------------------------------------------------------------------------------\n\nIf you use an expression in the body of an arrow function, you don't need to use\nthe curly braces.\n\n\n--------------------------------------------------------------------------------\n\nlet square = (x) => x * x;\n\n\n--------------------------------------------------------------------------------\n\nHowever, if you use a statement, you must wrap it inside a pair of curly braces\nas in the following example:#####\n\n\n--------------------------------------------------------------------------------\n\nlet except = (msg) => {  throw msg;};\n\n\n--------------------------------------------------------------------------------\n\nJavaScript arrow functions and object literal\nConsider the following example\n\n--------------------------------------------------------------------------------\n\nlet setColor = function (color) {  return { value: color };}; let\nbackgroundColor = setColor(\"Red\");console.log(backgroundColor.value); // \"Red\"\n\n\n--------------------------------------------------------------------------------\n\nThe setColor() function expression returns an object that has the value property\nset to the color argument.\n\nIf you use the following syntax to return an object literal from an arrow\nfunction, you will get an error.\n\n\n--------------------------------------------------------------------------------\n\n(p) => {  object: literal;};\n\n\n--------------------------------------------------------------------------------\n\nFor example, the following code causes an error\nlet setColor = (color) => {  value: color;};\n\n\n--------------------------------------------------------------------------------\n\n**Since both block and object literal use curly brackets, the JavasScript engine\ncannot distinguish between a block and an object.\n\nTo fix this, you need to wrap the object literal in parentheses as follows\nlet setColor = (color) => ({ value: color });\n\n\n--------------------------------------------------------------------------------\n\nArrow function vs. regular function\nThere are two main differences between an arrow function and a regular function\n 1. First, in the arrow function, the this are lexical. It means that the arrow\n    function uses these variables (or constructs) from the enclosing lexical\n    scope.\n 2. Second, an arrow function cannot be used as a function constructor. If you\n    use the new keyword to create a new object from an arrow function, you will\n    get an error.\n\n\n--------------------------------------------------------------------------------\n\n\n--------------------------------------------------------------------------------\n\nMore On THIS\n_**More On THIS**_\n\nSummary: in this tutorial, you will  learn about the JavaScript this value and\nunderstand it clearly in various contexts.\n\nIf you have been working with other programming languages such as C++, Java, and \nPHP [https://www.phptutorial.net/php-oop/php-this/], you're already familiar\nwith the this keyword\nIn these languages, the thiskeyword represents the instance of the current\nobject in the method of the class. And the this keyword is only relevant within\na method of the class, meaning that you cannot use it outside of a method\n> JavaScript has the this keyword that behaves differently from other programming\nlanguages, which may confuse you at first.\nIn JavaScript, you can use the this keyword in the global and function contexts\n[https://gist.github.com/javascript-execution-context/]. Moreover, the behavior\nof thethis keyword changes between strict and non-strict modes\nWhat is the this keyword\nThe this references the object of which the function is a property. In other\nwords, the this references the object that is currently calling the function\nSuppose that you have an object called counter. This object counter has a method\ncalled next().\n\nWhen you call the next() method, you can access the this object.const counter =\n{  count: 0,  next: function () {    return ++this.count;  },}; counter.next();\n\n\n--------------------------------------------------------------------------------\n\nInside the next() function, the this references the counter object.\n\nSee the following method call:counter.next();\n\n\n--------------------------------------------------------------------------------\n\n> Code language: CSS (css)\nThe next() is a function that is the property of the counter object. Therefore,\ninside the next() function, the this references the counter object\nBy the way, when a function is a property of an object, it is called a method.\n\nGlobal context\nIn the global context, the this references the global object\n[https://gist.github.com/es-next/javascript-globalthis/], which is the window \nobject on the web browser or global object on Node.js\nThis behavior is consistent whether the strict mode is applied or not, like\nthis:console.log(this === window); // true\n\n\n--------------------------------------------------------------------------------\n\nIf you assign a property to this object in the global context, JavaScript will\nadd the property to the global object as shown in the following\nexamplethis.color = \"Red\";console.log(window.color); // 'Red'\n\n--------------------------------------------------------------------------------\n\nFunction context\nIn JavaScript, you can invoke a function\n[https://gist.github.com/bgoonz/javascript-function/] in the following ways\n * Function invocation\n   [https://gist.github.com/javascript-this/#function_invocation]\n * Method invocation\n   [https://gist.github.com/javascript-this/#method_invocation]\n * Constructor invocation\n   [https://gist.github.com/javascript-this/#constructor_invocation]\n * Indirect invocation\n   [https://gist.github.com/javascript-this/#indirect_invocation]\n\nEach function invocation defines its own context, therefore, the this behaves\ndifferently than you may expect.\n\n1) Simple function invocation\nIn the non-strict mode, the this references the global object when the function\nis called as followsfunction show() {  console.log(this === window); // true}\nshow();\n\n--------------------------------------------------------------------------------\n\nWhen you call the show() function, the this references the global object\n[https://gist.github.com/es-next/javascript-globalthis/], which is the window on\nthe web browser and global on Node.js.\n\nCalling the show() function is the same as:window.show();\n\n\n--------------------------------------------------------------------------------\n\nIn the strict mode, JavaScript sets the this to undefined. #### Consider the\nfollowing example\"use strict\"; function show() {  console.log(this ===\nundefined);} show();\n\n--------------------------------------------------------------------------------\n\nTo set the strict mode, you can use the directive \"use strict\" at the beginning\nof the file.\n\nIf you want to apply the strict mode to a specific function only, you place it\nat the top of the function body\nNote that the strict mode has been available since ECMAScript 5.1. The strict \nmode applies to both function and inner functions within the function. Here is\nan example:function show() {  \"use strict\";  console.log(this === undefined); //\ntrue function display() {    console.log(this === undefined); // true  }\n display();} show();\n\n\n--------------------------------------------------------------------------------\n\nOutput:true;true;\n\n\n--------------------------------------------------------------------------------\n\nIn the display() inner function, The this also set to undefined as shown in the\nconsole\n2) Method invocation\nWhen you call a method of an object, JavaScript sets this to the object that\nowns the method. See the following car object:let car = {  brand: \"Honda\",\n getBrand: function () {    return this.brand;  },};\nconsole.log(car.getBrand()); // Honda\n\n\n--------------------------------------------------------------------------------\n\nIn this example, the this object in the getBrand() method references the car \nobject\n**Since a method is a property of an object which is a value, you can store it\nin a variable.let brand = car.getBrand;\n\n\n--------------------------------------------------------------------------------\n\nAnd then call the method via the variableconsole.log(brand()); // undefined\n\n\n--------------------------------------------------------------------------------\n\nYou get undefined instead of \"Honda\" because when you call a method without\nspecifying its object, JavaScript sets this to the global object in non-strict\nmode and undefined in the strict mode.\n\nTo fix this issue, you use the [bind()](/javascript-bind/) method of the \nFunction.prototype object. The bind() method creates a new function whose the \nthis keyword is set to a specified value.let brand =\ncar.getBrand.bind(car);console.log(brand()); // Honda\n\n\n--------------------------------------------------------------------------------\n\nIn this example, when you call the brand() method, the this keyword is bound to\nthe car object. For examplelet car = {  brand: \"Honda\",  getBrand: function () {\n   return this.brand;  },}; let bike = {  brand: \"Harley Davidson\",}; let brand\n= car.getBrand.bind(bike);console.log(brand());\n\n--------------------------------------------------------------------------------\n\nOutput:Harley Davidson\n\n\n--------------------------------------------------------------------------------\n\nIn this example, the bind() method sets the this to the bike object, therefore,\nyou see the value of the brand property of the bike object on the console\n3) Constructor invocation\nWhen you use the new keyword to create an instance of a function object, you use\nthe function as a constructor.\n\nThe following example declares a Car function, then invokes it as a\nconstructorfunction Car(brand) {  this.brand = brand;} Car.prototype.getBrand =\nfunction () {  return this.brand;}; var car = new\nCar(\"Honda\");console.log(car.getBrand());\n\n--------------------------------------------------------------------------------\n\nThe expression new Car('Honda') is a constructor invocation of the Car function\n> JavaScript creates a new object and sets this to the newly created object. This\npattern works great with only one potential problem.\nNow, you can invoke the Car() as a function or as a constructor. If you omit the \nnew keyword as follows:var bmw = Car(\"BMW\");console.log(bmw.brand);// =>\nTypeError: Cannot read property 'brand' of undefined\n\n\n--------------------------------------------------------------------------------\n\n**Since the this value in the Car() sets to the global object, the bmw.brand \nreturns undefined.\n\nTo make sure that the Car() function is always invoked using constructor\ninvocation, you add a check at the beginning of the Car() function as\nfollows:function Car(brand) {  if (!(this instanceof Car)) {    throw\nError(\"Must use the new operator to call the function\");  }  this.brand =\nbrand;}\n\n\n--------------------------------------------------------------------------------\n\nES6 introduced a meta-property named new.target\n[https://gist.github.com/bgoonz/es6/javascript-new-target/] that allows you to\ndetect whether a function is invoked as a simple invocation or as a constructor.\n\nYou can modify the Car() function that uses the new.target metaproperty as\nfollows:function Car(brand) {  if (!new.target) {    throw Error(\"Must use the\nnew operator to call the function\");  }  this.brand = brand;}\n\n\n--------------------------------------------------------------------------------\n\n4) Indirect Invocation\nIn JavaScript, functions are first-class citizens\n[https://gist.github.com/javascript-functions-are-first-class-citizens/]. In\nother words, functions are objects, which are instances of the Function type\n[https://gist.github.com/bgoonz/javascript-function-type/]\nThe Function type has two methods: [call()](/javascript-call/) and \n[apply()](/javascript-apply-method/) . These methods allow you to set the this \nvalue when calling a function. For examplefunction getBrand(prefix) {\n console.log(prefix + this.brand);} let honda = {  brand: \"Honda\",};let audi = {\n brand: \"Audi\",}; getBrand.call(honda, \"It's a \");getBrand.call(audi, \"It's an\n\");\n\n--------------------------------------------------------------------------------\n\nOutput:It's a HondaIt's an Audi\n\n\n--------------------------------------------------------------------------------\n\nIn this example, we called the getBrand() function indirectly using the call() \nmethod of the getBrand function. We passed honda andaudi object as the first\nargument of the call() method, therefore, we got the corresponding brand in each\ncall\nThe apply() method is similar to the call() method except that its second\nargument is an array of argumentsgetBrand.apply(honda, [\"It's a \"]); // \"It's a\nHonda\"getBrand.apply(audi, [\"It's an \"]); // \"It's a Audi\"\n\n--------------------------------------------------------------------------------\n\nArrow functions\nES6 [https://gist.github.com/bgoonz/es6/]introduced a new concept named arrow\nfunction [https://gist.github.com/bgoonz/es6/javascript-arrow-function/]. In\narrow functions, JavaScript sets the this lexically.\n\nIt means the arrow function does not create its own execution context\n[https://gist.github.com/javascript-execution-context/] but inherits the this \nfrom the outer function where the arrow function is defined. See the following\nexample:let getThis = () => this;console.log(getThis() === window); // true\n\n\n--------------------------------------------------------------------------------\n\nIn this example, the this value is set to the global object i.e., window in the\nweb browser\n**Since an arrow function does not create its own execution context, defining a\nmethod using an arrow function will cause an issue. For example:function Car() {\n this.speed = 120;} Car.prototype.getSpeed = () => {  return this.speed;}; var\ncar = new Car();car.getSpeed(); // TypeError\n\n\n--------------------------------------------------------------------------------\n\nInside the getSpeed() method, the this value reference the global object, not\nthe Car object. Therefore the car.getSpeed() invocation causes an error because\nthe global object does not have the speed property.\n\nJavaScript arrow functions and this value\nIn JavaScript, a new function defines its own this value. However, it is not the\ncase for the arrow function. See the following example\n\n--------------------------------------------------------------------------------\n\nfunction Car() {  this.speed = 0; this.speedUp = function (speed) {  \n this.speed = speed;    setTimeout(function () {      console.log(this.speed);\n// undefined    }, 1000);  };} let car = new Car();car.speedUp(50);\n\n\n--------------------------------------------------------------------------------\n\nInside the anonymous function of the \n[setTimeout()](/javascript-bom/javascript-settimeout/) function, the this.speed \nis undefined. The reason is that the this of the anonymous function\n[https://gist.github.com/javascript-anonymous-functions/] shadows the this of\nthe speedUp() method.\n\nTo fix this, you assign the this value to a variable that doesn't shadow inside\nthe anonymous function as follows\nfunction Car() {  this.speed = 0; this.speedUp = function (speed) {  \n this.speed = speed;    let self = this;    setTimeout(function () {    \n console.log(self.speed);    }, 1000);  };} let car = new Car();car.speedUp(50);\n// 50;\n\n\n--------------------------------------------------------------------------------\n\nUnlike an anonymous function, an arrow function captures the this value of the\nenclosing context instead of creating its own this context. The following code\nshould work as expected\nfunction Car() {  this.speed = 0; this.speedUp = function (speed) {  \n this.speed = speed;    setTimeout(() => console.log(this.speed), 1000);  };}\nlet car = new Car();car.speedUp(50); // 50;\n\n\n--------------------------------------------------------------------------------\n\nJavaScript arrow functions and the arguments object\nAn arrow function doesn't have the arguments object. For example\nfunction show() {  return (x) => x + arguments[0];} let display = show(10,\n20);let result = display(5);console.log(result); // 15\n\n\n--------------------------------------------------------------------------------\n\nThe arrow function inside the showMe() function references the arguments object.\nHowever, this arguments object belongs to the show() function, not the arrow\nfunction\nAlso, an arrow function doesn't have the \n[new.target](/es6/javascript-new-target/) keyword.\n\nJavaScript arrow functions and the prototype property\nWhen you define a function [https://gist.github.com/javascript-function/] using\na function keyword, the function has a property called \n[prototype](/javascript-prototype/)\nfunction dump(message) {\n console.log(message);}console.log(dump.hasOwnProperty(\"prototype\")); // true\n\n\n--------------------------------------------------------------------------------\n\nHowever, arrow functions don't have the prototype property:\n\n\n--------------------------------------------------------------------------------\n\nlet dump = (message) =>\nconsole.log(message);console.log(dump.hasOwnProperty(\"prototype\")); // false\n\n\n--------------------------------------------------------------------------------\n\nIt is a good practice to use arrow functions for callbacks\n[https://gist.github.com/javascript-callback/] and closures\n[https://gist.github.com/javascript-closure/] because the syntax of arrow\nfunctions is cleaner.\n\nSummary\n * Use the (...args) => expression; to define an arrow function.\n * Use the (...args) => { statements } to define an arrow function that has\n   multiple statements.\n * An arrow function doesn't have its binding to this or super.\n * An arrow function doesn't have arguments object, new.target keyword, and \n   prototype property.Introduction to JavaScript arrow functions\n\n\n--------------------------------------------------------------------------------\n\nES6 arrow functions provide you with an alternative way to write a shorter\nsyntax compared to the function expression.\n\nThe following example defines a function expression that returns the sum of two\nnumbers:\n\n\n--------------------------------------------------------------------------------\n\nlet add = function (x, y) {  return x + y;}; console.log(add(10, 20)); // 30\n\n\n--------------------------------------------------------------------------------\n\nThe following example is equivalent to the above add() function expression but\nuse an arrow function instead:\n\n\n--------------------------------------------------------------------------------\n\nlet add = (x, y) => x + y; console.log(add(10, 20)); // 30;\n\n\n--------------------------------------------------------------------------------\n\nIn this example, the arrow function has one expression x + y so it returns the\nresult of the expression\nHowever, if you use the block syntax, you need to specify the return keyword:\n\n\n--------------------------------------------------------------------------------\n\nlet add = (x, y) => {  return x + y;};\n\n\n--------------------------------------------------------------------------------\n\nThetypeof operator returns function indicating the type of arrow function.\n\n\n--------------------------------------------------------------------------------\n\nconsole.log(typeof add); // function\n\n\n--------------------------------------------------------------------------------\n\nThe arrow function is also an instance of the Function type\n[https://gist.github.com/bgoonz/javascript-function-type/] as shown in the\nfollowing example:\n\n\n--------------------------------------------------------------------------------\n\nconsole.log(add instanceof Function); // true\n\n\n--------------------------------------------------------------------------------\n\nJavaScript arrow functions with multiple parameters\nIf an arrow function has two or more parameters, you use the following syntax:\n\n\n--------------------------------------------------------------------------------\n\n(p1, p2, ..., pn) => expression;\n\n\n--------------------------------------------------------------------------------\n\nThe following expression:\n\n\n--------------------------------------------------------------------------------\n\n=> expression\n\n\n--------------------------------------------------------------------------------\n\nis equivalent to the following expression\n=> { return expression; }\n\n\n--------------------------------------------------------------------------------\n\nFor example, to sort an array\n[https://gist.github.com/bgoonz/javascript-array-sort/] of numbers in the\ndescending order, you use the sort() method of the array object as follows\nlet numbers = [4, 2, 6];numbers.sort(function (a, b) {  return b -\na;});console.log(numbers); // [6,4,2]\n\n\n--------------------------------------------------------------------------------\n\nThe code is more concise with the arrow function syntax:\n\n\n--------------------------------------------------------------------------------\n\nlet numbers = [4, 2, 6];numbers.sort((a, b) => b - a);console.log(numbers); //\n[6,4,2]\n\n\n--------------------------------------------------------------------------------\n\nJavaScript arrow functions with a single parameter\nIf an arrow function takes a single parameter, you use the following\nsyntax:#####\n\n\n--------------------------------------------------------------------------------\n\n(p1) => {  statements;};\n\n\n--------------------------------------------------------------------------------\n\nNote that you can omit the parentheses as follows\n(p) => {  statements;};\n\n\n--------------------------------------------------------------------------------\n\nThe following example uses an arrow function as an argument of the \n[map()](/javascript-array-map/) method that transforms an array of strings into\nan array of the string's lengths.\n\n\n--------------------------------------------------------------------------------\n\nlet names = [\"John\", \"Mac\", \"Peter\"];let lengths = names.map((name) =>\nname.length); console.log(lengths);\n\n\n--------------------------------------------------------------------------------\n\nOutput\n[4, 3, 5];\n\n\n--------------------------------------------------------------------------------\n\n> Code language: JSON / JSON with Comments (json)\nJavaScript arrow functions with no parameter\n> If the arrow function has no parameter, you need to use parentheses, like this:\n\n--------------------------------------------------------------------------------\n\n() => {  statements;};\n\n\n--------------------------------------------------------------------------------\n\nFor example\nlet logDoc = () => console.log(window.document);logDoc();\n\n\n--------------------------------------------------------------------------------\n\nLine break between parameter definition and arrow\n> JavaScript doesn't allow you to have a line break between the parameter\ndefinition and the arrow (=>) in an arrow function.\nFor example, the following code causes a SyntaxError\nlet multiply = (x,y)=> x * y;\n\n\n--------------------------------------------------------------------------------\n\nHowever, the following code works perfectly fine:\n\n\n--------------------------------------------------------------------------------\n\nlet multiply = (x, y) => x * y;\n\n\n--------------------------------------------------------------------------------\n\n> JavaScript allows you to have line breaks between parameters as shown in the\nfollowing example:\n\n--------------------------------------------------------------------------------\n\nlet multiply = (x, y) => x * y;\n\n\n--------------------------------------------------------------------------------\n\nStatements & expressions in the arrow function body\nIn JavaScript, an expression evaluates to a value as shown in the following\nexample\n\n--------------------------------------------------------------------------------\n\n10 + 20;\n\n\n--------------------------------------------------------------------------------\n\nA statement does a specific task such as\n**If (x === y) {  console.log(\"x equals y\");}\n\n\n--------------------------------------------------------------------------------\n\nIf you use an expression in the body of an arrow function, you don't need to use\nthe curly braces.\n\n\n--------------------------------------------------------------------------------\n\nlet square = (x) => x * x;\n\n\n--------------------------------------------------------------------------------\n\nHowever, if you use a statement, you must wrap it inside a pair of curly braces\nas in the following example:\n\n\n--------------------------------------------------------------------------------\n\nlet except = (msg) => {  throw msg;};\n\n\n--------------------------------------------------------------------------------\n\nJavaScript arrow functions and object literal\nConsider the following example\n\n--------------------------------------------------------------------------------\n\nlet setColor = function (color) {  return { value: color };}; let\nbackgroundColor = setColor(\"Red\");console.log(backgroundColor.value); // \"Red\"\n\n\n--------------------------------------------------------------------------------\n\nThe setColor() function expression returns an object that has the value property\nset to the color argument\nIf you use the following syntax to return an object literal from an arrow\nfunction, you will get an error.\n\n\n--------------------------------------------------------------------------------\n\n(p) => {  object: literal;};\n\n\n--------------------------------------------------------------------------------\n\nFor example, the following code causes an error\nlet setColor = (color) => {  value: color;};\n\n\n--------------------------------------------------------------------------------\n\nSince both block and object literal use curly brackets, the JavasScript engine\ncannot distinguish between a block and an object.\n\nTo fix this, you need to wrap the object literal in parentheses as follows\nlet setColor = (color) => ({ value: color });\n\n\n--------------------------------------------------------------------------------\n\nArrow function vs. regular function\nThere are two main differences between an arrow function and a regular function\n> 1. First, in the arrow function, the [this](/javascript-this/), arguments, super\n, [new.target](/es6/javascript-new-target/) are lexical. It means that the arrow\nfunction uses these variables (or constructs) from the enclosing lexical scope.\n2. Second, an arrow function cannot be used as a function constructor. If you\nuse the new keyword to create a new object from an arrow function, you will get\nan error.\nJavaScript arrow functions and this value\nIn JavaScript, a new function defines its own this value. However, it is not the\ncase for the arrow function. See the following example\n\n--------------------------------------------------------------------------------\n\nfunction Car() {  this.speed = 0; this.speedUp = function (speed) {  \n this.speed = speed;    setTimeout(function () {      console.log(this.speed);\n// undefined    }, 1000);  };} let car = new Car();car.speedUp(50);\n\n\n--------------------------------------------------------------------------------\n\nInside the anonymous function of the \n[setTimeout()](/javascript-bom/javascript-settimeout/) function, the this.speed \nis undefined. The reason is that the this of the anonymous function\n[https://gist.github.com/javascript-anonymous-functions/] shadows the this of\nthe speedUp() method.\n\nTo fix this, you assign the this value to a variable that doesn't shadow inside\nthe anonymous function as follows\nfunction Car() {  this.speed = 0; this.speedUp = function (speed) {  \n this.speed = speed;    let self = this;    setTimeout(function () {    \n console.log(self.speed);    }, 1000);  };} let car = new Car();car.speedUp(50);\n// 50;\n\n\n--------------------------------------------------------------------------------\n\nUnlike an anonymous function, an arrow function captures the this value of the\nenclosing context instead of creating its own this context. The following code\nshould work as expected\nfunction Car() {  this.speed = 0; this.speedUp = function (speed) {  \n this.speed = speed;    setTimeout(() => console.log(this.speed), 1000);  };}\nlet car = new Car();car.speedUp(50); // 50;\n\n\n--------------------------------------------------------------------------------\n\nJavaScript arrow functions and the arguments object\nAn arrow function doesn't have the arguments object. For example\nfunction show() {  return (x) => x + arguments[0];} let display = show(10,\n20);let result = display(5);console.log(result); // 15\n\n\n--------------------------------------------------------------------------------\n\nThe arrow function inside the showMe() function references the arguments object.\nHowever, this arguments object belongs to the show() function, not the arrow\nfunction\nAlso, an arrow function doesn't have the \n[new.target](/es6/javascript-new-target/) keyword.\n\nJavaScript arrow functions and the prototype property\nWhen you define a function [https://gist.github.com/javascript-function/] using\na function keyword, the function has a property called \n[prototype](/javascript-prototype/)\nfunction dump(message) {\n console.log(message);}console.log(dump.hasOwnProperty(\"prototype\")); // true\n\n\n--------------------------------------------------------------------------------\n\nHowever, arrow functions don't have the prototype property:\n\n\n--------------------------------------------------------------------------------\n\nlet dump = (message) =>\nconsole.log(message);console.log(dump.hasOwnProperty(\"prototype\")); // false\n\n\n--------------------------------------------------------------------------------\n\n> It is a good practice to use arrow functions for callbacks\n[https://gist.github.com/javascript-callback/] and closures\n[https://gist.github.com/javascript-closure/] because the syntax of arrow\nfunctions is cleaner.\n\n--------------------------------------------------------------------------------\n\nSummary\n * Use the (...args) => expression; to define an arrow function.\n * Use the (...args) => { statements } to define an arrow functionthat has\n   multiple statements.**\n * An arrow function doesn't have its binding to this or super.\n * An arrow function doesn't have arguments object, new.target keyword, and \n   prototype property.","feature_image":"__GHOST_URL__/content/images/2021/10/arrow-functions-js.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"all","author_id":"1","created_at":"2021-09-30T07:24:13.000Z","updated_at":"2021-10-02T00:00:36.000Z","published_at":"2021-10-02T00:00:36.000Z","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null}],"posts_authors":[{"id":"615550ca0b5fbd002f24e834","post_id":"615550ca0b5fbd002f24e833","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"615550ca0b5fbd002f24e836","post_id":"615550ca0b5fbd002f24e835","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"615550ca0b5fbd002f24e838","post_id":"615550ca0b5fbd002f24e837","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"615550ca0b5fbd002f24e83a","post_id":"615550ca0b5fbd002f24e839","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"615550ca0b5fbd002f24e83c","post_id":"615550ca0b5fbd002f24e83b","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"615550ca0b5fbd002f24e83e","post_id":"615550ca0b5fbd002f24e83d","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"615550ca0b5fbd002f24e840","post_id":"615550ca0b5fbd002f24e83f","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"615550ca0b5fbd002f24e842","post_id":"615550ca0b5fbd002f24e841","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"615550ca0b5fbd002f24e844","post_id":"615550ca0b5fbd002f24e843","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"615550ca0b5fbd002f24e846","post_id":"615550ca0b5fbd002f24e845","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"615550ca0b5fbd002f24e848","post_id":"615550ca0b5fbd002f24e847","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"61555db8ce2018003b838a61","post_id":"61555db8ce2018003b838a60","author_id":"1","sort_order":0},{"id":"615565fdce2018003b838a7e","post_id":"615565fdce2018003b838a7d","author_id":"1","sort_order":0},{"id":"6155661dce2018003b838a83","post_id":"6155661dce2018003b838a82","author_id":"1","sort_order":0}],"posts_meta":[],"posts_tags":[{"id":"615550cb0b5fbd002f24e937","post_id":"615550ca0b5fbd002f24e833","tag_id":"615550c80b5fbd002f24e7d3","sort_order":0},{"id":"615550cb0b5fbd002f24e938","post_id":"615550ca0b5fbd002f24e835","tag_id":"615550c80b5fbd002f24e7d3","sort_order":0},{"id":"615550cb0b5fbd002f24e939","post_id":"615550ca0b5fbd002f24e83d","tag_id":"615550c80b5fbd002f24e7d3","sort_order":0},{"id":"615550cb0b5fbd002f24e93a","post_id":"615550ca0b5fbd002f24e83b","tag_id":"615550c80b5fbd002f24e7d3","sort_order":0},{"id":"615550cb0b5fbd002f24e93b","post_id":"615550ca0b5fbd002f24e83f","tag_id":"615550c80b5fbd002f24e7d3","sort_order":0},{"id":"615550cb0b5fbd002f24e93c","post_id":"615550ca0b5fbd002f24e839","tag_id":"615550c80b5fbd002f24e7d3","sort_order":0},{"id":"615550cb0b5fbd002f24e93d","post_id":"615550ca0b5fbd002f24e837","tag_id":"615550c80b5fbd002f24e7d3","sort_order":0},{"id":"61555eaece2018003b838a6c","post_id":"61555db8ce2018003b838a60","tag_id":"615550c80b5fbd002f24e7d3","sort_order":0}],"roles":[{"id":"615550c80b5fbd002f24e7d4","name":"Administrator","description":"Administrators","created_at":"2021-09-30T05:53:12.000Z","updated_at":"2021-09-30T05:53:12.000Z"},{"id":"615550c80b5fbd002f24e7d5","name":"Editor","description":"Editors","created_at":"2021-09-30T05:53:12.000Z","updated_at":"2021-09-30T05:53:12.000Z"},{"id":"615550c80b5fbd002f24e7d6","name":"Author","description":"Authors","created_at":"2021-09-30T05:53:12.000Z","updated_at":"2021-09-30T05:53:12.000Z"},{"id":"615550c80b5fbd002f24e7d7","name":"Contributor","description":"Contributors","created_at":"2021-09-30T05:53:12.000Z","updated_at":"2021-09-30T05:53:12.000Z"},{"id":"615550c80b5fbd002f24e7d8","name":"Owner","description":"Blog Owner","created_at":"2021-09-30T05:53:12.000Z","updated_at":"2021-09-30T05:53:12.000Z"},{"id":"615550c80b5fbd002f24e7d9","name":"Admin Integration","description":"External Apps","created_at":"2021-09-30T05:53:12.000Z","updated_at":"2021-09-30T05:53:12.000Z"},{"id":"615550c80b5fbd002f24e7da","name":"DB Backup Integration","description":"Internal DB Backup Client","created_at":"2021-09-30T05:53:12.000Z","updated_at":"2021-09-30T05:53:12.000Z"},{"id":"615550c80b5fbd002f24e7db","name":"Scheduler Integration","description":"Internal Scheduler Client","created_at":"2021-09-30T05:53:12.000Z","updated_at":"2021-09-30T05:53:12.000Z"}],"roles_users":[{"id":"615550ca0b5fbd002f24e832","role_id":"615550c80b5fbd002f24e7d7","user_id":"5951f5fca366002ebd5dbef7"},{"id":"615550cb0b5fbd002f24e93e","role_id":"615550c80b5fbd002f24e7d8","user_id":"1"}],"settings":[{"id":"615550cdce2018003b8389fd","group":"core","key":"db_hash","value":"79c3d2cb-44e6-4cde-8108-b5cba4bd47d2","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cdce2018003b8389fe","group":"core","key":"routes_hash","value":"3d180d52c663d173a6be791ef411ed01","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T05:53:20.000Z"},{"id":"615550cdce2018003b8389ff","group":"core","key":"next_update_check","value":"1633218825","type":"number","flags":null,"created_at":"2021-09-30T07:53:18.000Z","updated_at":"2021-10-01T23:53:44.000Z"},{"id":"615550cdce2018003b838a00","group":"core","key":"notifications","value":"[]","type":"array","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cdce2018003b838a01","group":"core","key":"session_secret","value":"7a5e26a9f15b20e1639e8a5909ab209d51e3c64b5e3b087451f99b244d9d254d","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cdce2018003b838a02","group":"core","key":"theme_session_secret","value":"380eebae707f1e5bfbb984afd23aaf581c435a3c677745dbe91aa0a798cc0f65","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cdce2018003b838a03","group":"core","key":"ghost_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAKI/nm3QYyhWPRQG8FMU66NKI60ZYHeLElmYrfFm6T/u6so4oDsVuoIEM/4fjSmx\nuE1pLZHe0yiUZcm8Evz8N8lMm7whytDSnYr0UJ7SJ8FattfR3RYVt1ykAt8SqXnQmgBKEl2d\nFitAR/CwI2iMtGQ41f3ymmehr/3QsLXHSwE7AgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cdce2018003b838a04","group":"core","key":"ghost_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCiP55t0GMoVj0UBvBTFOujSiOtGWB3ixJZmK3xZuk/7urKOKA7FbqCBDP+\nH40psbhNaS2R3tMolGXJvBL8/DfJTJu8IcrQ0p2K9FCe0ifBWrbX0d0WFbdcpALfEql50JoA\nShJdnRYrQEfwsCNojLRkONX98ppnoa/90LC1x0sBOwIDAQABAoGAbO/wTOVFHplAq0i5Zd8/\nE8U8zQWj6r/60yObbuFdLSsahCqfEuzU7GUsD61Zl6wXBgrfqPiGqNFywo+/5BLo1OxSqrHz\nQwshsCZr8PpADRQOoKc5l+f3ChPJYzk31PrVeoDPl/2Ely+R3GK12rn5NZ9yT8o3xug2Ovek\nQGbQxRECQQD+t8zeej271bopJnAAU8VdfCQgFr8sXKvoYhxZokuVwXJkAt3vWsjNQyVaRRXv\nI16gn81C/9LIpFU5vICi4NLzAkEAoxCsXFNd/N6jGxy8VJCuqhPRSlVGoVAdBrQrMHARevYH\n8sQZ9bfGAJaj/gM+421Eod0f1CjU1Pdq3Rv9Rg7amQJAEMZR+6TZQ/GDXQpm/d6GdO2kA2j8\nFhPUTm2HqG+Dws0Gl4eIziaQatQtNZCvLRyLMtDTV8I5Q3VvF2pOnmtn+QJAR2tmEonxAHAC\nwD01v1QfLB7B6+ytormT/PusbuqmvVRE5u8874IuFtPjv71sLfANv1c6OZIopZ44D9/SbnzT\nAQJBAO3qvT/CiNRZrJqhlY7MLcPraiB4l9BvA7aOLmITlbStsFMHEArqbBiZXcUFGyt3uEh5\nl2aa9UdskgEyrJpoCqY=\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a05","group":"core","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAMP5PTZmKLXZ2xd0Ap1+LbqPJ08N9DiBPiF04kGLalTImj7QIv+a06Q6OANLEL47\nPe0eFtB+7uOP2axyJGmTX+JjoKSZKTKCRZU4raXieRMzz42+sUXtlUbexo36JYBBqS/wJpnN\nRv9iSIm1uE2rJqaq6YXqhwfo8KErPpzKgsvPAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a06","group":"core","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQDD+T02Zii12dsXdAKdfi26jydPDfQ4gT4hdOJBi2pUyJo+0CL/mtOkOjgD\nSxC+Oz3tHhbQfu7jj9msciRpk1/iY6CkmSkygkWVOK2l4nkTM8+NvrFF7ZVG3saN+iWAQakv\n8CaZzUb/YkiJtbhNqyamqumF6ocH6PChKz6cyoLLzwIDAQABAoGARvrqId7kleEfSqJZJCQE\nehLJgQej0id1knacUHMngyfZPjDyzDOOvmfby82PdedNKaoBR2kCK2f5xkzdRWP8kQaB3MQS\nHXFTBfuAO6wn7Yh+kqukeb4dz3rKVYVHrXCdSlhaM682r/9w9Fd1ufsaqauYS+znJsN+Vxjc\ngw1U7SECQQD7VMNCJwLjRWN4J8TvdNXJ+RBOHVBr7uvrC7WN/yi9lO66MSidG21stFfm7IF3\npouyD9dZ4T1FgdLMxz2iJ6bxAkEAx503dSdKiQxujScDZxZiJF8ZlJvLoh32sIrRLeA7iXEt\nbKdTuvIVqZmh6W8WGc3QCUEipqie66Lj/Y7O4S0evwJBAJcMEyl/vpmOS0CcThxHkHEJMcZw\nkbO8bKbfa6bCUd7WUj8uaiU5paLuI+ISA6FAQ7apFJjc6HEMm/8cQytgP1ECQH0u73SdK3U/\nQqVq7gtcUjgVG+nCurX0rJySshRfJ3dObvpRBYWcBFHUc2H9tJKCLBFhs+VooiGMigad5Mf6\nj+kCQQCuFuT3Dvmo8lR01JGlavZ92K2k7BoVSOypOxpaC2IUjkHibV0XkjSOpIO4vGmo9v6M\nzMgrVA5+TbbLbGxeURZE\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a07","group":"core","key":"members_email_auth_secret","value":"a42eddb2379bf2e209a230f64990cef3f2bdc5ef1361f85bbe3fe008b83f4b9e4cfd500dc04627ad2fdc9e687f16c4a3a404d4af53b752472eac2ef67977874d","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a0a","group":"site","key":"title","value":"WebDevHub","type":"string","flags":"PUBLIC","created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T05:53:23.000Z"},{"id":"615550cece2018003b838a0b","group":"site","key":"description","value":"Thoughts, stories and ideas.","type":"string","flags":"PUBLIC","created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T05:53:23.000Z"},{"id":"615550cece2018003b838a0c","group":"site","key":"logo","value":"__GHOST_URL__/content/images/2021/09/bigO-circle-cropped.png","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T05:54:42.000Z"},{"id":"615550cece2018003b838a0d","group":"site","key":"cover_image","value":"__GHOST_URL__/content/images/2021/09/amazing-background.jpg","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T05:54:42.000Z"},{"id":"615550cece2018003b838a0e","group":"site","key":"icon","value":"","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a0f","group":"site","key":"accent_color","value":"#FF1A75","type":"string","flags":"PUBLIC","created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a10","group":"site","key":"lang","value":"en","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a11","group":"site","key":"timezone","value":"Etc/UTC","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a12","group":"site","key":"codeinjection_head","value":"","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a13","group":"site","key":"codeinjection_foot","value":"","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a14","group":"site","key":"facebook","value":"ghost","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a15","group":"site","key":"twitter","value":"@ghost","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a16","group":"site","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"About\",\"url\":\"/about/\"},{\"label\":\"Collection\",\"url\":\"/tag/getting-started/\"},{\"label\":\"Author\",\"url\":\"/author/ghost/\"},{\"label\":\"Portal\",\"url\":\"/portal/\"}]","type":"array","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a17","group":"site","key":"secondary_navigation","value":"[{\"label\":\"Data & privacy\",\"url\":\"/privacy/\"},{\"label\":\"Contact\",\"url\":\"/contact/\"},{\"label\":\"Contribute →\",\"url\":\"/contribute/\"}]","type":"array","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a18","group":"site","key":"meta_title","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a19","group":"site","key":"meta_description","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a1a","group":"site","key":"og_image","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a1b","group":"site","key":"og_title","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a1c","group":"site","key":"og_description","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a1d","group":"site","key":"twitter_image","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a1e","group":"site","key":"twitter_title","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a1f","group":"site","key":"twitter_description","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a20","group":"theme","key":"active_theme","value":"casper","type":"string","flags":"RO","created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a21","group":"private","key":"is_private","value":"false","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a22","group":"private","key":"password","value":"","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a23","group":"private","key":"public_hash","value":"f8f88f0f12de6aed6f015a95e54384","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a24","group":"members","key":"default_content_visibility","value":"public","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a25","group":"members","key":"members_signup_access","value":"all","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a26","group":"members","key":"members_from_address","value":"noreply","type":"string","flags":"RO","created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a27","group":"members","key":"members_support_address","value":"noreply","type":"string","flags":"PUBLIC,RO","created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a28","group":"members","key":"members_reply_address","value":"newsletter","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a29","group":"members","key":"members_free_signup_redirect","value":"/","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a2a","group":"members","key":"members_paid_signup_redirect","value":"/","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a2b","group":"members","key":"stripe_product_name","value":"WebDevHub","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:02:43.000Z"},{"id":"615550cece2018003b838a2e","group":"members","key":"stripe_plans","value":"[]","type":"array","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a31","group":"members","key":"stripe_connect_livemode","value":"false","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:02:43.000Z"},{"id":"615550cece2018003b838a32","group":"members","key":"stripe_connect_display_name","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a34","group":"members","key":"members_free_price_name","value":"Free","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a35","group":"members","key":"members_free_price_description","value":"Free preview","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a36","group":"members","key":"members_monthly_price_id","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a37","group":"members","key":"members_yearly_price_id","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a38","group":"portal","key":"portal_name","value":"true","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a39","group":"portal","key":"portal_button","value":"true","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a3a","group":"portal","key":"portal_plans","value":"[\"free\",\"monthly\",\"yearly\"]","type":"array","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:02:46.000Z"},{"id":"615550cece2018003b838a3b","group":"portal","key":"portal_products","value":"[\"615550c80b5fbd002f24e7d2\"]","type":"array","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:02:46.000Z"},{"id":"615550cece2018003b838a3c","group":"portal","key":"portal_button_style","value":"icon-and-text","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a3d","group":"portal","key":"portal_button_icon","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a3e","group":"portal","key":"portal_button_signup_text","value":"Subscribe","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a3f","group":"email","key":"mailgun_domain","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a40","group":"email","key":"mailgun_api_key","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a41","group":"email","key":"mailgun_base_url","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a42","group":"email","key":"email_track_opens","value":"true","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a44","group":"amp","key":"amp","value":"true","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a45","group":"amp","key":"amp_gtag_id","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a46","group":"firstpromoter","key":"firstpromoter","value":"false","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a47","group":"firstpromoter","key":"firstpromoter_id","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a48","group":"labs","key":"labs","value":"{}","type":"object","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a49","group":"slack","key":"slack_url","value":"","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:03:11.000Z"},{"id":"615550cece2018003b838a4a","group":"slack","key":"slack_username","value":"Ghost","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:03:11.000Z"},{"id":"615550cece2018003b838a4b","group":"unsplash","key":"unsplash","value":"true","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a4c","group":"views","key":"shared_views","value":"[]","type":"array","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a4d","group":"newsletter","key":"newsletter_show_badge","value":"true","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a4e","group":"newsletter","key":"newsletter_header_image","value":null,"type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a4f","group":"newsletter","key":"newsletter_show_header_icon","value":"true","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a50","group":"newsletter","key":"newsletter_show_header_title","value":"true","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a51","group":"newsletter","key":"newsletter_title_alignment","value":"center","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a52","group":"newsletter","key":"newsletter_title_font_category","value":"sans_serif","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a53","group":"newsletter","key":"newsletter_show_feature_image","value":"true","type":"boolean","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a54","group":"newsletter","key":"newsletter_body_font_category","value":"sans_serif","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a55","group":"newsletter","key":"newsletter_footer_content","value":"","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a58","group":"editor","key":"editor_default_email_recipients","value":"visibility","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"},{"id":"615550cece2018003b838a59","group":"editor","key":"editor_default_email_recipients_filter","value":"all","type":"string","flags":null,"created_at":"2021-09-30T06:53:18.000Z","updated_at":"2021-09-30T06:53:18.000Z"}],"tags":[{"id":"615550c80b5fbd002f24e7d3","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-09-30T05:53:12.000Z","updated_at":"2021-09-30T05:53:12.000Z"}],"users":[{"id":"1","name":"Bryan C Guner","slug":"bryan","password":"$2a$10$WOI5Xd2R.g3/.SmD55INNel/H6dxpjQU7VJ7nyQv1181l3.jGf1rW","email":"bryan.guner@gmail.com","profile_image":"//www.gravatar.com/avatar/4c4ec05acd63612984efbe17dec9dd88?s=250&d=mm&r=x","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":"{\"launchComplete\":true,\"nightShift\":true}","status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":"2021-10-01T23:54:38.000Z","created_at":"2021-09-30T05:53:13.000Z","updated_at":"2021-10-01T23:54:38.000Z"},{"id":"5951f5fca366002ebd5dbef7","name":"Ghost","slug":"ghost","password":"$2a$10$3sBoHMSihztH7FFSpUidfOOGXZknZoGNqfo1nKRXnjxbGkpamhduW","email":"ghost-author@example.com","profile_image":"https://static.ghost.org/v4.0.0/images/ghost-user.png","cover_image":null,"bio":"You can delete this user to remove all the welcome posts","website":"https://ghost.org","location":"The Internet","facebook":"ghost","twitter":"ghost","accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":null,"created_at":"2021-09-30T05:53:13.000Z","updated_at":"2021-09-30T05:53:13.000Z"}]}}]}