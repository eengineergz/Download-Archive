[
  {
    "Id": "538004",
    "ThreadId": "238923",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm working for a website editor that has put his images on a CDN that can be accessed with two different urls, one for HTTP and one for HTTPS.</p>\r\n<p>Those 2 urls are part of the website configuration (web.config).</p>\r\n<p>For the moment, we made a custom script combiner that dynamically replaces the background image urls that are stored in css files by the http or https CDN url depending on the page context.</p>\r\n<p>For example ~/img/img.gif is replaced (depending on the context) by http://img.cdn.editor.com/img/img.gif or&nbsp;https://otheraddress.editor.net/img/img.gif</p>\r\n<p>I'm trying to make a new engine that would, for a given css file named file.cdn.css :</p>\r\n<p>- minify it using yui css engine (output would be file.min.css)</p>\r\n<p>- use the minified file to generate a file to be used in a HTTP context by replacing all ~/ by the HTTP CDN url. (output would be file.http.min.css)</p>\r\n<p>-&nbsp;use the minified file to generate a file to be used in a HTTPS context by replacing all ~/ by the HTTPS CDN url. (output would be file.https.min.css)</p>\r\n<p>I wrote the following engine but it does not seems to work (basically ,nothing happens in Visual Studio) :</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre style=\"color:black\"><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Text.RegularExpressions;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> Yahoo.Yui.Compressor;\r\n<span style=\"color:blue\">using</span> Zippy.Chirp.Xml;\r\n\r\n<span style=\"color:blue\">namespace</span> Zippy.Chirp.Engines {\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CdnCssEngine : TransformEngine {</pre>\r\n<pre><span style=\"color:blue\"><span style=\"white-space:pre\">\t</span><span style=\"color:#0000ff\">public</span></span> CdnCssEngine()\r\n\t\t {\r\n            Extensions = <span style=\"color:blue\">new</span>[] { Settings.ChirpCdnCssFile };\r\n            OutputExtension = <span style=\"color:#a31515\">&quot;.css&quot;</span>;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">string</span> Transform(<span style=\"color:blue\">string</span> fullFileName, <span style=\"color:blue\">string</span> text, EnvDTE.ProjectItem projectItem) {\r\n\t\t\t  <span style=\"color:blue\">return</span> CssCompressor.Compress(text, 0,CssCompressionType.StockYuiCompressor);\r\n\t\t  }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Process(Manager.VSProjectItemManager manager, <span style=\"color:blue\">string</span> fullFileName, EnvDTE.ProjectItem projectItem, <span style=\"color:blue\">string</span> baseFileName, <span style=\"color:blue\">string</span> outputText) {\r\n            <span style=\"color:blue\">base</span>.Process(manager, fullFileName, projectItem, baseFileName, outputText);\r\n\r\n\t\t\t\t<span style=\"color:blue\">string</span> inputText = System.IO.File.ReadAllText(fullFileName);\r\n\r\n\t\t\t\t<span style=\"color:blue\">string</span> http = inputText.Replace(<span style=\"color:#a31515\">&quot;~/&quot;</span>, <span style=\"color:#a31515\">&quot;http://img.cdn.editor.com/&quot;</span>);\r\n\t\t\t\tmanager.AddFileByFileName(baseFileName &#43; <span style=\"color:#a31515\">&quot;.http.min.css&quot;</span>, http);\r\n\r\n\t\t\t\t<span style=\"color:blue\">string</span> https = inputText.Replace(<span style=\"color:#a31515\">&quot;~/&quot;</span>, <span style=\"color:#a31515\">&quot;https://otheraddress.editor.net/&quot;</span>);\r\n\t\t\t\tmanager.AddFileByFileName(baseFileName &#43; <span style=\"color:#a31515\">&quot;.https.min.css&quot;</span>, https);\r\n\r\n        }\r\n\r\n    }\r\n}</pre>\r\n<pre><br></pre>\r\n<pre>Thanks in advance for your help,</pre>\r\n<pre>kindanam\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-19T12:21:59.44-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "538040",
    "ThreadId": "238923",
    "Html": "\r\n<p>ok. I found the solution.</p>\r\n<p>For those who could be interested, here is the code (not final because the CDN urls should be taken from configuration not constants):</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// In Settings.css</span>\r\n <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">string</span> ChirpCdnCssFile = <span style=\"color:#a31515\">&quot;.cdn.css&quot;</span>;\r\n</pre>\r\n</div>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// New class : CdnCssEngine.cs</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Text.RegularExpressions;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> Yahoo.Yui.Compressor;\r\n<span style=\"color:blue\">using</span> Zippy.Chirp.Xml;\r\n\r\n<span style=\"color:blue\">namespace</span> Zippy.Chirp.Engines {\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CdnCssEngine : TransformEngine {\r\n\t\t <span style=\"color:blue\">public</span> CdnCssEngine()\r\n\t\t {\r\n            Extensions = <span style=\"color:blue\">new</span>[] { Settings.ChirpCdnCssFile };\r\n            OutputExtension = <span style=\"color:#a31515\">&quot;.min.css&quot;</span>;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">string</span> Transform(<span style=\"color:blue\">string</span> fullFileName, <span style=\"color:blue\">string</span> text, EnvDTE.ProjectItem projectItem) {\r\n\t\t\t  <span style=\"color:blue\">return</span> CssCompressor.Compress(text, 0,CssCompressionType.StockYuiCompressor);\r\n\t\t  }\r\n\r\n\t\t  <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">int</span> Handles(<span style=\"color:blue\">string</span> fullFileName)\r\n\t\t  {\r\n\r\n\t\t\t  <span style=\"color:green\">// if (fullFileName.EndsWith(GetOutputExtension(fullFileName), StringComparison.InvariantCultureIgnoreCase)) return 0; --remove for handle less.css workitem=31,34</span>\r\n\t\t\t  <span style=\"color:blue\">var</span> match = Extensions.Where(x =&gt; fullFileName.EndsWith(x, StringComparison.InvariantCultureIgnoreCase))\r\n\t\t\t\t\t.FirstOrDefault() ?? <span style=\"color:blue\">string</span>.Empty;\r\n\t\t\t  <span style=\"color:blue\">return</span> match.Length;\r\n\t\t  }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Process(Manager.VSProjectItemManager manager, <span style=\"color:blue\">string</span> fullFileName, EnvDTE.ProjectItem projectItem, <span style=\"color:blue\">string</span> baseFileName, <span style=\"color:blue\">string</span> outputText) {\r\n            <span style=\"color:blue\">base</span>.Process(manager, fullFileName, projectItem, baseFileName, outputText);\r\n\r\n\t\t\t\t<span style=\"color:blue\">string</span> http = outputText.Replace(<span style=\"color:#a31515\">&quot;~/&quot;</span>, <span style=\"color:#a31515\">&quot;http://img.cdn.editor.com/&quot;</span>);\r\n\t\t\t\tmanager.AddFileByFileName(baseFileName &#43; <span style=\"color:#a31515\">&quot;.http.min.css&quot;</span>, http);\r\n\r\n\t\t\t\t<span style=\"color:blue\">string</span> https = outputText.Replace(<span style=\"color:#a31515\">&quot;~/&quot;</span>, <span style=\"color:#a31515\">&quot;ttps://otheraddress.editor.net/&quot;</span>);\r\n\t\t\t\tmanager.AddFileByFileName(baseFileName &#43; <span style=\"color:#a31515\">&quot;.https.min.css&quot;</span>, https);\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// In Chirp.cs</span>\r\n<span style=\"color:blue\">internal</span> CdnCssEngine CdnCssEngine { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n<span style=\"color:green\">// ...</span>\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> LoadActions() {\r\n<span style=\"color:green\">// register new engine</span>\r\n_EngineManager.Add(CdnCssEngine = <span style=\"color:blue\">new</span> CdnCssEngine());\r\n}\r\n</pre>\r\n</div>\r\nKindanam\r\n<p></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-19T14:20:49.767-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "542988",
    "ThreadId": "238923",
    "Html": "\r\n<p>kindanam,</p>\r\n<p>Apologies for not responding, but thanks for posting the solution.&nbsp;</p>\r\n<p>This is a really cool use of Chirpy's Engine infrastructure. I'm wondering if others might find it useful? Methinks so.</p>\r\n<p>&nbsp;</p>\r\n<p>Cheers,</p>\r\n<p>Evan</p>\r\n",
    "PostedDate": "2011-01-02T16:17:21.057-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]
