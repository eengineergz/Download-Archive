[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "http.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "http.client",
        "description": "http.client",
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "default_backend",
        "importPath": "cryptography.hazmat.backends",
        "description": "cryptography.hazmat.backends",
        "isExtraImport": true,
        "detail": "cryptography.hazmat.backends",
        "documentation": {}
    },
    {
        "label": "load_pem_x509_certificate",
        "importPath": "cryptography.x509",
        "description": "cryptography.x509",
        "isExtraImport": true,
        "detail": "cryptography.x509",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "decimalencoder",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "decimalencoder",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "decimalencoder",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "decimalencoder",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "decimalencoder",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "decimalencoder",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "TODOS",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "TODOS",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "TODOS",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "ALL_TODOS",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "TODOS",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "ALL_TODOS",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "TODOS",
        "importPath": "todos",
        "description": "todos",
        "isExtraImport": true,
        "detail": "todos",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "importPath": "todos.todo_model",
        "description": "todos.todo_model",
        "isExtraImport": true,
        "detail": "todos.todo_model",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "importPath": "todos.todo_model",
        "description": "todos.todo_model",
        "isExtraImport": true,
        "detail": "todos.todo_model",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "importPath": "todos.todo_model",
        "description": "todos.todo_model",
        "isExtraImport": true,
        "detail": "todos.todo_model",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "importPath": "todos.todo_model",
        "description": "todos.todo_model",
        "isExtraImport": true,
        "detail": "todos.todo_model",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "importPath": "todos.todo_model",
        "description": "todos.todo_model",
        "isExtraImport": true,
        "detail": "todos.todo_model",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "importPath": "todos.todo_model",
        "description": "todos.todo_model",
        "isExtraImport": true,
        "detail": "todos.todo_model",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "importPath": "todos.todo_model",
        "description": "todos.todo_model",
        "isExtraImport": true,
        "detail": "todos.todo_model",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "importPath": "todos.todo_model",
        "description": "todos.todo_model",
        "isExtraImport": true,
        "detail": "todos.todo_model",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "importPath": "todos.todo_model",
        "description": "todos.todo_model",
        "isExtraImport": true,
        "detail": "todos.todo_model",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "importPath": "todos.todo_model",
        "description": "todos.todo_model",
        "isExtraImport": true,
        "detail": "todos.todo_model",
        "documentation": {}
    },
    {
        "label": "DoesNotExist",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DeleteError",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DoesNotExist",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DoesNotExist",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DoesNotExist",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DeleteError",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "UpdateError",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DoesNotExist",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DeleteError",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DoesNotExist",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DoesNotExist",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DoesNotExist",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DeleteError",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DoesNotExist",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "DoesNotExist",
        "importPath": "pynamodb.exceptions",
        "description": "pynamodb.exceptions",
        "isExtraImport": true,
        "detail": "pynamodb.exceptions",
        "documentation": {}
    },
    {
        "label": "UnicodeAttribute",
        "importPath": "pynamodb.attributes",
        "description": "pynamodb.attributes",
        "isExtraImport": true,
        "detail": "pynamodb.attributes",
        "documentation": {}
    },
    {
        "label": "BooleanAttribute",
        "importPath": "pynamodb.attributes",
        "description": "pynamodb.attributes",
        "isExtraImport": true,
        "detail": "pynamodb.attributes",
        "documentation": {}
    },
    {
        "label": "UTCDateTimeAttribute",
        "importPath": "pynamodb.attributes",
        "description": "pynamodb.attributes",
        "isExtraImport": true,
        "detail": "pynamodb.attributes",
        "documentation": {}
    },
    {
        "label": "UnicodeAttribute",
        "importPath": "pynamodb.attributes",
        "description": "pynamodb.attributes",
        "isExtraImport": true,
        "detail": "pynamodb.attributes",
        "documentation": {}
    },
    {
        "label": "UTCDateTimeAttribute",
        "importPath": "pynamodb.attributes",
        "description": "pynamodb.attributes",
        "isExtraImport": true,
        "detail": "pynamodb.attributes",
        "documentation": {}
    },
    {
        "label": "UnicodeAttribute",
        "importPath": "pynamodb.attributes",
        "description": "pynamodb.attributes",
        "isExtraImport": true,
        "detail": "pynamodb.attributes",
        "documentation": {}
    },
    {
        "label": "BooleanAttribute",
        "importPath": "pynamodb.attributes",
        "description": "pynamodb.attributes",
        "isExtraImport": true,
        "detail": "pynamodb.attributes",
        "documentation": {}
    },
    {
        "label": "UTCDateTimeAttribute",
        "importPath": "pynamodb.attributes",
        "description": "pynamodb.attributes",
        "isExtraImport": true,
        "detail": "pynamodb.attributes",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "pynamodb.models",
        "description": "pynamodb.models",
        "isExtraImport": true,
        "detail": "pynamodb.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "pynamodb.models",
        "description": "pynamodb.models",
        "isExtraImport": true,
        "detail": "pynamodb.models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "pynamodb.models",
        "description": "pynamodb.models",
        "isExtraImport": true,
        "detail": "pynamodb.models",
        "documentation": {}
    },
    {
        "label": "LineBotApi",
        "importPath": "linebot",
        "description": "linebot",
        "isExtraImport": true,
        "detail": "linebot",
        "documentation": {}
    },
    {
        "label": "WebhookHandler",
        "importPath": "linebot",
        "description": "linebot",
        "isExtraImport": true,
        "detail": "linebot",
        "documentation": {}
    },
    {
        "label": "MessageEvent",
        "importPath": "linebot.models",
        "description": "linebot.models",
        "isExtraImport": true,
        "detail": "linebot.models",
        "documentation": {}
    },
    {
        "label": "TextMessage",
        "importPath": "linebot.models",
        "description": "linebot.models",
        "isExtraImport": true,
        "detail": "linebot.models",
        "documentation": {}
    },
    {
        "label": "TextSendMessage",
        "importPath": "linebot.models",
        "description": "linebot.models",
        "isExtraImport": true,
        "detail": "linebot.models",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "log_cfg",
        "description": "log_cfg",
        "isExtraImport": true,
        "detail": "log_cfg",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "log_cfg",
        "description": "log_cfg",
        "isExtraImport": true,
        "detail": "log_cfg",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "log_cfg",
        "description": "log_cfg",
        "isExtraImport": true,
        "detail": "log_cfg",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "log_cfg",
        "description": "log_cfg",
        "isExtraImport": true,
        "detail": "log_cfg",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "log_cfg",
        "description": "log_cfg",
        "isExtraImport": true,
        "detail": "log_cfg",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "log_cfg",
        "description": "log_cfg",
        "isExtraImport": true,
        "detail": "log_cfg",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "log_cfg",
        "description": "log_cfg",
        "isExtraImport": true,
        "detail": "log_cfg",
        "documentation": {}
    },
    {
        "label": "AssetModel",
        "importPath": "asset.asset_model",
        "description": "asset.asset_model",
        "isExtraImport": true,
        "detail": "asset.asset_model",
        "documentation": {}
    },
    {
        "label": "AssetModel",
        "importPath": "asset.asset_model",
        "description": "asset.asset_model",
        "isExtraImport": true,
        "detail": "asset.asset_model",
        "documentation": {}
    },
    {
        "label": "AssetModel",
        "importPath": "asset.asset_model",
        "description": "asset.asset_model",
        "isExtraImport": true,
        "detail": "asset.asset_model",
        "documentation": {}
    },
    {
        "label": "AssetModel",
        "importPath": "asset.asset_model",
        "description": "asset.asset_model",
        "isExtraImport": true,
        "detail": "asset.asset_model",
        "documentation": {}
    },
    {
        "label": "AssetModel",
        "importPath": "asset.asset_model",
        "description": "asset.asset_model",
        "isExtraImport": true,
        "detail": "asset.asset_model",
        "documentation": {}
    },
    {
        "label": "AssetModel",
        "importPath": "asset.asset_model",
        "description": "asset.asset_model",
        "isExtraImport": true,
        "detail": "asset.asset_model",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "make_result",
        "importPath": "todos.makeresult",
        "description": "todos.makeresult",
        "isExtraImport": true,
        "detail": "todos.makeresult",
        "documentation": {}
    },
    {
        "label": "make_result",
        "importPath": "todos.makeresult",
        "description": "todos.makeresult",
        "isExtraImport": true,
        "detail": "todos.makeresult",
        "documentation": {}
    },
    {
        "label": "make_result",
        "importPath": "todos.makeresult",
        "description": "todos.makeresult",
        "isExtraImport": true,
        "detail": "todos.makeresult",
        "documentation": {}
    },
    {
        "label": "make_result",
        "importPath": "todos.makeresult",
        "description": "todos.makeresult",
        "isExtraImport": true,
        "detail": "todos.makeresult",
        "documentation": {}
    },
    {
        "label": "query",
        "importPath": "faunadb",
        "description": "faunadb",
        "isExtraImport": true,
        "detail": "faunadb",
        "documentation": {}
    },
    {
        "label": "query",
        "importPath": "faunadb",
        "description": "faunadb",
        "isExtraImport": true,
        "detail": "faunadb",
        "documentation": {}
    },
    {
        "label": "query",
        "importPath": "faunadb",
        "description": "faunadb",
        "isExtraImport": true,
        "detail": "faunadb",
        "documentation": {}
    },
    {
        "label": "query",
        "importPath": "faunadb",
        "description": "faunadb",
        "isExtraImport": true,
        "detail": "faunadb",
        "documentation": {}
    },
    {
        "label": "query",
        "importPath": "faunadb",
        "description": "faunadb",
        "isExtraImport": true,
        "detail": "faunadb",
        "documentation": {}
    },
    {
        "label": "query",
        "importPath": "faunadb",
        "description": "faunadb",
        "isExtraImport": true,
        "detail": "faunadb",
        "documentation": {}
    },
    {
        "label": "Ref",
        "importPath": "faunadb.objects",
        "description": "faunadb.objects",
        "isExtraImport": true,
        "detail": "faunadb.objects",
        "documentation": {}
    },
    {
        "label": "Ref",
        "importPath": "faunadb.objects",
        "description": "faunadb.objects",
        "isExtraImport": true,
        "detail": "faunadb.objects",
        "documentation": {}
    },
    {
        "label": "Ref",
        "importPath": "faunadb.objects",
        "description": "faunadb.objects",
        "isExtraImport": true,
        "detail": "faunadb.objects",
        "documentation": {}
    },
    {
        "label": "pymongo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo",
        "description": "pymongo",
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "telegram",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "telegram",
        "description": "telegram",
        "detail": "telegram",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "aws-multiple-runtime.web.handler",
        "description": "aws-multiple-runtime.web.handler",
        "peekOfCode": "def hello(event, context):\n    rc = event[\"requestContext\"]\n    servicePath = rc[\"path\"][:-len(rc[\"resourcePath\"])] # path minus the resource path '/greet'\n    # GET from the /time endpoint\n    connection = http.client.HTTPSConnection(event[\"headers\"][\"Host\"])\n    connection.request(\"GET\", \"{0}/time\".format(servicePath))\n    timestamp = connection.getresponse().read().decode()\n    timeStr = datetime.fromtimestamp(int(timestamp)).strftime(\"%B %d, %Y\")\n    return {\n        \"statusCode\": 200,",
        "detail": "aws-multiple-runtime.web.handler",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "aws-python.handler",
        "description": "aws-python.handler",
        "peekOfCode": "def hello(event, context):\n    body = {\n        \"message\": \"Go Serverless v2.0! Your function executed successfully!\",\n        \"input\": event,\n    }\n    return {\"statusCode\": 200, \"body\": json.dumps(body)}",
        "detail": "aws-python.handler",
        "documentation": {}
    },
    {
        "label": "parseInt",
        "kind": 2,
        "importPath": "aws-python-alexa-skill.handler",
        "description": "aws-python-alexa-skill.handler",
        "peekOfCode": "def parseInt(value):\n    try:\n        return int(value)\n    except ValueError:\n        return 100\ndef lucky_number(event, context):\n    print(event)\n    upperLimitDict = event['request']['intent']['slots']['UpperLimit']\n    upperLimit = None\n    if 'value' in upperLimitDict:",
        "detail": "aws-python-alexa-skill.handler",
        "documentation": {}
    },
    {
        "label": "lucky_number",
        "kind": 2,
        "importPath": "aws-python-alexa-skill.handler",
        "description": "aws-python-alexa-skill.handler",
        "peekOfCode": "def lucky_number(event, context):\n    print(event)\n    upperLimitDict = event['request']['intent']['slots']['UpperLimit']\n    upperLimit = None\n    if 'value' in upperLimitDict:\n        upperLimit = parseInt(upperLimitDict['value'])\n    else:\n        upperLimit = 100\n    number = random.randint(0, upperLimit)\n    response = {",
        "detail": "aws-python-alexa-skill.handler",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 2,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "def auth(event, context):\n    whole_auth_token = event.get('authorizationToken')\n    if not whole_auth_token:\n        raise Exception('Unauthorized')\n    print('Client token: ' + whole_auth_token)\n    print('Method ARN: ' + event['methodArn'])\n    token_parts = whole_auth_token.split(' ')\n    auth_token = token_parts[1]\n    token_method = token_parts[0]\n    if not (token_method.lower() == 'bearer' and auth_token):",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "public_endpoint",
        "kind": 2,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "def public_endpoint(event, context):\n    return create_200_response('Hi ⊂◉‿◉つ from Public API')\ndef private_endpoint(event, context):\n    return create_200_response('Hi ⊂◉‿◉つ from Private API. Only logged in users can see this')\ndef jwt_verify(auth_token, public_key):\n    public_key = format_public_key(public_key)\n    pub_key = convert_certificate_to_pem(public_key)\n    payload = jwt.decode(auth_token, pub_key, algorithms=['RS256'], audience=AUTH0_CLIENT_ID)\n    return payload['sub']\ndef generate_policy(principal_id, effect, resource):",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "private_endpoint",
        "kind": 2,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "def private_endpoint(event, context):\n    return create_200_response('Hi ⊂◉‿◉つ from Private API. Only logged in users can see this')\ndef jwt_verify(auth_token, public_key):\n    public_key = format_public_key(public_key)\n    pub_key = convert_certificate_to_pem(public_key)\n    payload = jwt.decode(auth_token, pub_key, algorithms=['RS256'], audience=AUTH0_CLIENT_ID)\n    return payload['sub']\ndef generate_policy(principal_id, effect, resource):\n    return {\n        'principalId': principal_id,",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "jwt_verify",
        "kind": 2,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "def jwt_verify(auth_token, public_key):\n    public_key = format_public_key(public_key)\n    pub_key = convert_certificate_to_pem(public_key)\n    payload = jwt.decode(auth_token, pub_key, algorithms=['RS256'], audience=AUTH0_CLIENT_ID)\n    return payload['sub']\ndef generate_policy(principal_id, effect, resource):\n    return {\n        'principalId': principal_id,\n        'policyDocument': {\n            'Version': '2012-10-17',",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "generate_policy",
        "kind": 2,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "def generate_policy(principal_id, effect, resource):\n    return {\n        'principalId': principal_id,\n        'policyDocument': {\n            'Version': '2012-10-17',\n            'Statement': [\n                {\n                    \"Action\": \"execute-api:Invoke\",\n                    \"Effect\": effect,\n                    \"Resource\": resource",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "convert_certificate_to_pem",
        "kind": 2,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "def convert_certificate_to_pem(public_key):\n    cert_str = public_key.encode()\n    cert_obj = load_pem_x509_certificate(cert_str, default_backend())\n    pub_key = cert_obj.public_key()\n    return pub_key\ndef format_public_key(public_key):\n    public_key = public_key.replace('\\n', ' ').replace('\\r', '')\n    public_key = public_key.replace('-----BEGIN CERTIFICATE-----', '-----BEGIN CERTIFICATE-----\\n')\n    public_key = public_key.replace('-----END CERTIFICATE-----', '\\n-----END CERTIFICATE-----')\n    return public_key",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "format_public_key",
        "kind": 2,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "def format_public_key(public_key):\n    public_key = public_key.replace('\\n', ' ').replace('\\r', '')\n    public_key = public_key.replace('-----BEGIN CERTIFICATE-----', '-----BEGIN CERTIFICATE-----\\n')\n    public_key = public_key.replace('-----END CERTIFICATE-----', '\\n-----END CERTIFICATE-----')\n    return public_key\ndef create_200_response(message):\n    headers = {\n        # Required for CORS support to work\n        'Access-Control-Allow-Origin': '*',\n        # Required for cookies, authorization headers with HTTPS",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "create_200_response",
        "kind": 2,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "def create_200_response(message):\n    headers = {\n        # Required for CORS support to work\n        'Access-Control-Allow-Origin': '*',\n        # Required for cookies, authorization headers with HTTPS\n        'Access-Control-Allow-Credentials': True,\n    }\n    return create_aws_lambda_response(200, {'message': message}, headers)\ndef create_aws_lambda_response(status_code, message, headers):\n    return {",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "create_aws_lambda_response",
        "kind": 2,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "def create_aws_lambda_response(status_code, message, headers):\n    return {\n        'statusCode': status_code,\n        'headers': headers,\n        'body': json.dumps(message)\n    }",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "AUTH0_CLIENT_ID",
        "kind": 5,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "AUTH0_CLIENT_ID = os.getenv('AUTH0_CLIENT_ID')\nAUTH0_CLIENT_PUBLIC_KEY = os.getenv('AUTH0_CLIENT_PUBLIC_KEY')\ndef auth(event, context):\n    whole_auth_token = event.get('authorizationToken')\n    if not whole_auth_token:\n        raise Exception('Unauthorized')\n    print('Client token: ' + whole_auth_token)\n    print('Method ARN: ' + event['methodArn'])\n    token_parts = whole_auth_token.split(' ')\n    auth_token = token_parts[1]",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "AUTH0_CLIENT_PUBLIC_KEY",
        "kind": 5,
        "importPath": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "description": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "peekOfCode": "AUTH0_CLIENT_PUBLIC_KEY = os.getenv('AUTH0_CLIENT_PUBLIC_KEY')\ndef auth(event, context):\n    whole_auth_token = event.get('authorizationToken')\n    if not whole_auth_token:\n        raise Exception('Unauthorized')\n    print('Client token: ' + whole_auth_token)\n    print('Method ARN: ' + event['methodArn'])\n    token_parts = whole_auth_token.split(' ')\n    auth_token = token_parts[1]\n    token_method = token_parts[0]",
        "detail": "aws-python-auth0-custom-authorizers-api.lambda_handlers",
        "documentation": {}
    },
    {
        "label": "hello_from_root",
        "kind": 2,
        "importPath": "aws-python-flask-api.app",
        "description": "aws-python-flask-api.app",
        "peekOfCode": "def hello_from_root():\n    return jsonify(message='Hello from root!')\n@app.route(\"/hello\")\ndef hello():\n    return jsonify(message='Hello from path!')\n@app.errorhandler(404)\ndef resource_not_found(e):\n    return make_response(jsonify(error='Not found!'), 404)",
        "detail": "aws-python-flask-api.app",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "aws-python-flask-api.app",
        "description": "aws-python-flask-api.app",
        "peekOfCode": "def hello():\n    return jsonify(message='Hello from path!')\n@app.errorhandler(404)\ndef resource_not_found(e):\n    return make_response(jsonify(error='Not found!'), 404)",
        "detail": "aws-python-flask-api.app",
        "documentation": {}
    },
    {
        "label": "resource_not_found",
        "kind": 2,
        "importPath": "aws-python-flask-api.app",
        "description": "aws-python-flask-api.app",
        "peekOfCode": "def resource_not_found(e):\n    return make_response(jsonify(error='Not found!'), 404)",
        "detail": "aws-python-flask-api.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "aws-python-flask-api.app",
        "description": "aws-python-flask-api.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef hello_from_root():\n    return jsonify(message='Hello from root!')\n@app.route(\"/hello\")\ndef hello():\n    return jsonify(message='Hello from path!')\n@app.errorhandler(404)\ndef resource_not_found(e):\n    return make_response(jsonify(error='Not found!'), 404)",
        "detail": "aws-python-flask-api.app",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "aws-python-flask-dynamodb-api.app",
        "description": "aws-python-flask-dynamodb-api.app",
        "peekOfCode": "def get_user(user_id):\n    result = dynamodb_client.get_item(\n        TableName=USERS_TABLE, Key={'userId': {'S': user_id}}\n    )\n    item = result.get('Item')\n    if not item:\n        return jsonify({'error': 'Could not find user with provided \"userId\"'}), 404\n    return jsonify(\n        {'userId': item.get('userId').get('S'), 'name': item.get('name').get('S')}\n    )",
        "detail": "aws-python-flask-dynamodb-api.app",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "aws-python-flask-dynamodb-api.app",
        "description": "aws-python-flask-dynamodb-api.app",
        "peekOfCode": "def create_user():\n    user_id = request.json.get('userId')\n    name = request.json.get('name')\n    if not user_id or not name:\n        return jsonify({'error': 'Please provide both \"userId\" and \"name\"'}), 400\n    dynamodb_client.put_item(\n        TableName=USERS_TABLE, Item={'userId': {'S': user_id}, 'name': {'S': name}}\n    )\n    return jsonify({'userId': user_id, 'name': name})\n@app.errorhandler(404)",
        "detail": "aws-python-flask-dynamodb-api.app",
        "documentation": {}
    },
    {
        "label": "resource_not_found",
        "kind": 2,
        "importPath": "aws-python-flask-dynamodb-api.app",
        "description": "aws-python-flask-dynamodb-api.app",
        "peekOfCode": "def resource_not_found(e):\n    return make_response(jsonify(error='Not found!'), 404)",
        "detail": "aws-python-flask-dynamodb-api.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "aws-python-flask-dynamodb-api.app",
        "description": "aws-python-flask-dynamodb-api.app",
        "peekOfCode": "app = Flask(__name__)\ndynamodb_client = boto3.client('dynamodb')\nif os.environ.get('IS_OFFLINE'):\n    dynamodb_client = boto3.client(\n        'dynamodb', region_name='localhost', endpoint_url='http://localhost:8000'\n    )\nUSERS_TABLE = os.environ['USERS_TABLE']\n@app.route('/users/<string:user_id>')\ndef get_user(user_id):\n    result = dynamodb_client.get_item(",
        "detail": "aws-python-flask-dynamodb-api.app",
        "documentation": {}
    },
    {
        "label": "dynamodb_client",
        "kind": 5,
        "importPath": "aws-python-flask-dynamodb-api.app",
        "description": "aws-python-flask-dynamodb-api.app",
        "peekOfCode": "dynamodb_client = boto3.client('dynamodb')\nif os.environ.get('IS_OFFLINE'):\n    dynamodb_client = boto3.client(\n        'dynamodb', region_name='localhost', endpoint_url='http://localhost:8000'\n    )\nUSERS_TABLE = os.environ['USERS_TABLE']\n@app.route('/users/<string:user_id>')\ndef get_user(user_id):\n    result = dynamodb_client.get_item(\n        TableName=USERS_TABLE, Key={'userId': {'S': user_id}}",
        "detail": "aws-python-flask-dynamodb-api.app",
        "documentation": {}
    },
    {
        "label": "USERS_TABLE",
        "kind": 5,
        "importPath": "aws-python-flask-dynamodb-api.app",
        "description": "aws-python-flask-dynamodb-api.app",
        "peekOfCode": "USERS_TABLE = os.environ['USERS_TABLE']\n@app.route('/users/<string:user_id>')\ndef get_user(user_id):\n    result = dynamodb_client.get_item(\n        TableName=USERS_TABLE, Key={'userId': {'S': user_id}}\n    )\n    item = result.get('Item')\n    if not item:\n        return jsonify({'error': 'Could not find user with provided \"userId\"'}), 404\n    return jsonify(",
        "detail": "aws-python-flask-dynamodb-api.app",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "aws-python-http-api.handler",
        "description": "aws-python-http-api.handler",
        "peekOfCode": "def hello(event, context):\n    body = {\n        \"message\": \"Go Serverless v2.0! Your function executed successfully!\",\n        \"input\": event,\n    }\n    response = {\"statusCode\": 200, \"body\": json.dumps(body)}\n    return response\n    # Use this code if you don't use the http event with the LAMBDA-PROXY\n    # integration\n    \"\"\"",
        "detail": "aws-python-http-api.handler",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "aws-python-http-api-with-dynamodb.todos.create",
        "description": "aws-python-http-api-with-dynamodb.todos.create",
        "peekOfCode": "def create(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't create the todo item.\")\n    timestamp = str(time.time())\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    item = {\n        'id': str(uuid.uuid1()),\n        'text': data['text'],",
        "detail": "aws-python-http-api-with-dynamodb.todos.create",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "aws-python-http-api-with-dynamodb.todos.create",
        "description": "aws-python-http-api-with-dynamodb.todos.create",
        "peekOfCode": "dynamodb = boto3.resource('dynamodb')\ndef create(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't create the todo item.\")\n    timestamp = str(time.time())\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    item = {\n        'id': str(uuid.uuid1()),",
        "detail": "aws-python-http-api-with-dynamodb.todos.create",
        "documentation": {}
    },
    {
        "label": "DecimalEncoder",
        "kind": 6,
        "importPath": "aws-python-http-api-with-dynamodb.todos.decimalencoder",
        "description": "aws-python-http-api-with-dynamodb.todos.decimalencoder",
        "peekOfCode": "class DecimalEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, decimal.Decimal):\n            return int(obj)\n        return super(DecimalEncoder, self).default(obj)",
        "detail": "aws-python-http-api-with-dynamodb.todos.decimalencoder",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "aws-python-http-api-with-dynamodb.todos.delete",
        "description": "aws-python-http-api-with-dynamodb.todos.delete",
        "peekOfCode": "def delete(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # delete the todo from the database\n    table.delete_item(\n        Key={\n            'id': event['pathParameters']['id']\n        }\n    )\n    # create a response\n    response = {",
        "detail": "aws-python-http-api-with-dynamodb.todos.delete",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "aws-python-http-api-with-dynamodb.todos.delete",
        "description": "aws-python-http-api-with-dynamodb.todos.delete",
        "peekOfCode": "dynamodb = boto3.resource('dynamodb')\ndef delete(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # delete the todo from the database\n    table.delete_item(\n        Key={\n            'id': event['pathParameters']['id']\n        }\n    )\n    # create a response",
        "detail": "aws-python-http-api-with-dynamodb.todos.delete",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "aws-python-http-api-with-dynamodb.todos.get",
        "description": "aws-python-http-api-with-dynamodb.todos.get",
        "peekOfCode": "def get(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # fetch todo from the database\n    result = table.get_item(\n        Key={\n            'id': event['pathParameters']['id']\n        }\n    )\n    # create a response\n    response = {",
        "detail": "aws-python-http-api-with-dynamodb.todos.get",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "aws-python-http-api-with-dynamodb.todos.get",
        "description": "aws-python-http-api-with-dynamodb.todos.get",
        "peekOfCode": "dynamodb = boto3.resource('dynamodb')\ndef get(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # fetch todo from the database\n    result = table.get_item(\n        Key={\n            'id': event['pathParameters']['id']\n        }\n    )\n    # create a response",
        "detail": "aws-python-http-api-with-dynamodb.todos.get",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 2,
        "importPath": "aws-python-http-api-with-dynamodb.todos.list",
        "description": "aws-python-http-api-with-dynamodb.todos.list",
        "peekOfCode": "def list(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # fetch all todos from the database\n    result = table.scan()\n    # create a response\n    response = {\n        \"statusCode\": 200,\n        \"body\": json.dumps(result['Items'], cls=decimalencoder.DecimalEncoder)\n    }\n    return response",
        "detail": "aws-python-http-api-with-dynamodb.todos.list",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "aws-python-http-api-with-dynamodb.todos.list",
        "description": "aws-python-http-api-with-dynamodb.todos.list",
        "peekOfCode": "dynamodb = boto3.resource('dynamodb')\ndef list(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # fetch all todos from the database\n    result = table.scan()\n    # create a response\n    response = {\n        \"statusCode\": 200,\n        \"body\": json.dumps(result['Items'], cls=decimalencoder.DecimalEncoder)\n    }",
        "detail": "aws-python-http-api-with-dynamodb.todos.list",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "aws-python-http-api-with-dynamodb.todos.update",
        "description": "aws-python-http-api-with-dynamodb.todos.update",
        "peekOfCode": "def update(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data or 'checked' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't update the todo item.\")\n        return\n    timestamp = int(time.time() * 1000)\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # update the todo in the database\n    result = table.update_item(",
        "detail": "aws-python-http-api-with-dynamodb.todos.update",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "aws-python-http-api-with-dynamodb.todos.update",
        "description": "aws-python-http-api-with-dynamodb.todos.update",
        "peekOfCode": "dynamodb = boto3.resource('dynamodb')\ndef update(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data or 'checked' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't update the todo item.\")\n        return\n    timestamp = int(time.time() * 1000)\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # update the todo in the database",
        "detail": "aws-python-http-api-with-dynamodb.todos.update",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "aws-python-http-api-with-pynamodb.todos.create",
        "description": "aws-python-http-api-with-pynamodb.todos.create",
        "peekOfCode": "def create(event, context):\n    print(event['body'])\n    data = json.loads(event['body'])\n    if 'text' not in data:\n        logging.error('Validation Failed')\n        return {'statusCode': 422,\n                'body': json.dumps({'error_message': 'Couldn\\'t create the todo item.'})}\n    if not data['text']:\n        logging.error('Validation Failed - text was empty. %s', data)\n        return {'statusCode': 422,",
        "detail": "aws-python-http-api-with-pynamodb.todos.create",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "aws-python-http-api-with-pynamodb.todos.delete",
        "description": "aws-python-http-api-with-pynamodb.todos.delete",
        "peekOfCode": "def delete(event, context):\n    try:\n        found_todo = TodoModel.get(hash_key=event['path']['todo_id'])\n    except DoesNotExist:\n        return {'statusCode': 404,\n                'body': json.dumps({'error_message': 'TODO was not found'})}\n    try:\n        found_todo.delete()\n    except DeleteError:\n        return {'statusCode': 400,",
        "detail": "aws-python-http-api-with-pynamodb.todos.delete",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "aws-python-http-api-with-pynamodb.todos.get",
        "description": "aws-python-http-api-with-pynamodb.todos.get",
        "peekOfCode": "def get(event, context):\n    try:\n        found_todo = TodoModel.get(hash_key=event['path']['todo_id'])\n    except DoesNotExist:\n        return {'statusCode': 404,\n                'body': json.dumps({'error_message': 'TODO was not found'})}\n    # create a response\n    return {'statusCode': 200,\n            'body': json.dumps(dict(found_todo))}",
        "detail": "aws-python-http-api-with-pynamodb.todos.get",
        "documentation": {}
    },
    {
        "label": "todo_list",
        "kind": 2,
        "importPath": "aws-python-http-api-with-pynamodb.todos.list",
        "description": "aws-python-http-api-with-pynamodb.todos.list",
        "peekOfCode": "def todo_list(event, context):\n    # fetch all todos from the database\n    results = TodoModel.scan()\n    # create a response\n    return {'statusCode': 200,\n            'body': json.dumps({'items': [dict(result) for result in results]})}",
        "detail": "aws-python-http-api-with-pynamodb.todos.list",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "kind": 6,
        "importPath": "aws-python-http-api-with-pynamodb.todos.todo_model",
        "description": "aws-python-http-api-with-pynamodb.todos.todo_model",
        "peekOfCode": "class TodoModel(Model):\n    class Meta:\n        table_name = os.environ['DYNAMODB_TABLE']\n        if 'ENV' in os.environ:\n            host = 'http://localhost:8000'\n        else:\n            region = 'us-east-1'\n            host = 'https://dynamodb.us-east-1.amazonaws.com'\n    todo_id = UnicodeAttribute(hash_key=True, null=False)\n    text = UnicodeAttribute(null=False)",
        "detail": "aws-python-http-api-with-pynamodb.todos.todo_model",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "aws-python-http-api-with-pynamodb.todos.update",
        "description": "aws-python-http-api-with-pynamodb.todos.update",
        "peekOfCode": "def update(event, context):\n    # TODO: Figure out why this is behaving differently to the other endpoints\n    # data = json.loads(event['body'])\n    data = event['body']\n    if 'text' not in data and 'checked' not in data:\n        logging.error('Validation Failed %s', data)\n        return {'statusCode': 422,\n                'body': json.dumps({'error_message': 'Couldn\\'t update the todo item.'})}\n    try:\n        found_todo = TodoModel.get(hash_key=event['path']['todo_id'])",
        "detail": "aws-python-http-api-with-pynamodb.todos.update",
        "documentation": {}
    },
    {
        "label": "webhook",
        "kind": 2,
        "importPath": "aws-python-line-echo-bot.handler",
        "description": "aws-python-line-echo-bot.handler",
        "peekOfCode": "def webhook(event, context):\n    line_bot_api = LineBotApi('YOUR_CHANNEL_ACCESS_TOKEN')\n    handler = WebhookHandler('YOUR_CHANNEL_SECRET')\n    msg = json.loads(event['body'])\n    line_bot_api.reply_message(\n        msg['events'][0]['replyToken'],\n        TextSendMessage(text=msg['events'][0]['message']['text'])\n    )\n    response = {\n        \"statusCode\": 200,",
        "detail": "aws-python-line-echo-bot.handler",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "description": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "peekOfCode": "class State(Enum):\n    \"\"\"\n    Manage asset states in dynamo with a string field\n    Could have used an int as well, or used a custom serializer which is a bit cleaner.\n    \"\"\"\n    CREATED = 1\n    RECEIVED = 2\n    UPLOADED = 3\n    DELETED = 4\nclass AssetModel(Model):",
        "detail": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "documentation": {}
    },
    {
        "label": "AssetModel",
        "kind": 6,
        "importPath": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "description": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "peekOfCode": "class AssetModel(Model):\n    class Meta:\n        table_name = os.environ['DYNAMODB_TABLE']\n        if 'ENV' in os.environ:\n            host = 'http://localhost:8000'\n        else:\n            region = os.environ['REGION']\n            host = os.environ['DYNAMODB_HOST']\n            # 'https://dynamodb.us-east-1.amazonaws.com'\n    asset_id = UnicodeAttribute(hash_key=True)",
        "detail": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "documentation": {}
    },
    {
        "label": "BUCKET",
        "kind": 5,
        "importPath": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "description": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "peekOfCode": "BUCKET = os.environ['S3_BUCKET']\nKEY_BASE = os.environ['S3_KEY_BASE']\nclass State(Enum):\n    \"\"\"\n    Manage asset states in dynamo with a string field\n    Could have used an int as well, or used a custom serializer which is a bit cleaner.\n    \"\"\"\n    CREATED = 1\n    RECEIVED = 2\n    UPLOADED = 3",
        "detail": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "documentation": {}
    },
    {
        "label": "KEY_BASE",
        "kind": 5,
        "importPath": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "description": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "peekOfCode": "KEY_BASE = os.environ['S3_KEY_BASE']\nclass State(Enum):\n    \"\"\"\n    Manage asset states in dynamo with a string field\n    Could have used an int as well, or used a custom serializer which is a bit cleaner.\n    \"\"\"\n    CREATED = 1\n    RECEIVED = 2\n    UPLOADED = 3\n    DELETED = 4",
        "detail": "aws-python-pynamodb-s3-sigurl.asset.asset_model",
        "documentation": {}
    },
    {
        "label": "event",
        "kind": 2,
        "importPath": "aws-python-pynamodb-s3-sigurl.asset.bucket",
        "description": "aws-python-pynamodb-s3-sigurl.asset.bucket",
        "peekOfCode": "def event(event, context):\n    \"\"\"\n    Triggered by s3 events, object create and remove\n    \"\"\"\n    # Sample event:\n    #\n    # _event = {'Records': [{'eventVersion': '2.0', 'eventSource': 'aws:s3', 'awsRegion': 'us-east-1',\n    #                        'eventTime': '2017-11-25T23:57:38.988Z', 'eventName': 'ObjectCreated:Put',\n    #                        'userIdentity': {'principalId': 'AWS:AROAJWJG5IVL3URF4WKKK:su-xx-test-create'},\n    #                        'requestParameters': {'sourceIPAddress': '75.82.111.45'},",
        "detail": "aws-python-pynamodb-s3-sigurl.asset.bucket",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "aws-python-pynamodb-s3-sigurl.asset.create",
        "description": "aws-python-pynamodb-s3-sigurl.asset.create",
        "peekOfCode": "def create(event, context):\n    \"\"\"\n     No body needed here as POST is a request for a pre-signed upload URL.\n     Create an entry for it in dynamo and return upload URL\n    \"\"\"\n    # Sample events using different lambda integrations:\n    #\n    # _lambda_proxy_event = {'resource': '/asset', 'path': '/asset', 'httpMethod': 'POST',\n    #                        'headers': {'Accept': '*/*', 'CloudFront-Forwarded-Proto': 'https',\n    #                                    'CloudFront-Is-Desktop-Viewer': 'true', 'CloudFront-Is-Mobile-Viewer': 'false',",
        "detail": "aws-python-pynamodb-s3-sigurl.asset.create",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "aws-python-pynamodb-s3-sigurl.asset.delete",
        "description": "aws-python-pynamodb-s3-sigurl.asset.delete",
        "peekOfCode": "def delete(event, context):\n    logger.debug('event: {}'.format(event))\n    try:\n        asset_id = event['path']['asset_id']\n        asset = AssetModel.get(hash_key=asset_id)\n    except DoesNotExist:\n        return {\n            'statusCode': httplib.NOT_FOUND,\n            'body': {\n                'error_message': 'ASSET {} not found'.format(asset_id)",
        "detail": "aws-python-pynamodb-s3-sigurl.asset.delete",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "aws-python-pynamodb-s3-sigurl.asset.get",
        "description": "aws-python-pynamodb-s3-sigurl.asset.get",
        "peekOfCode": "def get(event, context):\n    \"\"\"\n    Get a presigned download URL for asset <asset-id>\n    \"\"\"\n    # Sample events using different lambda integrations:\n    #\n    # _lambda_event = {\n    #     'body': {}, 'method': 'GET', 'principalId': '', 'stage': 'dev', 'cognitoPoolClaims': {'sub': ''},\n    #     'headers': {'Accept': '*/*', 'CloudFront-Forwarded-Proto': 'https', 'CloudFront-Is-Desktop-Viewer': 'true',\n    #                 'CloudFront-Is-Mobile-Viewer': 'false', 'CloudFront-Is-SmartTV-Viewer': 'false',",
        "detail": "aws-python-pynamodb-s3-sigurl.asset.get",
        "documentation": {}
    },
    {
        "label": "asset_list",
        "kind": 2,
        "importPath": "aws-python-pynamodb-s3-sigurl.asset.list",
        "description": "aws-python-pynamodb-s3-sigurl.asset.list",
        "peekOfCode": "def asset_list(event, context):\n    logger.debug('event: {}, context: {}'.format(event, context))\n    results = AssetModel.scan()\n    return {\n        'statusCode': httplib.OK,\n        'body': {\n            'items': [dict(result) for result in results]\n        }\n    }",
        "detail": "aws-python-pynamodb-s3-sigurl.asset.list",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "aws-python-pynamodb-s3-sigurl.asset.update",
        "description": "aws-python-pynamodb-s3-sigurl.asset.update",
        "peekOfCode": "def update(event, context):\n    logger.debug('event: {}'.format(event))\n    try:\n        asset_id = event['path']['asset_id']\n        asset = AssetModel.get(hash_key=asset_id)\n        asset.mark_uploaded()\n    except AssertionError as e:\n        return {\n            'statusCode': httplib.PRECONDITION_FAILED,\n            'body': {",
        "detail": "aws-python-pynamodb-s3-sigurl.asset.update",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "aws-python-pynamodb-s3-sigurl.log_cfg",
        "description": "aws-python-pynamodb-s3-sigurl.log_cfg",
        "peekOfCode": "logger = logging.getLogger()\nfor h in logger.handlers:\n    logger.removeHandler(h)\nh = logging.StreamHandler(sys.stdout)\n# use whatever format you want here\nFORMAT = '%(asctime)-15s %(process)d-%(thread)d %(name)s [%(filename)s:%(lineno)d] :%(levelname)8s: %(message)s'\nh.setFormatter(logging.Formatter(FORMAT))\nlogger.addHandler(h)\nlogger.setLevel(logging.DEBUG)\n# Suppress the more verbose modules",
        "detail": "aws-python-pynamodb-s3-sigurl.log_cfg",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "aws-python-pynamodb-s3-sigurl.log_cfg",
        "description": "aws-python-pynamodb-s3-sigurl.log_cfg",
        "peekOfCode": "h = logging.StreamHandler(sys.stdout)\n# use whatever format you want here\nFORMAT = '%(asctime)-15s %(process)d-%(thread)d %(name)s [%(filename)s:%(lineno)d] :%(levelname)8s: %(message)s'\nh.setFormatter(logging.Formatter(FORMAT))\nlogger.addHandler(h)\nlogger.setLevel(logging.DEBUG)\n# Suppress the more verbose modules\nlogging.getLogger('__main__').setLevel(logging.DEBUG)\nlogging.getLogger('botocore').setLevel(logging.WARN)\nlogging.getLogger('pynamodb').setLevel(logging.INFO)",
        "detail": "aws-python-pynamodb-s3-sigurl.log_cfg",
        "documentation": {}
    },
    {
        "label": "FORMAT",
        "kind": 5,
        "importPath": "aws-python-pynamodb-s3-sigurl.log_cfg",
        "description": "aws-python-pynamodb-s3-sigurl.log_cfg",
        "peekOfCode": "FORMAT = '%(asctime)-15s %(process)d-%(thread)d %(name)s [%(filename)s:%(lineno)d] :%(levelname)8s: %(message)s'\nh.setFormatter(logging.Formatter(FORMAT))\nlogger.addHandler(h)\nlogger.setLevel(logging.DEBUG)\n# Suppress the more verbose modules\nlogging.getLogger('__main__').setLevel(logging.DEBUG)\nlogging.getLogger('botocore').setLevel(logging.WARN)\nlogging.getLogger('pynamodb').setLevel(logging.INFO)",
        "detail": "aws-python-pynamodb-s3-sigurl.log_cfg",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "aws-python-rest-api.handler",
        "description": "aws-python-rest-api.handler",
        "peekOfCode": "def hello(event, context):\n    body = {\n        \"message\": \"Go Serverless v2.0! Your function executed successfully!\",\n        \"input\": event,\n    }\n    response = {\"statusCode\": 200, \"body\": json.dumps(body)}\n    return response\n    # Use this code if you don't use the http event with the LAMBDA-PROXY\n    # integration\n    \"\"\"",
        "detail": "aws-python-rest-api.handler",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.create",
        "description": "aws-python-rest-api-with-dynamodb.todos.create",
        "peekOfCode": "def create(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't create the todo item.\")\n    timestamp = str(time.time())\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    item = {\n        'id': str(uuid.uuid1()),\n        'text': data['text'],",
        "detail": "aws-python-rest-api-with-dynamodb.todos.create",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.create",
        "description": "aws-python-rest-api-with-dynamodb.todos.create",
        "peekOfCode": "dynamodb = boto3.resource('dynamodb')\ndef create(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't create the todo item.\")\n    timestamp = str(time.time())\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    item = {\n        'id': str(uuid.uuid1()),",
        "detail": "aws-python-rest-api-with-dynamodb.todos.create",
        "documentation": {}
    },
    {
        "label": "DecimalEncoder",
        "kind": 6,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.decimalencoder",
        "description": "aws-python-rest-api-with-dynamodb.todos.decimalencoder",
        "peekOfCode": "class DecimalEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, decimal.Decimal):\n            return int(obj)\n        return super(DecimalEncoder, self).default(obj)",
        "detail": "aws-python-rest-api-with-dynamodb.todos.decimalencoder",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.delete",
        "description": "aws-python-rest-api-with-dynamodb.todos.delete",
        "peekOfCode": "def delete(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # delete the todo from the database\n    table.delete_item(\n        Key={\n            'id': event['pathParameters']['id']\n        }\n    )\n    # create a response\n    response = {",
        "detail": "aws-python-rest-api-with-dynamodb.todos.delete",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.delete",
        "description": "aws-python-rest-api-with-dynamodb.todos.delete",
        "peekOfCode": "dynamodb = boto3.resource('dynamodb')\ndef delete(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # delete the todo from the database\n    table.delete_item(\n        Key={\n            'id': event['pathParameters']['id']\n        }\n    )\n    # create a response",
        "detail": "aws-python-rest-api-with-dynamodb.todos.delete",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.get",
        "description": "aws-python-rest-api-with-dynamodb.todos.get",
        "peekOfCode": "def get(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # fetch todo from the database\n    result = table.get_item(\n        Key={\n            'id': event['pathParameters']['id']\n        }\n    )\n    # create a response\n    response = {",
        "detail": "aws-python-rest-api-with-dynamodb.todos.get",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.get",
        "description": "aws-python-rest-api-with-dynamodb.todos.get",
        "peekOfCode": "dynamodb = boto3.resource('dynamodb')\ndef get(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # fetch todo from the database\n    result = table.get_item(\n        Key={\n            'id': event['pathParameters']['id']\n        }\n    )\n    # create a response",
        "detail": "aws-python-rest-api-with-dynamodb.todos.get",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.list",
        "description": "aws-python-rest-api-with-dynamodb.todos.list",
        "peekOfCode": "def list(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # fetch all todos from the database\n    result = table.scan()\n    # create a response\n    response = {\n        \"statusCode\": 200,\n        \"body\": json.dumps(result['Items'], cls=decimalencoder.DecimalEncoder)\n    }\n    return response",
        "detail": "aws-python-rest-api-with-dynamodb.todos.list",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.list",
        "description": "aws-python-rest-api-with-dynamodb.todos.list",
        "peekOfCode": "dynamodb = boto3.resource('dynamodb')\ndef list(event, context):\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # fetch all todos from the database\n    result = table.scan()\n    # create a response\n    response = {\n        \"statusCode\": 200,\n        \"body\": json.dumps(result['Items'], cls=decimalencoder.DecimalEncoder)\n    }",
        "detail": "aws-python-rest-api-with-dynamodb.todos.list",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.update",
        "description": "aws-python-rest-api-with-dynamodb.todos.update",
        "peekOfCode": "def update(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data or 'checked' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't update the todo item.\")\n        return\n    timestamp = int(time.time() * 1000)\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # update the todo in the database\n    result = table.update_item(",
        "detail": "aws-python-rest-api-with-dynamodb.todos.update",
        "documentation": {}
    },
    {
        "label": "dynamodb",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-dynamodb.todos.update",
        "description": "aws-python-rest-api-with-dynamodb.todos.update",
        "peekOfCode": "dynamodb = boto3.resource('dynamodb')\ndef update(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data or 'checked' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't update the todo item.\")\n        return\n    timestamp = int(time.time() * 1000)\n    table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])\n    # update the todo in the database",
        "detail": "aws-python-rest-api-with-dynamodb.todos.update",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-faunadb.todos.create",
        "description": "aws-python-rest-api-with-faunadb.todos.create",
        "peekOfCode": "def create(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't create the todo item.\")\n    data = {\n        'text': data['text'],\n        'checked': False,\n        'createdAt': query.time('now'),\n        'updatedAt': query.time('now')",
        "detail": "aws-python-rest-api-with-faunadb.todos.create",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-faunadb.todos.delete",
        "description": "aws-python-rest-api-with-faunadb.todos.delete",
        "peekOfCode": "def delete(event, context):\n    # delete the todo from the database\n    client.query(query.delete(Ref(TODOS, event['pathParameters']['id'])))\n    # create a response\n    response = {\n        \"statusCode\": 200\n    }\n    return response",
        "detail": "aws-python-rest-api-with-faunadb.todos.delete",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-faunadb.todos.get",
        "description": "aws-python-rest-api-with-faunadb.todos.get",
        "peekOfCode": "def get(event, context):\n    # fetch todo from the database\n    ref = Ref(TODOS, event['pathParameters']['id'])\n    fetched = client.query(query.get(ref))\n    # create a response\n    response = {\n        \"statusCode\": 200,\n        \"body\": json.dumps(make_result(fetched))\n    }\n    return response",
        "detail": "aws-python-rest-api-with-faunadb.todos.get",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-faunadb.todos.list",
        "description": "aws-python-rest-api-with-faunadb.todos.list",
        "peekOfCode": "def list(event, context):\n    # fetch all todos from the database\n    results = client.query(\n        query.map_expr(lambda ref: query.get(ref),\n                       query.paginate(query.match(ALL_TODOS))))\n    # create a response\n    response = {\n        \"statusCode\": 200,\n        \"body\": json.dumps(map(make_result, results['data']))\n    }",
        "detail": "aws-python-rest-api-with-faunadb.todos.list",
        "documentation": {}
    },
    {
        "label": "make_result",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-faunadb.todos.makeresult",
        "description": "aws-python-rest-api-with-faunadb.todos.makeresult",
        "peekOfCode": "def make_result(value):\n    return {\n        'id': value['ref'].id(),\n        'text': value['data']['text'],\n        'checked': value['data']['checked'],\n        'createdAt': _to_epoch(value['data']['createdAt']),\n        'updatedAt': _to_epoch(value['data']['updatedAt'])\n    }",
        "detail": "aws-python-rest-api-with-faunadb.todos.makeresult",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-faunadb.todos.schema",
        "description": "aws-python-rest-api-with-faunadb.todos.schema",
        "peekOfCode": "def schema(event, context):\n    create_todos = query.create_class({\n        'name': 'todos'\n    })\n    create_all_todos = query.create_index({\n        'name': 'all_todos',\n        'source': TODOS\n    })\n    client.query(query.if_expr(\n        query.exists(TODOS),",
        "detail": "aws-python-rest-api-with-faunadb.todos.schema",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-faunadb.todos.update",
        "description": "aws-python-rest-api-with-faunadb.todos.update",
        "peekOfCode": "def update(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data or 'checked' not in data:\n        logging.error(\"Validation Failed\")\n        raise Exception(\"Couldn't update the todo item.\")\n    data = {\n        'text': data['text'],\n        'checked': data['checked'],\n        'updatedAt': query.time('now')\n    }",
        "detail": "aws-python-rest-api-with-faunadb.todos.update",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-pymongo.item.create",
        "description": "aws-python-rest-api-with-pymongo.item.create",
        "peekOfCode": "def create(event, context):\n    # get request body\n    data = json.loads(event['body'])\n    # create item to insert\n    item = {\n        '_id': str(uuid.uuid1()),\n        'data': data,\n    }\n    # write item to database\n    collection.insert_one(item)",
        "detail": "aws-python-rest-api-with-pymongo.item.create",
        "documentation": {}
    },
    {
        "label": "usr",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.create",
        "description": "aws-python-rest-api-with-pymongo.item.create",
        "peekOfCode": "usr = os.environ['MONGO_DB_USER']\npwd = os.environ['MONGO_DB_PASS']\nmongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef create(event, context):",
        "detail": "aws-python-rest-api-with-pymongo.item.create",
        "documentation": {}
    },
    {
        "label": "pwd",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.create",
        "description": "aws-python-rest-api-with-pymongo.item.create",
        "peekOfCode": "pwd = os.environ['MONGO_DB_PASS']\nmongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef create(event, context):\n    # get request body",
        "detail": "aws-python-rest-api-with-pymongo.item.create",
        "documentation": {}
    },
    {
        "label": "mongo_db_name",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.create",
        "description": "aws-python-rest-api-with-pymongo.item.create",
        "peekOfCode": "mongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef create(event, context):\n    # get request body\n    data = json.loads(event['body'])",
        "detail": "aws-python-rest-api-with-pymongo.item.create",
        "documentation": {}
    },
    {
        "label": "mongo_collection_name",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.create",
        "description": "aws-python-rest-api-with-pymongo.item.create",
        "peekOfCode": "mongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef create(event, context):\n    # get request body\n    data = json.loads(event['body'])\n    # create item to insert",
        "detail": "aws-python-rest-api-with-pymongo.item.create",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.create",
        "description": "aws-python-rest-api-with-pymongo.item.create",
        "peekOfCode": "url = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef create(event, context):\n    # get request body\n    data = json.loads(event['body'])\n    # create item to insert\n    item = {",
        "detail": "aws-python-rest-api-with-pymongo.item.create",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.create",
        "description": "aws-python-rest-api-with-pymongo.item.create",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef create(event, context):\n    # get request body\n    data = json.loads(event['body'])\n    # create item to insert\n    item = {\n        '_id': str(uuid.uuid1()),\n        'data': data,",
        "detail": "aws-python-rest-api-with-pymongo.item.create",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.create",
        "description": "aws-python-rest-api-with-pymongo.item.create",
        "peekOfCode": "db = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef create(event, context):\n    # get request body\n    data = json.loads(event['body'])\n    # create item to insert\n    item = {\n        '_id': str(uuid.uuid1()),\n        'data': data,\n    }",
        "detail": "aws-python-rest-api-with-pymongo.item.create",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.create",
        "description": "aws-python-rest-api-with-pymongo.item.create",
        "peekOfCode": "collection = db[mongo_collection_name]\ndef create(event, context):\n    # get request body\n    data = json.loads(event['body'])\n    # create item to insert\n    item = {\n        '_id': str(uuid.uuid1()),\n        'data': data,\n    }\n    # write item to database",
        "detail": "aws-python-rest-api-with-pymongo.item.create",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-pymongo.item.delete",
        "description": "aws-python-rest-api-with-pymongo.item.delete",
        "peekOfCode": "def delete(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database\n    del_resp = collection.delete_one({\"_id\": item_id})\n    # if no item return 404\n    if del_resp.deleted_count == 0:\n        response = {\n            \"statusCode\": 404,\n        }",
        "detail": "aws-python-rest-api-with-pymongo.item.delete",
        "documentation": {}
    },
    {
        "label": "usr",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.delete",
        "description": "aws-python-rest-api-with-pymongo.item.delete",
        "peekOfCode": "usr = os.environ['MONGO_DB_USER']\npwd = os.environ['MONGO_DB_PASS']\nmongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef delete(event, context):",
        "detail": "aws-python-rest-api-with-pymongo.item.delete",
        "documentation": {}
    },
    {
        "label": "pwd",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.delete",
        "description": "aws-python-rest-api-with-pymongo.item.delete",
        "peekOfCode": "pwd = os.environ['MONGO_DB_PASS']\nmongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef delete(event, context):\n    # get item_id to delete from path parameter",
        "detail": "aws-python-rest-api-with-pymongo.item.delete",
        "documentation": {}
    },
    {
        "label": "mongo_db_name",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.delete",
        "description": "aws-python-rest-api-with-pymongo.item.delete",
        "peekOfCode": "mongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef delete(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']",
        "detail": "aws-python-rest-api-with-pymongo.item.delete",
        "documentation": {}
    },
    {
        "label": "mongo_collection_name",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.delete",
        "description": "aws-python-rest-api-with-pymongo.item.delete",
        "peekOfCode": "mongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef delete(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database",
        "detail": "aws-python-rest-api-with-pymongo.item.delete",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.delete",
        "description": "aws-python-rest-api-with-pymongo.item.delete",
        "peekOfCode": "url = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef delete(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database\n    del_resp = collection.delete_one({\"_id\": item_id})",
        "detail": "aws-python-rest-api-with-pymongo.item.delete",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.delete",
        "description": "aws-python-rest-api-with-pymongo.item.delete",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef delete(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database\n    del_resp = collection.delete_one({\"_id\": item_id})\n    # if no item return 404\n    if del_resp.deleted_count == 0:",
        "detail": "aws-python-rest-api-with-pymongo.item.delete",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.delete",
        "description": "aws-python-rest-api-with-pymongo.item.delete",
        "peekOfCode": "db = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef delete(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database\n    del_resp = collection.delete_one({\"_id\": item_id})\n    # if no item return 404\n    if del_resp.deleted_count == 0:\n        response = {",
        "detail": "aws-python-rest-api-with-pymongo.item.delete",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.delete",
        "description": "aws-python-rest-api-with-pymongo.item.delete",
        "peekOfCode": "collection = db[mongo_collection_name]\ndef delete(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database\n    del_resp = collection.delete_one({\"_id\": item_id})\n    # if no item return 404\n    if del_resp.deleted_count == 0:\n        response = {\n            \"statusCode\": 404,",
        "detail": "aws-python-rest-api-with-pymongo.item.delete",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-pymongo.item.get",
        "description": "aws-python-rest-api-with-pymongo.item.get",
        "peekOfCode": "def get(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database\n    item = collection.find_one({\"_id\": item_id})\n    # create a response\n    response = {\n        \"statusCode\": 200,\n        \"body\": json.dumps(item)\n    }",
        "detail": "aws-python-rest-api-with-pymongo.item.get",
        "documentation": {}
    },
    {
        "label": "usr",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.get",
        "description": "aws-python-rest-api-with-pymongo.item.get",
        "peekOfCode": "usr = os.environ['MONGO_DB_USER']\npwd = os.environ['MONGO_DB_PASS']\nmongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef get(event, context):",
        "detail": "aws-python-rest-api-with-pymongo.item.get",
        "documentation": {}
    },
    {
        "label": "pwd",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.get",
        "description": "aws-python-rest-api-with-pymongo.item.get",
        "peekOfCode": "pwd = os.environ['MONGO_DB_PASS']\nmongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef get(event, context):\n    # get item_id to delete from path parameter",
        "detail": "aws-python-rest-api-with-pymongo.item.get",
        "documentation": {}
    },
    {
        "label": "mongo_db_name",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.get",
        "description": "aws-python-rest-api-with-pymongo.item.get",
        "peekOfCode": "mongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef get(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']",
        "detail": "aws-python-rest-api-with-pymongo.item.get",
        "documentation": {}
    },
    {
        "label": "mongo_collection_name",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.get",
        "description": "aws-python-rest-api-with-pymongo.item.get",
        "peekOfCode": "mongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef get(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database",
        "detail": "aws-python-rest-api-with-pymongo.item.get",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.get",
        "description": "aws-python-rest-api-with-pymongo.item.get",
        "peekOfCode": "url = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef get(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database\n    item = collection.find_one({\"_id\": item_id})",
        "detail": "aws-python-rest-api-with-pymongo.item.get",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.get",
        "description": "aws-python-rest-api-with-pymongo.item.get",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef get(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database\n    item = collection.find_one({\"_id\": item_id})\n    # create a response\n    response = {",
        "detail": "aws-python-rest-api-with-pymongo.item.get",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.get",
        "description": "aws-python-rest-api-with-pymongo.item.get",
        "peekOfCode": "db = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef get(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database\n    item = collection.find_one({\"_id\": item_id})\n    # create a response\n    response = {\n        \"statusCode\": 200,",
        "detail": "aws-python-rest-api-with-pymongo.item.get",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.get",
        "description": "aws-python-rest-api-with-pymongo.item.get",
        "peekOfCode": "collection = db[mongo_collection_name]\ndef get(event, context):\n    # get item_id to delete from path parameter\n    item_id = event['pathParameters']['id']\n    # delete item from the database\n    item = collection.find_one({\"_id\": item_id})\n    # create a response\n    response = {\n        \"statusCode\": 200,\n        \"body\": json.dumps(item)",
        "detail": "aws-python-rest-api-with-pymongo.item.get",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-pymongo.item.list",
        "description": "aws-python-rest-api-with-pymongo.item.list",
        "peekOfCode": "def list(event, context):\n    # create response body object\n    response_body = {}\n    # create array for reponse items\n    response_body['response_items'] = []\n    # return path parameters with filter key\n    response_body['filter'] = event['multiValueQueryStringParameters']\n    # build query with any path parameters\n    query = {}\n    if event['multiValueQueryStringParameters'] is not None:",
        "detail": "aws-python-rest-api-with-pymongo.item.list",
        "documentation": {}
    },
    {
        "label": "usr",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.list",
        "description": "aws-python-rest-api-with-pymongo.item.list",
        "peekOfCode": "usr = os.environ['MONGO_DB_USER']\npwd = os.environ['MONGO_DB_PASS']\nmongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef list(event, context):",
        "detail": "aws-python-rest-api-with-pymongo.item.list",
        "documentation": {}
    },
    {
        "label": "pwd",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.list",
        "description": "aws-python-rest-api-with-pymongo.item.list",
        "peekOfCode": "pwd = os.environ['MONGO_DB_PASS']\nmongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef list(event, context):\n    # create response body object",
        "detail": "aws-python-rest-api-with-pymongo.item.list",
        "documentation": {}
    },
    {
        "label": "mongo_db_name",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.list",
        "description": "aws-python-rest-api-with-pymongo.item.list",
        "peekOfCode": "mongo_db_name = os.environ['MONGO_DB_NAME']\nmongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef list(event, context):\n    # create response body object\n    response_body = {}",
        "detail": "aws-python-rest-api-with-pymongo.item.list",
        "documentation": {}
    },
    {
        "label": "mongo_collection_name",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.list",
        "description": "aws-python-rest-api-with-pymongo.item.list",
        "peekOfCode": "mongo_collection_name = os.environ['MONGO_COLLECTION_NAME']\nurl = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef list(event, context):\n    # create response body object\n    response_body = {}\n    # create array for reponse items",
        "detail": "aws-python-rest-api-with-pymongo.item.list",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.list",
        "description": "aws-python-rest-api-with-pymongo.item.list",
        "peekOfCode": "url = os.environ['MONGO_DB_URL']\n# Connection String\nclient = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef list(event, context):\n    # create response body object\n    response_body = {}\n    # create array for reponse items\n    response_body['response_items'] = []",
        "detail": "aws-python-rest-api-with-pymongo.item.list",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.list",
        "description": "aws-python-rest-api-with-pymongo.item.list",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://\" + usr + \":\" + pwd + \"@\" + url + \"/test?retryWrites=true&w=majority\")\ndb = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef list(event, context):\n    # create response body object\n    response_body = {}\n    # create array for reponse items\n    response_body['response_items'] = []\n    # return path parameters with filter key\n    response_body['filter'] = event['multiValueQueryStringParameters']",
        "detail": "aws-python-rest-api-with-pymongo.item.list",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.list",
        "description": "aws-python-rest-api-with-pymongo.item.list",
        "peekOfCode": "db = client[mongo_db_name]\ncollection = db[mongo_collection_name]\ndef list(event, context):\n    # create response body object\n    response_body = {}\n    # create array for reponse items\n    response_body['response_items'] = []\n    # return path parameters with filter key\n    response_body['filter'] = event['multiValueQueryStringParameters']\n    # build query with any path parameters",
        "detail": "aws-python-rest-api-with-pymongo.item.list",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "aws-python-rest-api-with-pymongo.item.list",
        "description": "aws-python-rest-api-with-pymongo.item.list",
        "peekOfCode": "collection = db[mongo_collection_name]\ndef list(event, context):\n    # create response body object\n    response_body = {}\n    # create array for reponse items\n    response_body['response_items'] = []\n    # return path parameters with filter key\n    response_body['filter'] = event['multiValueQueryStringParameters']\n    # build query with any path parameters\n    query = {}",
        "detail": "aws-python-rest-api-with-pymongo.item.list",
        "documentation": {}
    },
    {
        "label": "create",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-pynamodb.todos.create",
        "description": "aws-python-rest-api-with-pynamodb.todos.create",
        "peekOfCode": "def create(event, context):\n    data = json.loads(event['body'])\n    if 'text' not in data:\n        logging.error('Validation Failed')\n        return {'statusCode': 422,\n                'body': json.dumps({'error_message': 'Couldn\\'t create the todo item.'})}\n    if not data['text']:\n        logging.error('Validation Failed - text was empty. %s', data)\n        return {'statusCode': 422,\n                'body': json.dumps({'error_message': 'Couldn\\'t create the todo item. As text was empty.'})}",
        "detail": "aws-python-rest-api-with-pynamodb.todos.create",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-pynamodb.todos.delete",
        "description": "aws-python-rest-api-with-pynamodb.todos.delete",
        "peekOfCode": "def delete(event, context):\n    try:\n        found_todo = TodoModel.get(hash_key=event['path']['todo_id'])\n    except DoesNotExist:\n        return {'statusCode': 404,\n                'body': json.dumps({'error_message': 'TODO was not found'})}\n    try:\n        found_todo.delete()\n    except DeleteError:\n        return {'statusCode': 400,",
        "detail": "aws-python-rest-api-with-pynamodb.todos.delete",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-pynamodb.todos.get",
        "description": "aws-python-rest-api-with-pynamodb.todos.get",
        "peekOfCode": "def get(event, context):\n    try:\n        found_todo = TodoModel.get(hash_key=event['path']['todo_id'])\n    except DoesNotExist:\n        return {'statusCode': 404,\n                'body': json.dumps({'error_message': 'TODO was not found'})}\n    # create a response\n    return {'statusCode': 200,\n            'body': json.dumps(dict(found_todo))}",
        "detail": "aws-python-rest-api-with-pynamodb.todos.get",
        "documentation": {}
    },
    {
        "label": "todo_list",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-pynamodb.todos.list",
        "description": "aws-python-rest-api-with-pynamodb.todos.list",
        "peekOfCode": "def todo_list(event, context):\n    # fetch all todos from the database\n    results = TodoModel.scan()\n    # create a response\n    return {'statusCode': 200,\n            'body': json.dumps({'items': [dict(result) for result in results]})}",
        "detail": "aws-python-rest-api-with-pynamodb.todos.list",
        "documentation": {}
    },
    {
        "label": "TodoModel",
        "kind": 6,
        "importPath": "aws-python-rest-api-with-pynamodb.todos.todo_model",
        "description": "aws-python-rest-api-with-pynamodb.todos.todo_model",
        "peekOfCode": "class TodoModel(Model):\n    class Meta:\n        table_name = os.environ['DYNAMODB_TABLE']\n        if 'ENV' in os.environ:\n            host = 'http://localhost:8000'\n        else:\n            region = 'eu-central-1'\n            host = 'https://dynamodb.eu-central-1.amazonaws.com'\n    todo_id = UnicodeAttribute(hash_key=True, null=False)\n    text = UnicodeAttribute(null=False)",
        "detail": "aws-python-rest-api-with-pynamodb.todos.todo_model",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "aws-python-rest-api-with-pynamodb.todos.update",
        "description": "aws-python-rest-api-with-pynamodb.todos.update",
        "peekOfCode": "def update(event, context):\n    # TODO: Figure out why this is behaving differently to the other endpoints\n    # data = json.loads(event['body'])\n    data = event['body']\n    if 'text' not in data and 'checked' not in data:\n        logging.error('Validation Failed %s', data)\n        return {'statusCode': 422,\n                'body': json.dumps({'error_message': 'Couldn\\'t update the todo item.'})}\n    try:\n        found_todo = TodoModel.get(hash_key=event['path']['todo_id'])",
        "detail": "aws-python-rest-api-with-pynamodb.todos.update",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "aws-python-scheduled-cron.handler",
        "description": "aws-python-scheduled-cron.handler",
        "peekOfCode": "def run(event, context):\n    current_time = datetime.datetime.now().time()\n    name = context.function_name\n    logger.info(\"Your cron function \" + name + \" ran at \" + str(current_time))",
        "detail": "aws-python-scheduled-cron.handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "aws-python-scheduled-cron.handler",
        "description": "aws-python-scheduled-cron.handler",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\ndef run(event, context):\n    current_time = datetime.datetime.now().time()\n    name = context.function_name\n    logger.info(\"Your cron function \" + name + \" ran at \" + str(current_time))",
        "detail": "aws-python-scheduled-cron.handler",
        "documentation": {}
    },
    {
        "label": "endpoint",
        "kind": 2,
        "importPath": "aws-python-simple-http-endpoint.handler",
        "description": "aws-python-simple-http-endpoint.handler",
        "peekOfCode": "def endpoint(event, context):\n    current_time = datetime.datetime.now().time()\n    body = {\n        \"message\": \"Hello, the current time is \" + str(current_time)\n    }\n    response = {\n        \"statusCode\": 200,\n        \"body\": json.dumps(body)\n    }\n    return response",
        "detail": "aws-python-simple-http-endpoint.handler",
        "documentation": {}
    },
    {
        "label": "producer",
        "kind": 2,
        "importPath": "aws-python-sqs-worker.handler",
        "description": "aws-python-sqs-worker.handler",
        "peekOfCode": "def producer(event, context):\n    status_code = 200\n    message = ''\n    if not event.get('body'):\n        return {'statusCode': 400, 'body': json.dumps({'message': 'No body was found'})}\n    try:\n        message_attrs = {\n            'AttributeName': {'StringValue': 'AttributeValue', 'DataType': 'String'}\n        }\n        SQS.send_message(",
        "detail": "aws-python-sqs-worker.handler",
        "documentation": {}
    },
    {
        "label": "consumer",
        "kind": 2,
        "importPath": "aws-python-sqs-worker.handler",
        "description": "aws-python-sqs-worker.handler",
        "peekOfCode": "def consumer(event, context):\n    for record in event['Records']:\n        logger.info(f'Message body: {record[\"body\"]}')\n        logger.info(\n            f'Message attribute: {record[\"messageAttributes\"][\"AttributeName\"][\"stringValue\"]}'\n        )",
        "detail": "aws-python-sqs-worker.handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "aws-python-sqs-worker.handler",
        "description": "aws-python-sqs-worker.handler",
        "peekOfCode": "logger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\nQUEUE_URL = os.getenv('QUEUE_URL')\nSQS = boto3.client('sqs')\ndef producer(event, context):\n    status_code = 200\n    message = ''\n    if not event.get('body'):\n        return {'statusCode': 400, 'body': json.dumps({'message': 'No body was found'})}\n    try:",
        "detail": "aws-python-sqs-worker.handler",
        "documentation": {}
    },
    {
        "label": "QUEUE_URL",
        "kind": 5,
        "importPath": "aws-python-sqs-worker.handler",
        "description": "aws-python-sqs-worker.handler",
        "peekOfCode": "QUEUE_URL = os.getenv('QUEUE_URL')\nSQS = boto3.client('sqs')\ndef producer(event, context):\n    status_code = 200\n    message = ''\n    if not event.get('body'):\n        return {'statusCode': 400, 'body': json.dumps({'message': 'No body was found'})}\n    try:\n        message_attrs = {\n            'AttributeName': {'StringValue': 'AttributeValue', 'DataType': 'String'}",
        "detail": "aws-python-sqs-worker.handler",
        "documentation": {}
    },
    {
        "label": "SQS",
        "kind": 5,
        "importPath": "aws-python-sqs-worker.handler",
        "description": "aws-python-sqs-worker.handler",
        "peekOfCode": "SQS = boto3.client('sqs')\ndef producer(event, context):\n    status_code = 200\n    message = ''\n    if not event.get('body'):\n        return {'statusCode': 400, 'body': json.dumps({'message': 'No body was found'})}\n    try:\n        message_attrs = {\n            'AttributeName': {'StringValue': 'AttributeValue', 'DataType': 'String'}\n        }",
        "detail": "aws-python-sqs-worker.handler",
        "documentation": {}
    },
    {
        "label": "configure_telegram",
        "kind": 2,
        "importPath": "aws-python-telegram-bot.handler",
        "description": "aws-python-telegram-bot.handler",
        "peekOfCode": "def configure_telegram():\n    \"\"\"\n    Configures the bot with a Telegram Token.\n    Returns a bot instance.\n    \"\"\"\n    TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')\n    if not TELEGRAM_TOKEN:\n        logger.error('The TELEGRAM_TOKEN must be set')\n        raise NotImplementedError\n    return telegram.Bot(TELEGRAM_TOKEN)",
        "detail": "aws-python-telegram-bot.handler",
        "documentation": {}
    },
    {
        "label": "webhook",
        "kind": 2,
        "importPath": "aws-python-telegram-bot.handler",
        "description": "aws-python-telegram-bot.handler",
        "peekOfCode": "def webhook(event, context):\n    \"\"\"\n    Runs the Telegram webhook.\n    \"\"\"\n    bot = configure_telegram()\n    logger.info('Event: {}'.format(event))\n    if event.get('httpMethod') == 'POST' and event.get('body'): \n        logger.info('Message received')\n        update = telegram.Update.de_json(json.loads(event.get('body')), bot)\n        chat_id = update.message.chat.id",
        "detail": "aws-python-telegram-bot.handler",
        "documentation": {}
    },
    {
        "label": "set_webhook",
        "kind": 2,
        "importPath": "aws-python-telegram-bot.handler",
        "description": "aws-python-telegram-bot.handler",
        "peekOfCode": "def set_webhook(event, context):\n    \"\"\"\n    Sets the Telegram bot webhook.\n    \"\"\"\n    logger.info('Event: {}'.format(event))\n    bot = configure_telegram()\n    url = 'https://{}/{}/'.format(\n        event.get('headers').get('Host'),\n        event.get('requestContext').get('stage'),\n    )",
        "detail": "aws-python-telegram-bot.handler",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "aws-python-telegram-bot.handler",
        "description": "aws-python-telegram-bot.handler",
        "peekOfCode": "logger = logging.getLogger()\nif logger.handlers:\n    for handler in logger.handlers:\n        logger.removeHandler(handler)\nlogging.basicConfig(level=logging.INFO)\nOK_RESPONSE = {\n    'statusCode': 200,\n    'headers': {'Content-Type': 'application/json'},\n    'body': json.dumps('ok')\n}",
        "detail": "aws-python-telegram-bot.handler",
        "documentation": {}
    },
    {
        "label": "OK_RESPONSE",
        "kind": 5,
        "importPath": "aws-python-telegram-bot.handler",
        "description": "aws-python-telegram-bot.handler",
        "peekOfCode": "OK_RESPONSE = {\n    'statusCode': 200,\n    'headers': {'Content-Type': 'application/json'},\n    'body': json.dumps('ok')\n}\nERROR_RESPONSE = {\n    'statusCode': 400,\n    'body': json.dumps('Oops, something went wrong!')\n}\ndef configure_telegram():",
        "detail": "aws-python-telegram-bot.handler",
        "documentation": {}
    },
    {
        "label": "ERROR_RESPONSE",
        "kind": 5,
        "importPath": "aws-python-telegram-bot.handler",
        "description": "aws-python-telegram-bot.handler",
        "peekOfCode": "ERROR_RESPONSE = {\n    'statusCode': 400,\n    'body': json.dumps('Oops, something went wrong!')\n}\ndef configure_telegram():\n    \"\"\"\n    Configures the bot with a Telegram Token.\n    Returns a bot instance.\n    \"\"\"\n    TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')",
        "detail": "aws-python-telegram-bot.handler",
        "documentation": {}
    },
    {
        "label": "endpoint",
        "kind": 2,
        "importPath": "google-python-simple-http-endpoint.main",
        "description": "google-python-simple-http-endpoint.main",
        "peekOfCode": "def endpoint(request):\n    \"\"\"GCP HTTP Cloud Function Example.\n    Args:\n        request (flask.Request)\n    Returns:\n        The response text, or any set of values that can be turned into a\n        Response object using `make_response`\n        <http://flask.pocoo.org/docs/0.12/api/#flask.Flask.make_response>.\n    \"\"\"\n    current_time = datetime.datetime.now().time()",
        "detail": "google-python-simple-http-endpoint.main",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "kubeless-python-simple-function.handler",
        "description": "kubeless-python-simple-function.handler",
        "peekOfCode": "def hello(event, context):\n    return \"Hello \" + event['data'] + \"!\"",
        "detail": "kubeless-python-simple-function.handler",
        "documentation": {}
    },
    {
        "label": "printClock",
        "kind": 2,
        "importPath": "kubeless-python-simple-scheduled-function.handler",
        "description": "kubeless-python-simple-scheduled-function.handler",
        "peekOfCode": "def printClock(event, context):\n    now = datetime.now()\n    clock = \"%02d:%02d\" % (now.hour,now.minute)\n    print clock\n    return clock",
        "detail": "kubeless-python-simple-scheduled-function.handler",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "openwhisk-python-scheduled-cron.handler",
        "description": "openwhisk-python-scheduled-cron.handler",
        "peekOfCode": "def run(params):\n    current_time = datetime.datetime.now().time()\n    name = os.environ['__OW_ACTION_NAME']\n    print(\"Your cron function \" + name + \" ran at \" + str(current_time))\n    return {}",
        "detail": "openwhisk-python-scheduled-cron.handler",
        "documentation": {}
    },
    {
        "label": "endpoint",
        "kind": 2,
        "importPath": "openwhisk-python-simple.handler",
        "description": "openwhisk-python-simple.handler",
        "peekOfCode": "def endpoint(params):\n    name = params.get(\"name\", \"stranger\")\n    greeting = \"Hello \" + name + \"!\"\n    print(greeting)\n    return {\"greeting\": greeting}",
        "detail": "openwhisk-python-simple.handler",
        "documentation": {}
    },
    {
        "label": "endpoint",
        "kind": 2,
        "importPath": "openwhisk-python-simple-http-endpoint.handler",
        "description": "openwhisk-python-simple-http-endpoint.handler",
        "peekOfCode": "def endpoint(params):\n    current_time = datetime.datetime.now().time()\n    name = params.get(\"name\", \"stranger\")\n    body = {\n        \"message\": \"Hello \" + name + \", the current time is \" + str(current_time)\n    }\n    return body",
        "detail": "openwhisk-python-simple-http-endpoint.handler",
        "documentation": {}
    }
]